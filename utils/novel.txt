// == 扫描摘要 ==
//
// == 文件内容 ==

// =
// 文件: ..\src\novel\assets\styles\main.css
//



.novel-module {

}


.hide-scrollbar::-webkit-scrollbar {
    display: none;
}



// =
// 文件: ..\src\novel\chat\components\ChatInputArea.vue
//

// =
// 文件: ..\src\novel\chat\components\ChatInputArea.vue
//

<template>
  <div class="p-4 border-t border-gray-100 bg-[#FAFAFA]">
    <div class="flex gap-3 items-end max-w-5xl mx-auto">
      <button class="w-9 h-9 flex-shrink-0 flex items-center justify-center text-gray-500 hover:bg-gray-200 rounded-lg transition-colors">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M18.375 12.739l-7.693 7.693a4.5 4.5 0 01-6.364-6.364l10.94-10.94A3.375 3.375 0 1118.375 12.74z" /></svg>
      </button>
      <div class="flex-1 bg-white border border-gray-200 rounded-lg focus-within:ring-1 focus-within:ring-blue-500 focus-within:border-blue-500 transition-shadow">
        <textarea
            v-model="messageInput"
            @keydown.enter.exact.prevent="sendMessage"
            class="w-full bg-transparent p-2.5 text-sm text-[#374151] resize-none outline-none hide-scrollbar"
            placeholder="输入您的问题，按 Enter 发送"
            rows="1"
            ref="textareaRef"
        ></textarea>
      </div>
      <button
          @click="sendMessage"
          :disabled="isReceiving || !messageInput.trim()"
          class="w-10 h-10 flex-shrink-0 bg-[#4B5563] text-white rounded-lg hover:bg-[#374151] transition-colors flex items-center justify-center disabled:bg-gray-300 disabled:cursor-not-allowed"
      >
        <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M6 12L3.269 3.126A59.768 59.768 0 0121.485 12 59.77 59.77 0 013.27 20.876L5.999 12zm0 0h7.5"></path></svg>
      </button>
    </div>
    <div class="text-center mt-2 text-xs text-[#9CA3AF]">
      <span>按 Shift+Enter 换行 • 当前会话: {{ currentTokenCount }} tokens</span>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, watch } from 'vue';
import { useChatStore } from '@/novel/chat/store/chatStore';
import { storeToRefs } from 'pinia';

const chatStore = useChatStore();
const { messageInput, isReceiving, currentTokenCount } = storeToRefs(chatStore);

const textareaRef = ref<HTMLTextAreaElement | null>(null);

const sendMessage = () => {
  chatStore.sendMessage();
};

// 自动调整 textarea 高度
watch(messageInput, (newValue) => {
  const el = textareaRef.value;
  if (el) {
    el.style.height = 'auto';
    el.style.height = `${el.scrollHeight}px`;
  }
  // 清空后恢复原始高度
  if (newValue === '') {
    el.style.height = 'auto';
  }
});
</script>

// =
// 文件: ..\src\novel\chat\components\ChatMessageHistory.vue
//

// =
// 文件: ..\src\novel\chat\components\ChatMessageHistory.vue
//

<template>
  <div class="flex-1 p-6 overflow-y-auto" ref="chatHistoryContainer">
    <div class="max-w-5xl mx-auto space-y-6">
      <div v-if="conversation" v-for="message in conversation.messages" :key="message.id" class="group relative">
        <!-- 用户消息 -->
        <div v-if="message.role === 'user'" class="flex justify-end items-center gap-2">
          <div class="flex items-center gap-1.5 opacity-0 group-hover:opacity-100 transition-opacity">
            <button class="w-7 h-7 flex items-center justify-center text-gray-400 hover:text-gray-600 rounded-lg hover:bg-gray-100"><i class="fa-solid fa-pen-to-square"></i></button>
            <button class="w-7 h-7 flex items-center justify-center text-gray-400 hover:text-gray-600 rounded-lg hover:bg-gray-100"><i class="fa-solid fa-copy"></i></button>
          </div>
          <div class="bg-[#3B82F6] text-white p-4 rounded-xl rounded-br-lg max-w-[70%] text-sm" v-html="message.content"></div>
        </div>

        <!-- AI回复 -->
        <div v-if="message.role === 'ai'" class="flex items-start gap-3">
          <div class="w-8 h-8 bg-gradient-to-br from-[#4B5563] to-[#374151] rounded-full flex items-center justify-center flex-shrink-0 shadow-sm">
            <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M8.25 3v1.5M4.5 8.25H3m18 0h-1.5M4.5 12H3m18 0h-1.5m-15 3.75H3m18 0h-1.5M8.25 21v-1.5M15.75 3v1.5M12 4.5v15M15.75 21v-1.5" /></svg>
          </div>
          <div class="bg-[#F3F4F6] text-[#374151] p-4 rounded-xl rounded-bl-lg max-w-[70%] text-sm" v-html="message.content"></div>
          <div class="flex items-center gap-1.5 opacity-0 group-hover:opacity-100 transition-opacity self-center">
            <button class="w-7 h-7 flex items-center justify-center text-gray-400 hover:text-gray-600 rounded-lg hover:bg-gray-100"><i class="fa-solid fa-rotate-right"></i></button>
            <button class="w-7 h-7 flex items-center justify-center text-gray-400 hover:text-gray-600 rounded-lg hover:bg-gray-100"><i class="fa-solid fa-copy"></i></button>
          </div>
        </div>
      </div>

      <!-- AI正在输入指示器 -->
      <div v-if="isReceiving" class="flex items-start gap-3">
        <div class="w-8 h-8 bg-gradient-to-br from-[#4B5563] to-[#374151] rounded-full flex items-center justify-center flex-shrink-0 shadow-sm">
          <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M8.25 3v1.5M4.5 8.25H3m18 0h-1.5M4.5 12H3m18 0h-1.5m-15 3.75H3m18 0h-1.5M8.25 21v-1.5M15.75 3v1.5M12 4.5v15M15.75 21v-1.5" /></svg>
        </div>
        <div class="bg-[#F3F4F6] text-[#374151] p-4 rounded-xl rounded-bl-lg text-sm">
          <span class="blinking-cursor">▍</span>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, watch, nextTick, type PropType } from 'vue';
import type { Conversation } from '@/novel/chat/types';

const props = defineProps({
  conversation: {
    type: Object as PropType<Conversation | null>,
    required: true,
  },
  isReceiving: {
    type: Boolean,
    required: true,
  },
});

const chatHistoryContainer = ref<HTMLElement | null>(null);

const scrollToBottom = () => {
  nextTick(() => {
    if (chatHistoryContainer.value) {
      chatHistoryContainer.value.scrollTop = chatHistoryContainer.value.scrollHeight;
    }
  });
};

watch(() => props.conversation?.messages, () => {
  scrollToBottom();
}, { deep: true, flush: 'post' });

watch(() => props.isReceiving, (newValue) => {
  if (newValue) {
    scrollToBottom();
  }
}, { flush: 'post' });
</script>

<style scoped>
.blinking-cursor {
  font-weight: 500;
  animation: blink 1s step-end infinite;
}

@keyframes blink {
  from, to {
    color: transparent;
  }
  50% {
    color: #3B82F6;
  }
}
</style>

// =
// 文件: ..\src\novel\chat\components\ConversationList.vue
//

// =
// 文件: ..\src\novel\chat\components\ConversationList.vue
//

<template>
  <aside class="w-80 bg-gray-50/50 border-r border-gray-200/80 flex flex-col flex-shrink-0">
    <div class="p-4 border-b border-gray-200/80 h-20 flex items-center">
      <button
          @click="chatStore.createNewConversation"
          class="w-full flex items-center justify-center gap-2 px-4 py-2.5 bg-gray-800 text-white rounded-lg text-sm font-medium hover:bg-gray-700 transition-colors"
      >
        <i class="fa-solid fa-plus fa-sm"></i>
        新建对话
      </button>
    </div>

    <div class="flex-1 p-2 space-y-1 overflow-y-auto hide-scrollbar">
      <a
          v-for="conv in chatStore.conversations"
          :key="conv.id"
          href="#"
          @click.prevent="chatStore.selectConversation(conv.id)"
          class="block p-3 rounded-lg transition-colors"
          :class="{
            'bg-blue-100': chatStore.activeConversationId === conv.id,
            'hover:bg-gray-200/60': chatStore.activeConversationId !== conv.id
          }"
      >
        <div class="flex items-start gap-3">
          <div class="w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0" :class="chatStore.activeConversationId === conv.id ? 'bg-blue-600' : 'bg-gray-200'">
            <svg class="w-4 h-4" :class="chatStore.activeConversationId === conv.id ? 'text-white' : 'text-gray-600'" fill="currentColor" viewBox="0 0 24 24"><path d="M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM6 9h12v2H6V9zm8 5H6v-2h8v2zm4-6H6V6h12v2z"></path></svg>
          </div>
          <div class="flex-1 min-w-0">
            <p class="font-medium text-sm text-gray-800 truncate">{{ conv.title }}</p>
            <p class="text-xs text-gray-500 truncate mt-1">{{ conv.summary }}</p>
            <p class="text-xs text-gray-400 mt-2">{{ conv.createdAt }}</p>
          </div>
        </div>
      </a>
    </div>
  </aside>
</template>

<script setup lang="ts">
import { useChatStore } from '@/novel/chat/store/chatStore';

const chatStore = useChatStore();
</script>

// =
// 文件: ..\src\novel\chat\router.ts
//

import type { RouteRecordRaw } from 'vue-router'

export const chatRoutes: Array<RouteRecordRaw> = [
    {
        path: '/novel/chat',
        component: () => import('@/novel/layouts/NovelChatLayout.vue'),
        children: [
            {
                path: '',
                name: 'NovelChat',
                component: () => import('@/novel/chat/views/ChatView.vue'),
                meta: { title: 'AI聊天助手' }
            }
        ]
    },
]

// =
// 文件: ..\src\novel\chat\store\chatStore.ts
//


import { defineStore } from 'pinia';
import { ref, computed } from 'vue';
import type { Conversation, ChatMessage, AIModel } from '@/novel/chat/types';

export const useChatStore = defineStore('novelChat', () => {
    // --- State ---

    // 所有对话的列表
    const conversations = ref<Conversation[]>([]);
    // 当前激活的对话ID
    const activeConversationId = ref<string | null>(null);
    // 当前可用的AI模型
    const currentModel = ref<AIModel>({ id: 'gpt-4o', name: 'GPT-4o', status: 'online' });
    // 输入框中的内容
    const messageInput = ref<string>('');
    // 标志位，表示AI是否正在回复中
    const isReceiving = ref<boolean>(false);

    // --- Getters (Computed) ---

    // 根据 activeConversationId 获取当前完整的对话对象
    const activeConversation = computed(() => {
        if (!activeConversationId.value) return null;
        return conversations.value.find(c => c.id === activeConversationId.value) ?? null;
    });

    // 当前对话的 token 统计 (简化版)
    const currentTokenCount = computed(() => {
        if (!activeConversation.value) return 0;
        return activeConversation.value.messages.reduce((acc, msg) => acc + msg.content.length, 0);
    });

    // --- Actions ---

    /**
     * 初始化或从后端获取聊天数据
     */
    const fetchConversations = () => {
        // 模拟从API获取数据
        const mockConversations: Conversation[] = [
            {
                id: 'conv-1',
                title: '角色性格讨论',
                summary: '关于卡尔文的内心世界...',
                createdAt: '2小时前',
                messages: [
                    {
                        id: 'msg-1',
                        role: 'user',
                        content: '我想讨论一下卡尔文这个角色的内心世界。在面对跃迁点时，他应该有什么样的心理活动？',
                        timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
                    },
                    {
                        id: 'msg-2',
                        role: 'ai',
                        content: `<p class="mb-3">当然，这是一个很好的切入点。卡尔文在面对跃迁点时的心理活动可以从多个层面展现：</p><ol class="list-decimal list-inside space-y-2"><li><strong>希望与恐惧的交织</strong>：跃迁点代表着回家的可能，但也意味着巨大的未知风险。可以描写他手心出汗，但眼神却异常明亮。</li><li><strong>孤独感的顶峰</strong>：在做出这个重大决定时，他比任何时候都更加意识到自己的孤独。没有战友，只有AI。</li><li><strong>对过去的眷恋</strong>："回家"这个词会触发他的记忆闸门，可以闪回一些与家人或恋人的片段。</li></ol>`,
                        timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000 + 1000).toISOString(),
                    }
                ]
            },
            {
                id: 'conv-2',
                title: '情节灵感',
                summary: '跃迁点的科学原理...',
                createdAt: '昨天',
                messages: []
            }
        ];
        conversations.value = mockConversations;
        // 默认激活第一个对话
        if (conversations.value.length > 0) {
            activeConversationId.value = conversations.value[0].id;
        }
    };

    /**
     * 新建一个对话
     */
    const createNewConversation = () => {
        const newConv: Conversation = {
            id: `conv-${Date.now()}`,
            title: '新建对话',
            summary: '暂无摘要',
            createdAt: '刚刚',
            messages: [],
        };
        conversations.value.unshift(newConv);
        activeConversationId.value = newConv.id;
    };

    /**
     * 切换当前对话
     * @param conversationId - 要切换到的对话ID
     */
    const selectConversation = (conversationId: string) => {
        activeConversationId.value = conversationId;
    };

    /**
     * 发送消息
     */
    const sendMessage = async () => {
        if (!messageInput.value.trim() || !activeConversation.value || isReceiving.value) {
            return;
        }

        const userMessage: ChatMessage = {
            id: `msg-${Date.now()}`,
            role: 'user',
            content: messageInput.value,
            timestamp: new Date().toISOString(),
        };
        activeConversation.value.messages.push(userMessage);
        messageInput.value = ''; // 清空输入框

        // 模拟AI回复
        isReceiving.value = true;
        await new Promise(res => setTimeout(res, 1500)); // 模拟网络延迟

        const aiResponse: ChatMessage = {
            id: `msg-${Date.now() + 1}`,
            role: 'ai',
            content: `这是对您关于 "${userMessage.content.substring(0, 10)}..." 的回复。AI正在思考中...`,
            timestamp: new Date().toISOString(),
        };
        activeConversation.value.messages.push(aiResponse);
        isReceiving.value = false;
    };

    return {
        conversations,
        activeConversationId,
        currentModel,
        messageInput,
        isReceiving,
        activeConversation,
        currentTokenCount,
        fetchConversations,
        createNewConversation,
        selectConversation,
        sendMessage,
    };
});

// =
// 文件: ..\src\novel\chat\types.ts
//

// =
// 文件: ..\src\novel\chat\types.ts
//

/**
 * AI模型定义
 */
export interface AIModel {
    id: string;
    name: string;
    status: 'online' | 'offline' | 'limited';
}

/**
 * 聊天消息定义
 */
export interface ChatMessage {
    id: string;
    role: 'user' | 'ai';
    content: string;
    timestamp: string;
}

/**
 * 单个聊天会话定义
 */
export interface Conversation {
    id: string;
    title: string;
    summary: string;
    createdAt: string;
    messages: ChatMessage[];
}

// =
// 文件: ..\src\novel\chat\views\ChatView.vue
//

// =
// 文件: ..\src\novel\chat\views\ChatView.vue
//

<template>
  <div class="flex-1 flex overflow-hidden">
    <ConversationList />

    <main v-if="activeConversation" class="flex-1 flex flex-col bg-white">
      <header class="h-20 px-8 flex items-center justify-between border-b border-gray-100 flex-shrink-0">
        <div class="flex items-center gap-4">
          <div class="w-10 h-10 bg-gradient-to-br from-[#4B5563] to-[#374151] rounded-full flex items-center justify-center">
            <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M8.25 3v1.5M4.5 8.25H3m18 0h-1.5M4.5 12H3m18 0h-1.5m-15 3.75H3m18 0h-1.5M8.25 21v-1.5M15.75 3v1.5M12 4.5v15M15.75 21v-1.5" /></svg>
          </div>
          <div>
            <h2 class="font-medium text-[#374151]">{{ activeConversation.title }}</h2>
            <button class="text-sm text-[#6B7280] flex items-center gap-2 hover:text-[#374151] transition-colors mt-1">
              <span class="w-2 h-2 rounded-full" :class="currentModel.status === 'online' ? 'bg-[#10B981]' : 'bg-gray-400'"></span>
              {{ currentModel.status === 'online' ? '在线' : '离线' }} • {{ currentModel.name }}
              <svg class="w-3 h-3 text-gray-500" fill="none" stroke="currentColor" stroke-width="2.5" viewBox="0 0 24 24"><path d="M19 9l-7 7-7-7"></path></svg>
            </button>
          </div>
        </div>
        <div class="flex items-center gap-2">
          <button class="w-9 h-9 flex items-center justify-center text-gray-500 hover:bg-gray-100 rounded-lg transition-colors" title="上下文管理">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 00-3.375-3.375h-1.5A1.125 1.125 0 0113.5 7.125v-1.5a3.375 3.375 0 00-3.375-3.375H8.25m0 12.75h7.5m-7.5 3H12M10.5 2.25H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 00-9-9z" /></svg>
          </button>
          <button class="w-9 h-9 flex items-center justify-center text-gray-500 hover:bg-gray-100 rounded-lg transition-colors" title="设置">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M9.594 3.94c.09-.542.56-1.007 1.11-.95.542.057 1.007.56 1.061 1.11L12 8.583l.235-3.535c.057-.542.56-1.007 1.11-.95.542.057 1.007.56 1.061 1.11L15.417 8.583l3.536-.235c.542-.057 1.007.56 1.061 1.11.057.542-.42 1.007-.95 1.061l-3.536.235.235 3.536c.057.542-.42 1.007-.95 1.061-.542.057-1.007-.42-1.061-.95L12 15.417l-.235 3.536c-.057.542-.56 1.007-1.11.95-.542-.057-1.007-.56-1.061-1.11L9.417 15.417l-3.536.235c-.542-.057-1.007-.42-.95-1.061.057-.542.42-1.007.95-1.061l3.536-.235-.235-3.536c-.057-.542.42-1.007.95-1.061.542-.057 1.007.42 1.061.95L12 9.417l.235-3.536zM12 14.25a2.25 2.25 0 100-4.5 2.25 2.25 0 000 4.5z" /></svg>
          </button>
        </div>
      </header>

      <ChatMessageHistory :conversation="activeConversation" :is-receiving="isReceiving" />

      <ChatInputArea />

    </main>

    <div v-else class="flex-1 flex items-center justify-center bg-white text-gray-400">
      请从左侧选择或新建一个对话
    </div>
  </div>
</template>

<script setup lang="ts">
import { onMounted } from 'vue';
import { useChatStore } from '@/novel/chat/store/chatStore';
import { storeToRefs } from 'pinia';
import ConversationList from '@/novel/chat/components/ConversationList.vue';
import ChatMessageHistory from '@/novel/chat/components/ChatMessageHistory.vue';
import ChatInputArea from '@/novel/chat/components/ChatInputArea.vue';

const chatStore = useChatStore();
const { activeConversation, currentModel, isReceiving } = storeToRefs(chatStore);

onMounted(() => {
  chatStore.fetchConversations();
});
</script>

// =
// 文件: ..\src\novel\context_preview\router.ts
//

import type { RouteRecordRaw } from 'vue-router'

export const contextPreviewRoutes: Array<RouteRecordRaw> = [
    {
        path: '/novel/context-preview',
        name: 'NovelContextPreview',
        component: () => import('@/novel/context_preview/views/ContextPreviewView.vue'),
        meta: { title: '上下文预览' }
    }
]

// =
// 文件: ..\src\novel\context_preview\stores\contextPreviewStore.ts
//

// 文件路径: src\novel\context_preview\stores\contextPreviewStore.ts

import { defineStore } from 'pinia';
import { ref } from 'vue';
import { useAITaskStore } from '@/novel/editor/stores/aiTaskStore';

interface PreviewTask {
    type: '润色' | '续写' | '分析';
    targetItemId: string;
    title: string;
}

export const useContextMenuStore = defineStore('contextPreview', () => {
    const isVisible = ref(false);
    const task = ref<PreviewTask | null>(null);

    const show = (previewTask: PreviewTask) => {
        task.value = previewTask;
        isVisible.value = true;
    };

    const hide = () => {
        isVisible.value = false;
        task.value = null;
    };

    const execute = () => {
        if (!task.value) return;

        const aiTaskStore = useAITaskStore();
        aiTaskStore.startNewTask(task.value.type, task.value.targetItemId);

        hide();
    };

    return {
        isVisible,
        task,
        show,
        hide,
        execute,
    };
});

// =
// 文件: ..\src\novel\context_preview\views\ContextPreviewView.vue
//

// 文件路径: src\novel\context_preview\views\ContextPreviewView.vue

<template>
  <div
      v-if="isVisible"
      class="fixed inset-0 bg-black/60 z-50 flex items-center justify-center p-4"
      @click.self="handleCancel"
  >
    <div class="bg-white rounded-xl shadow-2xl w-full max-w-4xl max-h-[90vh] flex flex-col">
      <!-- 头部 -->
      <div class="flex-shrink-0 px-8 py-5 border-b border-gray-100 flex justify-between items-center">
        <div>
          <h1 class="text-xl font-semibold text-[#374151]">上下文预览</h1>
          <p class="text-sm text-[#6B7280] mt-1">{{ taskInfoText }}</p>
        </div>
        <button @click="handleCancel" class="p-2 rounded-full text-gray-400 hover:bg-gray-100 hover:text-gray-600 transition-colors">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" /></svg>
        </button>
      </div>

      <!-- 上下文列表 (可滚动) -->
      <div class="flex-grow p-6 space-y-4 overflow-y-auto bg-gray-50/50">
        <!-- 固定上下文 -->
        <div class="border border-gray-200/70 rounded-lg overflow-hidden bg-white shadow-sm">
          <div @click="toggleCollapse('fixed')" class="px-6 py-4 cursor-pointer hover:bg-gray-50 transition-colors flex items-center justify-between">
            <div class="flex items-center gap-4">
              <svg class="w-5 h-5 text-gray-400 collapse-arrow" :class="{ 'expanded': collapsedStates.fixed }" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M9 5l7 7-7 7"/></svg>
              <svg class="w-6 h-6 text-[#6B7280]" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/></svg>
              <div>
                <h3 class="font-medium text-[#374151]">固定上下文</h3>
                <p class="text-xs text-[#9CA3AF] mt-0.5">始终包含在 AI 对话中的基础信息</p>
              </div>
            </div>
            <div class="flex items-center gap-4">
              <span class="text-xs text-[#9CA3AF]">648 字符</span>
              <label @click.stop class="flex items-center gap-2 cursor-pointer">
                <span class="text-xs text-[#6B7280]">启用</span>
                <input type="checkbox" class="w-4 h-4 text-emerald-600 border-gray-300 rounded focus:ring-emerald-500" checked>
              </label>
            </div>
          </div>
          <div class="collapse-content" :class="{ 'expanded': collapsedStates.fixed }">
            <div class="px-6 pb-4 border-t border-gray-100 pt-4 text-sm text-gray-600">内容占位...</div>
          </div>
        </div>

        <!-- 动态上下文 -->
        <div class="border border-gray-200/70 rounded-lg overflow-hidden bg-white shadow-sm">
          <div @click="toggleCollapse('dynamic')" class="px-6 py-4 cursor-pointer hover:bg-gray-50 transition-colors flex items-center justify-between">
            <div class="flex items-center gap-4">
              <svg class="w-5 h-5 text-gray-400 collapse-arrow" :class="{ 'expanded': collapsedStates.dynamic }" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M9 5l7 7-7 7"/></svg>
              <svg class="w-6 h-6 text-[#6B7280]" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/></svg>
              <div>
                <h3 class="font-medium text-[#374151]">动态上下文</h3>
                <p class="text-xs text-[#9CA3AF] mt-0.5">根据当前创作内容自动更新的信息</p>
              </div>
            </div>
            <div class="flex items-center gap-4">
              <span class="text-xs text-[#9CA3AF]">892 字符</span>
              <label @click.stop class="flex items-center gap-2 cursor-pointer">
                <span class="text-xs text-[#6B7280]">启用</span>
                <input type="checkbox" class="w-4 h-4 text-emerald-600 border-gray-300 rounded focus:ring-emerald-500" checked>
              </label>
            </div>
          </div>
          <div class="collapse-content" :class="{ 'expanded': collapsedStates.dynamic }">
            <div class="px-6 pb-4 border-t border-gray-100 pt-4 text-sm text-gray-600">内容占位...</div>
          </div>
        </div>

        <!-- RAG 上下文 -->
        <div class="border border-gray-200/70 rounded-lg overflow-hidden bg-white shadow-sm">
          <div @click="toggleCollapse('rag')" class="px-6 py-4 cursor-pointer hover:bg-gray-50 transition-colors flex items-center justify-between">
            <div class="flex items-center gap-4">
              <svg class="w-5 h-5 text-gray-400 collapse-arrow" :class="{ 'expanded': collapsedStates.rag }" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M9 5l7 7-7 7"/></svg>
              <svg class="w-6 h-6 text-[#6B7280]" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"/></svg>
              <div>
                <h3 class="font-medium text-[#374151]">RAG 上下文</h3>
                <p class="text-xs text-[#9CA3AF] mt-0.5">从知识库检索的相关参考信息</p>
              </div>
            </div>
            <div class="flex items-center gap-4">
              <span class="text-xs text-[#9CA3AF]">456 字符</span>
              <label @click.stop class="flex items-center gap-2 cursor-pointer">
                <span class="text-xs text-[#6B7280]">启用</span>
                <input type="checkbox" class="w-4 h-4 text-emerald-600 border-gray-300 rounded focus:ring-emerald-500" checked>
              </label>
            </div>
          </div>
          <div class="collapse-content" :class="{ 'expanded': collapsedStates.rag }">
            <div class="px-6 pb-4 border-t border-gray-100 pt-4 text-sm text-gray-600">内容占位...</div>
          </div>
        </div>

        <!-- 提示词 -->
        <div class="border border-gray-200/70 rounded-lg overflow-hidden bg-white shadow-sm">
          <div @click="toggleCollapse('prompt')" class="px-6 py-4 cursor-pointer hover:bg-gray-50 transition-colors flex items-center justify-between">
            <div class="flex items-center gap-4">
              <svg class="w-5 h-5 text-gray-400 collapse-arrow" :class="{ 'expanded': collapsedStates.prompt }" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M9 5l7 7-7 7"/></svg>
              <svg class="w-6 h-6 text-emerald-500" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M13 10V3L4 14h7v7l9-11h-7z"/></svg>
              <div>
                <h3 class="font-medium text-[#374151]">提示词</h3>
                <p class="text-xs text-[#9CA3AF] mt-0.5">当前任务的具体指令</p>
              </div>
            </div>
          </div>
          <div class="collapse-content" :class="{ 'expanded': collapsedStates.prompt }">
            <div class="border-t border-gray-100">
              <textarea class="context-textarea" readonly>请续写下一段内容，要求：

1. 延续当前紧张神秘的氛围
2. 详细描写空间站内部的环境细节
3. 通过卡尔文的视角展现他的内心活动
4. 适当加入一些技术细节增强科幻感
5. 在段落末尾设置一个小悬念，引导读者继续阅读
6. 字数控制在 300-400 字左右

重点描写方向：卡尔文进入空间站控制室，发现仍在运行的神秘设备，以及他对这些发现的反应和推测。</textarea>
            </div>
          </div>
        </div>
      </div>

      <!-- 尾部 -->
      <div class="flex-shrink-0 px-6 py-4 bg-white border-t border-gray-100 flex items-center justify-between">
        <div class="text-xs text-gray-400">
          <span>加载时间: 36ms</span>
        </div>
        <div class="flex items-center gap-3">
          <button @click="handleCancel" class="px-5 py-2 text-sm font-medium text-[#374151] bg-white border border-gray-300 rounded-lg hover:bg-gray-100 transition-colors">
            取消
          </button>
          <button @click="handleExecute" class="px-5 py-2 bg-emerald-600 text-white rounded-lg text-sm font-medium hover:bg-emerald-700 transition-colors flex items-center gap-2">
            <i class="fa-solid fa-bolt fa-sm"></i>
            <span>执行</span>
          </button>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { computed, reactive } from 'vue';
import { useContextMenuStore } from '@/novel/context_preview/stores/contextPreviewStore';

const contextPreviewStore = useContextMenuStore();

const collapsedStates = reactive({
  fixed: false,
  dynamic: false,
  rag: false,
  prompt: true,
});

const isVisible = computed(() => contextPreviewStore.isVisible);
const task = computed(() => contextPreviewStore.task);

const taskInfoText = computed(() => {
  if (task.value) {
    return `即将对《${task.value.title}》执行AI任务：${task.value.type}。`;
  }
  return '检查并确认将要提供给AI的全部信息。';
});

const handleExecute = () => {
  contextPreviewStore.execute();
};

const handleCancel = () => {
  contextPreviewStore.hide();
};

const toggleCollapse = (section: keyof typeof collapsedStates) => {
  collapsedStates[section] = !collapsedStates[section];
};
</script>

<style scoped>
.collapse-content {
  max-height: 0;
  overflow: hidden;
  transition: max-height 0.3s ease-out;
}

.collapse-content.expanded {
  max-height: 500px;
  transition: max-height 0.35s ease-in;
}

.collapse-arrow {
  transition: transform 0.3s ease;
}

.collapse-arrow.expanded {
  transform: rotate(90deg);
}

.context-textarea {
  background: transparent;
  border: none;
  resize: none;
  outline: none;
  width: 100%;
  line-height: 1.7;
  color: #4B5563;
  font-size: 14px;
  padding: 1rem 1.5rem;
  min-height: 200px;
  cursor: default;
}
</style>

// =
// 文件: ..\src\novel\dashboard\components\NovelDashboardSidebar.vue
//

<template>
  <aside class="w-64 bg-[#FAFAFA] border-r border-gray-100 flex flex-col flex-shrink-0">
    <!-- 侧边栏头部区域 -->
    <div class="p-4 space-y-4 border-b border-gray-100 h-20 flex items-center">
      <div class="flex items-center gap-3 px-2">
        <!-- 使用与主侧边栏一致的返回工作台的链接 -->
        <router-link to="/home" class="w-10 h-10 bg-gray-200 rounded-lg flex items-center justify-center flex-shrink-0">
          <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path></svg>
        </router-link>
        <div>
          <h3 class="font-medium text-[#374151] text-sm">创作中心</h3>
          <p class="text-xs text-[#9CA3AF]">小说与故事</p>
        </div>
      </div>
    </div>

    <!-- 主导航 -->
    <nav class="flex-1 px-4 py-6">
      <p class="text-xs font-medium text-[#9CA3AF] px-3 mb-3 uppercase tracking-wider">工作空间</p>
      <div class="space-y-1">
        <router-link
            v-for="item in navItems"
            :key="item.name"
            :to="item.path"
            class="flex items-center gap-3 px-3 py-2.5 text-[#6B7280] hover:bg-gray-100 rounded-lg text-sm transition-colors"
            active-class="bg-[#4B5563] text-white font-medium"
        >
          <span v-html="item.icon" class="w-5 h-5"></span>
          <span>{{ item.name }}</span>
        </router-link>
      </div>
    </nav>

    <!-- 底部设置 -->
    <div class="p-4 border-t border-gray-100 mt-auto">
      <router-link to="/settings" class="flex items-center gap-3 px-3 py-2.5 text-[#6B7280] hover:bg-gray-100 rounded-lg text-sm transition-colors">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><circle cx="12" cy="12" r="3"/><path d="M12 1V6M12 18V23M4.22 4.22L7.76 7.76M16.24 16.24L19.78 19.78M1 12H6M18 12H23M4.22 19.78L7.76 16.24M16.24 7.76L19.78 4.22"/></svg>
        <span>设置</span>
      </router-link>
    </div>
  </aside>
</template>

<script setup lang="ts">
import { ref } from 'vue'

const navItems = ref([
  { name: '我的小说', path: '/novel/dashboard', icon: `<svg fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><rect x="5" y="3" width="14" height="18" rx="2"/><path d="M9 7H15M9 11H15M9 15H13"/></svg>` },
  { name: '最近编辑', path: '/novel/recent', icon: `<svg fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><circle cx="12" cy="12" r="10"/><path d="M12 6V12L16 16"/></svg>` },
  { name: '回收站', path: '/novel/trash', icon: `<svg fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M3 6h18M5 6V20a2 2 0 002 2h10a2 2 0 002-2V6M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2M10 11v6M14 11v6"/></svg>` }
])
</script>

<style scoped>
.router-link-exact-active {
  color: white !important;
}
</style>

// =
// 文件: ..\src\novel\dashboard\router.ts
//

import type { RouteRecordRaw } from 'vue-router'

export const dashboardRoutes: Array<RouteRecordRaw> = [
    {
        path: 'dashboard',
        name: 'NovelDashboard',
        component: () => import('@/novel/dashboard/views/DashboardView.vue'),
        meta: { title: '我的小说' }
    },
    {
        path: 'recent',
        name: 'NovelRecent',
        component: () => import('@/novel/dashboard/views/RecentView.vue'),
        meta: { title: '最近编辑' }
    },
    {
        path: 'trash',
        name: 'NovelTrash',
        component: () => import('@/novel/dashboard/views/TrashView.vue'),
        meta: { title: '回收站' }
    },
    {
        path: 'import',
        name: 'NovelImport',
        component: () => import('@/novel/dashboard/views/ImportView.vue'),
        meta: { title: '导入小说' }
    },
    {
        path: 'new',
        name: 'NovelNew',
        component: () => import('@/novel/dashboard/views/NewNovelView.vue'),
        meta: { title: '新建小说' }
    },
]

// =
// 文件: ..\src\novel\dashboard\stores\dashboardStore.ts
//

// =
// 文件: ..\src/novel/dashboard/stores/dashboardStore.ts
//

import { defineStore } from 'pinia';
import { ref, computed } from 'vue';
import type { Novel, NovelCategory } from '@/novel/types/index.ts';
import type { RecentActivityItem, DeletedItem } from '@/novel/dashboard/types.ts';

export const useDashboardStore = defineStore('novel-dashboard', () => {
    // --- State ---
    const novels = ref<Novel[]>([]);
    const recentItems = ref<RecentActivityItem[]>([]);
    const trashedItems = ref<DeletedItem[]>([]);
    const searchQuery = ref('');
    const selectedCategory = ref<NovelCategory | '全部类型'>('全部类型');


    // --- Getters / Computed ---
    const filteredNovels = computed(() => {
        return novels.value.filter(novel => {
            const matchesCategory = selectedCategory.value === '全部类型' || novel.category === selectedCategory.value;
            const matchesSearch = novel.title.includes(searchQuery.value) || novel.tags.some(tag => tag.text.includes(searchQuery.value));
            return matchesCategory && matchesSearch;
        });
    });

    const availableCategories = computed((): NovelCategory[] => {
        const categories = new Set(novels.value.map(novel => novel.category));
        return Array.from(categories);
    });

    const groupedRecentItems = computed(() => {
        const groups: { period: string; items: RecentActivityItem[] }[] = [];
        if (recentItems.value.length === 0) return groups;

        const today = new Date();
        today.setHours(0, 0, 0, 0);
        const yesterday = new Date(today);
        yesterday.setDate(today.getDate() - 1);

        const todayItems: RecentActivityItem[] = [];
        const yesterdayItems: RecentActivityItem[] = [];
        const earlierItems: RecentActivityItem[] = [];

        // 首先按时间降序排序
        const sortedItems = [...recentItems.value].sort((a, b) => new Date(b.editedAt).getTime() - new Date(a.editedAt).getTime());

        sortedItems.forEach(item => {
            const itemDate = new Date(item.editedAt);
            itemDate.setHours(0, 0, 0, 0);

            if (itemDate.getTime() === today.getTime()) {
                todayItems.push(item);
            } else if (itemDate.getTime() === yesterday.getTime()) {
                yesterdayItems.push(item);
            } else {
                earlierItems.push(item);
            }
        });

        if (todayItems.length > 0) {
            groups.push({ period: '今天', items: todayItems });
        }
        if (yesterdayItems.length > 0) {
            groups.push({ period: '昨天', items: yesterdayItems });
        }
        if (earlierItems.length > 0) {
            groups.push({ period: '更早', items: earlierItems });
        }

        return groups;
    });

    // --- Actions ---

    const fetchAllData = () => {
        // 如果已有数据，则不重复获取，防止覆盖
        if (novels.value.length > 0) {
            return;
        }

        novels.value = [
            {
                id: 'novel-1',
                title: '星际漫游者',
                description: '一部关于孤独宇航员在未知星系中寻找回家之路的科幻史诗。',
                cover: 'https://images.unsplash.com/photo-1589998059171-988d887df646?q=80&w=800',
                status: { text: '编辑中', class: 'bg-green-500/90' },
                tags: [{ text: '科幻', class: 'bg-blue-50 text-blue-700' }, { text: '冒险', class: 'bg-purple-50 text-purple-700' }],
                chapters: 24,
                lastUpdated: '2小时前',
                category: '科幻'
            },
            {
                id: 'novel-2',
                title: '时间之沙',
                description: '当历史可以被改写，一个历史学家必须阻止一个神秘组织抹去关键的历史事件。',
                cover: 'https://images.unsplash.com/photo-1544947950-fa07a98d237f?q=80&w=800',
                status: { text: '待审核', class: 'bg-yellow-500/90' },
                tags: [{ text: '悬疑', class: 'bg-yellow-50 text-yellow-700' }, { text: '科幻', class: 'bg-blue-50 text-blue-700' }],
                chapters: 15,
                lastUpdated: '昨天',
                category: '悬疑'
            },
            {
                id: 'novel-4',
                title: '都市霓虹',
                description: '一个平凡的程序员意外获得读取他人思想的能力，卷入一场巨大的商业阴谋。',
                cover: 'https://images.unsplash.com/photo-1532012197267-da84d127e765?q=80&w=800',
                status: { text: '已发布', class: 'bg-blue-500/90' },
                tags: [{ text: '都市', class: 'bg-pink-50 text-pink-700' }, { text: '异能', class: 'bg-green-50 text-green-700' }],
                chapters: 102,
                lastUpdated: '1周前',
                category: '都市'
            },
            {
                id: 'novel-5',
                title: '红尘一梦',
                description: '穿越回古代，成为一个不受宠的公主，她如何利用现代知识在宫廷斗争中生存。',
                cover: 'https://images.unsplash.com/photo-1521587760476-6c12a4b040da?q=80&w=800',
                status: { text: '编辑中', class: 'bg-green-500/90' },
                tags: [{ text: '古风', class: 'bg-red-50 text-red-700' }, { text: '言情', class: 'bg-indigo-50 text-indigo-700' }],
                chapters: 56,
                lastUpdated: '5小时前',
                category: '言情'
            }
        ];

        trashedItems.value = [
            {
                id: 'novel-3-deleted',
                name: '深海回响',
                type: '小说',
                icon: '<svg fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><rect x="5" y="3" width="14" height="18" rx="2"/><path d="M9 7H15M9 11H15M9 15H13"/></svg>',
                deletedAt: '2024-05-18T10:00:00Z',
                retentionDays: 27,
                retentionPercent: 90,
            }
        ];

        recentItems.value = [
            {
                id: 'activity-1',
                novelId: 'novel-1',
                novelTitle: '星际漫游者',
                novelCover: 'https://images.unsplash.com/photo-1589998059171-988d887df646?q=80&w=800',
                editedItemType: 'chapter',
                editedItemName: '第四章：跃迁点',
                editedAt: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
                formattedTime: '2小时前'
            },
            {
                id: 'activity-2',
                novelId: 'novel-5',
                novelTitle: '红尘一梦',
                novelCover: 'https://images.unsplash.com/photo-1521587760476-6c12a4b040da?q=80&w=800',
                editedItemType: 'character',
                editedItemName: '角色设定 - 凤九',
                editedAt: new Date(Date.now() - 5 * 60 * 60 * 1000).toISOString(),
                formattedTime: '5小时前'
            },
            {
                id: 'activity-3',
                novelId: 'novel-2',
                novelTitle: '时间之沙',
                novelCover: 'https://images.unsplash.com/photo-1544947950-fa07a98d237f?q=80&w=800',
                editedItemType: 'outline',
                editedItemName: '大纲',
                editedAt: new Date(Date.now() - 28 * 60 * 60 * 1000).toISOString(),
                formattedTime: '昨天'
            }
        ];
    };

    const setSearchQuery = (query: string) => {
        searchQuery.value = query;
    };

    const setCategoryFilter = (category: NovelCategory | '全部类型') => {
        selectedCategory.value = category;
    };

    const createNovel = (data: { title: string; synopsis: string; category: NovelCategory }) => {
        const newNovel: Novel = {
            id: `novel-${Date.now()}`,
            title: data.title,
            description: data.synopsis,
            category: data.category,
            cover: `https://source.unsplash.com/random/400x500?book&sig=${Date.now()}`,
            status: { text: '编辑中', class: 'bg-green-500/90' },
            tags: [{ text: data.category, class: 'bg-gray-100 text-gray-600' }],
            chapters: 0,
            lastUpdated: '刚刚'
        };
        novels.value.unshift(newNovel);
    };

    const deleteNovel = (novelId: string) => {
        const index = novels.value.findIndex(n => n.id === novelId);
        if (index === -1) return;

        const novelToDelete = novels.value[index];
        const trashedItem: DeletedItem = {
            id: novelToDelete.id,
            name: novelToDelete.title,
            type: '小说',
            icon: '<svg fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><rect x="5" y="3" width="14" height="18" rx="2"/><path d="M9 7H15M9 11H15M9 15H13"/></svg>',
            deletedAt: new Date().toISOString(),
            retentionDays: 30,
            retentionPercent: 100
        };

        trashedItems.value.unshift(trashedItem);
        novels.value.splice(index, 1);
    };

    const restoreNovel = (itemId: string) => {
        // 这部分逻辑依赖于一个完整的对象，而不仅仅是ID
        // 暂不实现，仅提供接口
    };

    const deleteItemPermanently = (itemId: string) => {
        const index = trashedItems.value.findIndex(item => item.id === itemId);
        if (index > -1) {
            trashedItems.value.splice(index, 1);
        }
    };


    return {
        novels,
        recentItems,
        trashedItems,
        searchQuery,
        selectedCategory,
        filteredNovels,
        availableCategories,
        groupedRecentItems,
        fetchAllData,
        setSearchQuery,
        setCategoryFilter,
        createNovel,
        deleteNovel,
        restoreNovel,
        deleteItemPermanently
    };
});

// =
// 文件: ..\src\novel\dashboard\types.ts
//



/**
 * 定义“最近编辑”条目的数据结构。
 * 对应于 `RecentView.vue` 中显示的数据。
 */
export interface RecentActivityItem {
    id: string; // 活动自身的唯一ID
    novelId: string; // 关联的小说ID
    novelTitle: string; // 关联的小说标题
    novelCover: string; // 关联的小说封面

    editedItemType: 'chapter' | 'outline' | 'character'; // 被编辑的项目类型
    editedItemName: string; // 被编辑的项目名称，例如 "第四章：跃迁点" 或 "角色设定 - 艾拉"
    editedAt: string; // 编辑时间, ISO 8601 格式
    formattedTime: string; // 用于UI显示的格式化时间，如 "2小时前" 或 "下午 3:45"
}

/**
 * 定义“回收站”中条目的数据结构。
 * 对应于 `TrashView.vue` 中显示的数据。
 */
export interface DeletedItem {
    id: string; // 被删除项目的ID
    name: string; // 被删除项目的名称
    type: '小说' | '章节' | '角色'; // 被删除项目的类型
    icon: string; // 用于UI显示的图标HTML字符串
    deletedAt: string; // 删除时间, ISO 8601 格式
    retentionDays: number; // 剩余保留天数
    retentionPercent: number; // 剩余时间百分比，用于进度条显示
}

// =
// 文件: ..\src\novel\dashboard\views\DashboardView.vue
//

// =
// 文件: ..\src/novel/dashboard/views/DashboardView.vue
//
<!-- 文件路径: src/novel/dashboard/views/DashboardView.vue -->

<template>
  <div class="flex-1 px-8 py-6 overflow-auto bg-[#FCFCFC] hide-scrollbar">
    <div class="flex justify-between items-center mb-6">
      <div class="flex items-center gap-4">
        <label class="flex items-center gap-2 w-64 bg-white border border-gray-200 rounded-lg px-3 py-2 focus-within:border-blue-500 focus-within:ring-1 focus-within:ring-blue-500 transition">
          <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><circle cx="11" cy="11" r="8"/><path d="M21 21L16.65 16.65"/></svg>
          <input
              type="text"
              class="grow text-sm bg-transparent outline-none text-[#374151]"
              placeholder="搜索小说名或标签..."
              v-model="searchQuery"
          />
        </label>
        <select
            v-model="selectedCategory"
            class="text-sm bg-white border border-gray-200 rounded-lg px-3 py-2 outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition text-[#374151]"
        >
          <option>全部类型</option>
          <option v-for="category in availableCategories" :key="category" :value="category">
            {{ category }}
          </option>
        </select>
      </div>
      <div class="flex items-center gap-4">
        <router-link to="/novel/import" class="text-sm text-[#6B7280] hover:text-[#374151] transition-colors flex items-center gap-2">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M7 18C4.5 18 3 16.5 3 14C3 11.5 5 10 7 10C7.3 10 7.5 10 7.8 10.1C8.5 7.2 11 5 14 5C17.3 5 20 7.7 20 11C20 11.3 20 11.7 19.9 12C21.1 12.5 22 13.6 22 15C22 16.9 20.4 18.5 18.5 18.5"/><path d="M12 13V21M15 16L12 13L9 16"/></svg>
          <span>导入小说</span>
        </router-link>
        <router-link to="/novel/new" class="text-sm font-medium text-white bg-[#4B5563] hover:bg-gray-700 transition-colors flex items-center gap-2 px-4 py-2 rounded-lg">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M12 5V19M5 12H19"/></svg>
          <span>新建小说</span>
        </router-link>
      </div>
    </div>

    <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6">
      <div
          v-for="novel in filteredNovels"
          :key="novel.id"
          class="group bg-white rounded-xl border border-gray-100 p-4 flex flex-col transition-all duration-300 hover:shadow-md hover:-translate-y-1"
      >
        <router-link :to="`/novel/editor?id=${novel.id}`" class="block aspect-[4/5] relative w-full mb-4 rounded-lg overflow-hidden">
          <img :src="novel.cover" class="object-cover w-full h-full group-hover:scale-105 transition-transform duration-300" alt="Book Cover">
          <div class="absolute top-0 left-0 w-full h-full bg-black/5 group-hover:bg-black/10 transition-colors"></div>
        </router-link>

        <div class="flex flex-col flex-grow">
          <h3 class="text-sm font-medium text-[#374151] leading-tight truncate">
            <router-link :to="`/novel/editor?id=${novel.id}`" class="hover:text-blue-600 transition-colors">{{ novel.title }}</router-link>
          </h3>
          <p class="text-xs text-[#9CA3AF] mt-1">{{ novel.chapters }}章 · {{ novel.status.text }}</p>
          <div class="mt-auto pt-3">
            <div class="border-t border-gray-100 pt-3 flex justify-between items-center text-xs text-gray-400">
              <div class="flex items-center gap-1.5">
                 <span
                     v-for="tag in novel.tags"
                     :key="tag.text"
                     class="text-xs px-1.5 py-0.5 rounded font-medium"
                     :class="tag.class"
                 >
                  {{ tag.text }}
                </span>
              </div>
              <span>{{ novel.lastUpdated }}</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { onMounted } from 'vue';
import { storeToRefs } from 'pinia';
import { useDashboardStore } from '@/novel/dashboard/stores/dashboardStore';

const dashboardStore = useDashboardStore();

const {
  filteredNovels,
  availableCategories,
  searchQuery,
  selectedCategory
} = storeToRefs(dashboardStore);

onMounted(() => {
  dashboardStore.fetchAllData();
});
</script>

// =
// 文件: ..\src\novel\dashboard\views\ImportView.vue
//

<template>
  <div class="flex-1 px-8 py-6 overflow-auto bg-[#FCFCFC] flex items-center justify-center">
    <div class="w-full max-w-2xl bg-white rounded-xl p-8 border border-gray-100 shadow-sm">

      <!-- 文件上传区域 -->
      <div class="border-2 border-dashed border-gray-200 rounded-xl p-12 text-center hover:border-blue-400 hover:bg-gray-50/50 transition-colors cursor-pointer">
        <svg class="w-12 h-12 text-gray-300 mx-auto mb-4" fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" d="M7 18C4.5 18 3 16.5 3 14C3 11.5 5 10 7 10C7.3 10 7.5 10 7.8 10.1C8.5 7.2 11 5 14 5C17.3 5 20 7.7 20 11C20 11.3 20 11.7 19.9 12C21.1 12.5 22 13.6 22 15C22 16.9 20.4 18.5 18.5 18.5"/><path stroke-linecap="round" stroke-linejoin="round" d="M12 13V21M15 16L12 13L9 16"/>
        </svg>
        <h3 class="text-lg font-medium text-[#374151]">将文件拖拽至此</h3>
        <p class="text-sm text-[#6B7280] mt-1">或</p>
        <button class="mt-4 px-6 py-2.5 bg-[#4B5563] text-white rounded-lg text-sm font-medium hover:bg-[#374151] transition-colors">
          选择文件
        </button>
        <p class="text-xs text-gray-400 mt-4">支持 .txt, .docx, .md, .epub</p>
      </div>

      <!-- 导入设置区域 -->
      <div class="mt-8 text-left space-y-4 w-full">
        <h4 class="text-base font-medium text-[#374151]">导入设置</h4>
        <div class="space-y-3">
          <div class="flex items-center justify-between p-4 bg-[#F9FAFB] rounded-lg border border-gray-100">
            <div>
              <label for="auto-detect-chapters" class="text-sm font-medium text-[#374151] cursor-pointer">自动识别章节</label>
              <p class="text-xs text-[#9CA3AF] mt-1">根据常见格式自动分割章节</p>
            </div>
            <!-- 自定义 Toggle 开关 -->
            <label for="auto-detect-chapters" class="relative inline-flex items-center cursor-pointer">
              <input type="checkbox" id="auto-detect-chapters" class="sr-only peer" checked>
              <div class="w-11 h-6 bg-gray-200 rounded-full peer peer-checked:bg-[#4B5563] transition-all peer-checked:after:translate-x-full after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border after:rounded-full after:h-5 after:w-5 after:transition-all"></div>
            </label>
          </div>
          <div class="p-4 bg-[#F9FAFB] rounded-lg border border-gray-100">
            <label for="chapter-rule" class="text-sm font-medium text-[#374151] block mb-2">章节识别规则</label>
            <input type="text" id="chapter-rule" value="第.+章|Chapter \d+" class="w-full bg-white border border-gray-200 rounded-lg px-3 py-1.5 text-sm font-mono text-[#374151] focus:ring-1 focus:ring-blue-500 focus:border-blue-500 outline-none transition-colors">
            <p class="text-xs text-[#9CA3AF] mt-2">使用正则表达式匹配章节标题</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">

</script>

<style scoped>

</style>

// =
// 文件: ..\src\novel\dashboard\views\NewNovelView.vue
//

// 文件: src\novel\dashboard\views\NewNovelView.vue

<template>
  <div class="flex-1 px-8 py-6 overflow-auto bg-[#FCFCFC] flex items-center justify-center">
    <div class="w-full max-w-2xl bg-white rounded-xl p-8 border border-gray-100 shadow-sm">
      <div class="mb-8 text-center">
        <h2 class="text-xl font-semibold text-[#374151]">创建你的新故事</h2>
        <p class="text-sm text-[#9CA3AF] mt-2">为你的世界打下第一个基石</p>
      </div>

      <form @submit.prevent="handleCreateNovel" class="space-y-6">
        <div>
          <label for="novel-title" class="block text-sm font-medium text-[#374151] mb-1.5">小说标题</label>
          <input
              type="text"
              id="novel-title"
              v-model="newNovelData.title"
              placeholder="例如：星际漫游者"
              required
              class="w-full bg-white border border-gray-200 rounded-lg px-3 py-2 text-sm text-[#374151] focus:ring-1 focus:ring-blue-500 focus:border-blue-500 outline-none transition"
          >
        </div>
        <div>
          <label for="novel-synopsis" class="block text-sm font-medium text-[#374151] mb-1.5">小说简介 (可选)</label>
          <textarea
              id="novel-synopsis"
              rows="4"
              v-model="newNovelData.synopsis"
              placeholder="简单描述一下你的故事，这将帮助AI更好地理解你的创作意图。"
              class="w-full bg-white border border-gray-200 rounded-lg px-3 py-2 text-sm text-[#374151] leading-relaxed focus:ring-1 focus:ring-blue-500 focus:border-blue-500 outline-none transition resize-none"
          ></textarea>
        </div>
        <div>
          <label for="novel-category" class="block text-sm font-medium text-[#374151] mb-1.5">小说分类</label>
          <select
              id="novel-category"
              v-model="newNovelData.category"
              required
              class="text-sm bg-white border border-gray-200 rounded-lg px-3 py-2 outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition text-[#374151] w-full"
          >
            <option value="" disabled>选择一个分类</option>
            <option>科幻</option>
            <option>奇幻</option>
            <option>都市</option>
            <option>言情</option>
            <option>悬疑</option>
            <option>历史</option>
          </select>
        </div>

        <div class="mt-8 pt-6 border-t border-gray-100 flex justify-end items-center gap-4">
          <router-link to="/novel/dashboard" class="px-5 py-2 bg-white border border-gray-200 rounded-lg text-sm font-medium text-[#374151] hover:bg-gray-50 transition-colors">
            取消
          </router-link>
          <button type="submit" class="px-6 py-2 bg-[#4B5563] text-white rounded-lg text-sm font-medium hover:bg-gray-700 transition-colors flex items-center gap-2">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M12 5V19M5 12H19"></path></svg>
            <span>创建小说</span>
          </button>
        </div>
      </form>
    </div>
  </div>
</template>

<script setup lang="ts">
import { reactive } from 'vue';
import { useRouter } from 'vue-router';
import { useDashboardStore } from '@/novel/dashboard/store/dashboardStore';

const dashboardStore = useDashboardStore();
const router = useRouter();

const newNovelData = reactive({
  title: '',
  synopsis: '',
  category: '',
});

const handleCreateNovel = () => {
  if (!newNovelData.title || !newNovelData.category) {
    alert('请填写小说标题和分类');
    return;
  }
  dashboardStore.createNovel(newNovelData);
  // 创建成功后跳转到仪表盘页面
  router.push('/novel/dashboard');
};
</script>

// =
// 文件: ..\src\novel\dashboard\views\RecentView.vue
//

// =
// 文件: ..\src/novel/dashboard/views/RecentView.vue
//

<template>
  <div class="flex-1 p-8 overflow-auto bg-[#FCFCFC] hide-scrollbar">
    <div class="max-w-6xl mx-auto">
      <div class="mb-6 pb-4 border-b border-gray-100">
        <h1 class="text-xl font-semibold text-[#374151]">最近编辑</h1>
        <p class="text-sm text-gray-500 mt-1">查看并继续您最近的工作</p>
      </div>

      <div v-if="groupedRecentItems.length > 0" class="space-y-8">
        <div v-for="group in groupedRecentItems" :key="group.period">
          <h2 class="text-sm font-medium text-[#9CA3AF] mb-3 px-2">{{ group.period }}</h2>
          <div class="bg-white rounded-xl border border-gray-100 overflow-hidden">
            <ul class="divide-y divide-gray-100">
              <li
                  v-for="item in group.items"
                  :key="item.id"
                  class="p-4 flex items-center justify-between group hover:bg-gray-50/50 transition-colors"
              >
                <div class="flex items-center gap-4 flex-1 min-w-0">
                  <router-link :to="`/novel/editor?id=${item.novelId}`">
                    <img :src="item.novelCover" class="w-10 h-14 object-cover rounded-md flex-shrink-0 shadow-sm" alt="cover">
                  </router-link>
                  <div class="flex-1 min-w-0">
                    <p class="text-sm font-medium text-[#374151] truncate">
                      <router-link :to="`/novel/editor?id=${item.novelId}`" class="hover:text-blue-600">{{ item.novelTitle }}</router-link>
                    </p>
                    <p class="text-xs text-gray-500 mt-1">
                      编辑了 <span class="font-medium text-gray-600">{{ item.editedItemName }}</span>
                    </p>
                  </div>
                </div>
                <div class="flex items-center gap-6">
                  <span class="text-sm text-gray-400 w-28 text-right">{{ item.formattedTime }}</span>
                  <div class="flex items-center gap-2 opacity-0 group-hover:opacity-100 transition-opacity">
                    <router-link :to="`/novel/editor?id=${item.novelId}`" class="px-3 py-1.5 bg-[#4B5563] text-white rounded-lg text-xs font-medium hover:bg-gray-700 transition-colors">继续编辑</router-link>
                    <button class="w-8 h-8 flex items-center justify-center text-gray-500 hover:bg-gray-200 rounded-lg transition-colors">
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M5 12h.01M12 12h.01M19 12h.01M6 12a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0z"/></svg>
                    </button>
                  </div>
                </div>
              </li>
            </ul>
          </div>
        </div>
      </div>
      <div v-else class="text-center py-20 text-gray-500">
        没有最近的编辑活动。
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { onMounted } from 'vue';
import { storeToRefs } from 'pinia';
import { useDashboardStore } from '@/novel/dashboard/stores/dashboardStore';

const dashboardStore = useDashboardStore();

const { groupedRecentItems } = storeToRefs(dashboardStore);

onMounted(() => {
  dashboardStore.fetchAllData();
});
</script>

// =
// 文件: ..\src\novel\dashboard\views\TrashView.vue
//

// =
// 文件: ..\src/novel/dashboard/views/TrashView.vue
//
// 文件: src\novel\dashboard\views\TrashView.vue

<template>
  <div class="flex-1 p-8 overflow-auto bg-[#FCFCFC] hide-scrollbar">
    <div class="flex justify-between items-center mb-6 p-4 bg-blue-50 border border-blue-100 rounded-lg">
      <p class="text-sm text-blue-800 flex items-center gap-2">
        <svg class="w-5 h-5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path></svg>
        项目将在回收站中保留30天，之后将被永久删除。
      </p>
      <button class="flex items-center gap-2 px-3 py-1.5 text-sm font-medium bg-red-100 text-red-700 rounded-md hover:bg-red-200 transition-colors">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M19 21H5a2 2 0 01-2-2V7h18v12a2 2 0 01-2 2zM3 7h18M10 12v4M14 12v4M8 7V4a1 1 0 011-1h6a1 1 0 011 1v3"/></svg>
        清空回收站
      </button>
    </div>

    <div class="bg-white rounded-xl border border-gray-100 overflow-hidden">
      <table class="w-full text-sm text-left">
        <thead class="text-xs text-[#6B7280] uppercase bg-gray-50">
        <tr>
          <th scope="col" class="px-6 py-3 font-medium w-2/5">项目名称</th>
          <th scope="col" class="px-6 py-3 font-medium">类型</th>
          <th scope="col" class="px-6 py-3 font-medium">删除时间</th>
          <th scope="col" class="px-6 py-3 font-medium">剩余时间</th>
          <th scope="col" class="px-6 py-3 font-medium text-right">操作</th>
        </tr>
        </thead>
        <tbody class="divide-y divide-gray-100">
        <tr v-if="dashboardStore.trashedItems.length === 0">
          <td colspan="5" class="text-center py-10 text-gray-500">回收站是空的</td>
        </tr>
        <tr v-for="item in dashboardStore.trashedItems" :key="item.id" class="hover:bg-gray-50/50 transition-colors">
          <td class="px-6 py-4 font-medium text-[#374151] flex items-center gap-3">
            <span class="text-gray-400 w-5 h-5 flex-shrink-0" v-html="item.icon"></span>
            <span>{{ item.name }}</span>
          </td>
          <td class="px-6 py-4 text-[#6B7280]">{{ item.type }}</td>
          <td class="px-6 py-4 text-[#6B7280]">{{ new Date(item.deletedAt).toLocaleString() }}</td>
          <td class="px-6 py-4">
            <div class="flex items-center gap-3">
              <div class="w-full bg-gray-200 rounded-full h-1.5">
                <div class="bg-orange-400 h-1.5 rounded-full" :style="{ width: item.retentionPercent + '%' }"></div>
              </div>
              <span class="text-orange-500 text-xs font-medium w-16 text-right">{{ item.retentionDays }} 天</span>
            </div>
          </td>
          <td class="px-6 py-4 text-right space-x-4">
            <button @click="dashboardStore.restoreNovel(item.id)" class="font-medium text-blue-600 hover:text-blue-800 transition-colors">恢复</button>
            <button @click="dashboardStore.deleteItemPermanently(item.id)" class="font-medium text-red-600 hover:text-red-800 transition-colors">永久删除</button>
          </td>
        </tr>
        </tbody>
      </table>
    </div>
  </div>
</template>

<script setup lang="ts">
import { onMounted } from 'vue';
import { useDashboardStore } from '@/novel/dashboard/stores/dashboardStore';

const dashboardStore = useDashboardStore();

onMounted(() => {
  dashboardStore.fetchAllData();
});
</script>

// =
// 文件: ..\src\novel\editor\components\ai\AIDiffPreview.vue
//

<template>
  <div class="diff-preview-container">
    <div class="header">
      <h3 class="title">AI生成预览</h3>
      <div class="actions">
        <button v-if="previewTask && previewTask.status === 'completed'" @click="$emit('apply-changes', previewTask.id)" class="apply-btn">
          <i class="fa-solid fa-check"></i>
          应用修改
        </button>
      </div>
    </div>
    <div class="content-area">
      <div v-if="previewTask">
        <div class="prose-preview">
          <div v-html="previewTask.generatedContent.replace(/\n/g, '<br>')"></div>
          <span v-if="previewTask.status === 'processing'" class="blinking-cursor">▍</span>
        </div>
      </div>
      <div v-else class="empty-state">
        <i class="fa-regular fa-eye text-3xl text-gray-300"></i>
        <p class="mt-2">请从上方任务队列中</p>
        <p>选择一个任务来查看预览。</p>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import type { PropType } from 'vue';
import type { AITask } from '@/novel/editor/types';

// --- Props & Emits ---
defineProps({
  previewTask: {
    type: Object as PropType<AITask | null>,
    default: null
  }
});

defineEmits<{
  (e: 'apply-changes', taskId: string): void;
}>();

</script>

<style scoped>
.diff-preview-container { padding: 1rem; display: flex; flex-direction: column; height: 100%; }
.header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.75rem; padding: 0 0.5rem; flex-shrink: 0; height: 32px; }
.title { font-size: 0.875rem; font-weight: 500; color: #4B5563; }
.apply-btn { display: flex; align-items: center; gap: 0.375rem; padding: 0.375rem 0.75rem; background-color: #16A34A; color: white; border-radius: 0.5rem; font-size: 0.75rem; font-weight: 500; transition: background-color 0.2s ease; }
.apply-btn:hover { background-color: #15803D; }
.content-area { flex-grow: 1; background-color: #FFFFFF; border-radius: 0.5rem; border: 1px solid #E5E7EB; padding: 1rem; overflow-y: auto; font-size: 0.875rem; line-height: 1.7; color: #374151; }
.empty-state { height: 100%; display: flex; flex-direction: column; align-items: center; justify-content: center; text-align: center; color: #9CA3AF; font-size: 0.875rem; }

.prose-preview {
  white-space: pre-wrap;
}

.blinking-cursor {
  font-weight: 500;
  font-size: 1em;
  color: #3B82F6;
  animation: blink 1s step-end infinite;
}

@keyframes blink {
  from, to {
    color: transparent;
  }
  50% {
    color: #3B82F6;
  }
}

.content-area {
  scrollbar-width: thin;
  scrollbar-color: transparent transparent;
  transition: scrollbar-color 0.3s ease-out;
}
.content-area:hover {
  scrollbar-color: #D1D5DB #ffffff;
}
.content-area::-webkit-scrollbar {
  width: 6px;
}
.content-area::-webkit-scrollbar-track {
  background: transparent;
}
.content-area::-webkit-scrollbar-thumb {
  background-color: transparent;
  border-radius: 3px;
  transition: background-color 0.3s ease-out;
}
.content-area:hover::-webkit-scrollbar-thumb {
  background-color: #D1D5DB;
}
.content-area:hover::-webkit-scrollbar-thumb:hover {
  background-color: #9CA3AF;
}
</style>

// =
// 文件: ..\src\novel\editor\components\ai\AITaskQueue.vue
//

<template>
  <div class="task-queue-container">
    <div class="header">
      <h3 class="title">AI任务队列</h3>
      <span v-if="activeTasksCount > 0" class="badge">{{ activeTasksCount }}个活跃</span>
    </div>
    <div v-if="tasks.length > 0" class="task-list">
      <div
          v-for="task in tasks"
          :key="task.id"
          :class="['task-item', `status-${task.status}`, { 'clickable': isClickable(task.status) }]"
          @click="handleTaskClick(task)"
      >
        <!-- Task Title & Status Icon -->
        <div class="task-item-header">
          <p class="task-title" :title="task.title">{{ task.title }}</p>
          <span class="task-status-text">
            <i :class="getStatusIcon(task.status)" class="status-icon"></i>
            {{ getStatusText(task.status) }}
          </span>
        </div>

        <!-- Progress Bar or Message -->
        <div class="task-item-body">
          <div v-if="task.status === 'processing'" class="progress-bar-container">
            <div class="progress-bar"></div>
          </div>
          <p v-if="task.status === 'failed'" class="error-message">
            {{ task.error }} <a href="#" @click.prevent.stop="handleRetry(task)" class="retry-link">重试</a>
          </p>
          <p v-if="task.status === 'processing'" class="message">
            点击查看实时生成
          </p>
          <p v-if="task.status === 'completed'" class="message">
            点击预览与应用
          </p>
          <p v-if="task.status === 'applied'" class="message">
            已自动应用，点击查看详情
          </p>
        </div>
      </div>
    </div>
    <div v-else class="empty-state">
      <i class="fa-regular fa-folder-open text-3xl text-gray-300"></i>
      <p class="mt-2">当前没有AI任务</p>
      <p class="text-xs text-gray-400 mt-1">在编辑器中右键开始</p>
    </div>
  </div>
</template>

<script setup lang="ts">
import { computed } from 'vue';
import { useAITaskStore } from '@/novel/editor/stores/aiTaskStore';
import type { AITask, AITaskStatus } from '@/novel/editor/types';

// --- Emits ---
const emit = defineEmits<{
  (e: 'select-task', task: AITask): void;
}>();

// --- Store ---
const aiTaskStore = useAITaskStore();
const tasks = computed(() => aiTaskStore.tasks);

// --- Computed ---
const activeTasksCount = computed(() => {
  return tasks.value.filter(t => t.status === 'processing' || t.status === 'pending').length;
});

// --- Methods ---
const getStatusText = (status: AITaskStatus): string => {
  const map: Record<AITaskStatus, string> = {
    pending: '等待中',
    processing: '进行中...',
    completed: '待应用',
    failed: '失败',
    applied: '已应用'
  };
  return map[status];
};

const getStatusIcon = (status: AITaskStatus): string => {
  const map: Record<AITaskStatus, string> = {
    pending: 'fa-solid fa-hourglass-half',
    processing: 'fa-solid fa-spinner fa-spin',
    completed: 'fa-solid fa-check-circle',
    failed: 'fa-solid fa-times-circle',
    applied: 'fa-solid fa-check-double'
  };
  return map[status];
}

const isClickable = (status: AITaskStatus): boolean => {
  return ['completed', 'processing', 'applied'].includes(status);
};

const handleTaskClick = (task: AITask) => {
  if (isClickable(task.status)) {
    emit('select-task', task);
  }
};

const handleRetry = (task: AITask) => {
  aiTaskStore.retryTask(task.id);
};
</script>

<style scoped>
.task-queue-container { padding: 1rem; display: flex; flex-direction: column; height: 100%; }
.header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.75rem; padding: 0 0.5rem; }
.title { font-size: 0.875rem; font-weight: 500; color: #4B5563; }
.badge { font-size: 0.75rem; font-weight: 500; padding: 0.125rem 0.5rem; border-radius: 9999px; color: #1D4ED8; background-color: #DBEAFE; }
.task-list { flex-grow: 1; overflow-y: auto; space-y: 0.5rem; padding-right: 4px; }
.task-item { padding: 0.75rem; border-radius: 0.5rem; border: 1px solid #E5E7EB; transition: all 0.2s ease; background-color: #FFFFFF;}
.task-item.clickable { cursor: pointer; }
.task-item.clickable:hover { border-color: #D1D5DB; box-shadow: 0 1px 3px rgba(0,0,0,0.05); }
.task-item.status-processing.clickable { border: 1px solid #93C5FD; background-color: #EFF6FF; }
.task-item.status-processing.clickable:hover { background-color: #DBEAFE; border-color: #60A5FA; }
.task-item.status-completed.clickable { border: 1px solid #BBF7D0; background-color: #F0FDF4; }
.task-item.status-completed.clickable:hover { background-color: #DCFCE7; border-color: #A7F3D0; }
.task-item.status-failed { border: 1px solid #FECACA; background-color: #FEF2F2; }
.task-item.status-applied.clickable { border: 1px solid #E5E7EB; background-color: #F9FAFB; }
.task-item.status-applied.clickable:hover { background-color: #F3F4F6; border-color: #E5E7EB; }

.task-item-header { display: flex; justify-content: space-between; align-items: center; }
.task-title { font-size: 0.875rem; font-weight: 500; color: #1F2937; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
.task-status-text { font-size: 0.75rem; font-weight: 500; display: flex; align-items: center; gap: 0.25rem; flex-shrink: 0; }
.status-icon { width: 1rem; text-align: center; }
.status-pending .task-status-text { color: #6B7280; }
.status-processing .task-status-text { color: #2563EB; }
.status-completed .task-status-text { color: #16A34A; }
.status-failed .task-status-text { color: #DC2626; }
.status-applied .task-status-text { color: #6B7280; }

.task-item-body { margin-top: 0.5rem; }
.progress-bar-container { width: 100%; background-color: #E5E7EB; border-radius: 9999px; height: 0.25rem; overflow: hidden; }
.progress-bar { background-color: #3B82F6; height: 100%; width: 100%; border-radius: 9999px; animation: indeterminate-progress 2s cubic-bezier(0.4, 0, 0.6, 1) infinite; }
@keyframes indeterminate-progress { 0% { transform: translateX(-100%); } 100% { transform: translateX(100%); } }
.error-message, .message { font-size: 0.75rem; margin-top: 0.25rem; }
.error-message { color: #B91C1C; }
.message { color: #6B7280; }
.retry-link { text-decoration: underline; font-weight: 500; }
.empty-state { flex-grow: 1; display: flex; flex-direction: column; align-items: center; justify-content: center; text-align: center; color: #9CA3AF; font-size: 0.875rem; }

.task-list {
  scrollbar-width: thin;
  scrollbar-color: transparent transparent;
  transition: scrollbar-color 0.3s ease-out;
}
.task-list:hover {
  scrollbar-color: #D1D5DB #f9fafb;
}
.task-list::-webkit-scrollbar {
  width: 6px;
}
.task-list::-webkit-scrollbar-track {
  background: transparent;
}
.task-list::-webkit-scrollbar-thumb {
  background-color: transparent;
  border-radius: 3px;
  transition: background-color 0.3s ease-out;
}
.task-list:hover::-webkit-scrollbar-thumb {
  background-color: #D1D5DB;
}
.task-list:hover::-webkit-scrollbar-thumb:hover {
  background-color: #9CA3AF;
}
</style>

// =
// 文件: ..\src\novel\editor\components\ai\EditorAIPanel.vue
//

// 文件: src\novel\editor\components\ai\EditorAIPanel.vue
//

<template>
  <aside class="editor-ai-panel-container">
    <!-- Top Part: AI Task Queue -->
    <div class="task-queue-section">
      <AITaskQueue @select-task="handleSelectTask" />
    </div>

    <!-- Divider -->
    <div class="divider"></div>

    <!-- Bottom Part: AI Diff Preview -->
    <div class="diff-preview-section">
      <AIDiffPreview :preview-task="selectedTask" @apply-changes="handleApplyChanges" />
    </div>

    <!-- Footer for settings -->
    <div class="panel-footer">
      <label class="setting-item">
        <input type="checkbox" v-model="needsPreview" class="setting-checkbox" />
        <span class="setting-label">执行前预览上下文</span>
      </label>
    </div>
  </aside>
</template>

<script setup lang="ts">
import { ref, computed } from 'vue';
import AITaskQueue from './AITaskQueue.vue';
import AIDiffPreview from './AIDiffPreview.vue';
import { useAITaskStore } from '@/novel/editor/stores/aiTaskStore';
import { useEditorStore } from '@/novel/editor/stores/editorStore';
import type { AITask } from '@/novel/editor/types';

// --- State ---
const selectedTaskId = ref<string | null>(null);

// --- Store ---
const aiTaskStore = useAITaskStore();
const editorStore = useEditorStore();

// --- Computed ---
const selectedTask = computed((): AITask | null => {
  if (!selectedTaskId.value) {
    return null;
  }
  return aiTaskStore.tasks.find(t => t.id === selectedTaskId.value) ?? null;
});

// 计算属性用于双向绑定预览设置
const needsPreview = computed({
  get: () => editorStore.uiState.needsPreview,
  set: (value: boolean) => {
    editorStore.uiState.needsPreview = value;
  }
});

// --- Methods ---

const handleSelectTask = (task: AITask) => {
  selectedTaskId.value = task.id;
};

const handleApplyChanges = (taskId: string) => {
  aiTaskStore.applyChanges(taskId);
  selectedTaskId.value = null; // 清空选择，预览区返回默认状态
};
</script>

<style scoped>
.editor-ai-panel-container {
  width: 24rem; /* 384px */
  background-color: #F9FAFB; /* gray-50 */
  border-left: 1px solid #F3F4F6; /* gray-100 */
  display: flex;
  flex-direction: column;
  flex-shrink: 0;
}

.task-queue-section {
  height: 40%;
  min-height: 200px;
  flex-shrink: 0;
}

.divider {
  height: 1px;
  background-color: #E5E7EB;
  margin: 0 1rem;
}

.diff-preview-section {
  flex-grow: 1;
  height: 60%;
}

.panel-footer {
  flex-shrink: 0;
  padding: 0.75rem 1.5rem;
  border-top: 1px solid #E5E7EB;
  background-color: #FFFFFF;
}

.setting-item {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  cursor: pointer;
  user-select: none;
}

.setting-checkbox {
  width: 1rem;
  height: 1rem;
  border-radius: 0.25rem;
  border-color: #D1D5DB;
  color: #10B981;
  transition: all 0.2s;
}
.setting-checkbox:focus {
  ring-offset-color: white;
  --tw-ring-color: #10B981;
}

.setting-label {
  font-size: 0.875rem;
  color: #4B5563;
}
</style>

// =
// 文件: ..\src\novel\editor\components\content\EditorContentArea.vue
//

// 文件: src\novel\editor\components\content\EditorContentArea.vue
//

<template>
  <main class="editor-content-area-container" ref="editorWrapperRef">
    <!-- Header: 使用新拆分出的组件 -->
    <EditorHeader :active-item="activeItem" />

    <!-- Content: 编辑器核心区域 -->
    <div
        class="editor-scroll-wrapper"
        @scroll="handleScroll"
    >
      <!-- Floating Toolbar -->
      <FloatingToolbar ref="floatingToolbarRef" />

      <!-- Context Menu -->
      <EditorContextMenu ref="editorContextMenuRef" />

      <div class="editor-content-wrapper" ref="editorContentRef">
        <TiptapEditor
            v-if="activeItem && activeItem.content !== undefined"
            :key="activeItem.id"
            v-model="activeItemContent"
            @show-context-menu="showEditorContextMenu"
        />
        <div v-else class="placeholder">
          <div class="text-center">
            <i class="fa-regular fa-hand-pointer text-4xl text-gray-300"></i>
            <p class="mt-4 text-gray-500">
              {{ activeItem ? '该节点没有可编辑内容。' : '请从左侧目录选择一个项目进行查看或编辑。' }}
            </p>
          </div>
        </div>
      </div>
    </div>
  </main>
</template>

<script setup lang="ts">
import { computed, ref, onMounted, onBeforeUnmount } from 'vue';
import { useEditorStore } from '@/novel/editor/stores/editorStore';
import EditorHeader from './EditorHeader.vue';
import TiptapEditor from './TiptapEditor.vue';
import FloatingToolbar from './FloatingToolbar.vue';
import EditorContextMenu from './EditorContextMenu.vue';

const editorStore = useEditorStore();
const editorWrapperRef = ref<HTMLElement | null>(null);
const editorContentRef = ref<HTMLElement | null>(null);
const floatingToolbarRef = ref<InstanceType<typeof FloatingToolbar> | null>(null);
const editorContextMenuRef = ref<InstanceType<typeof EditorContextMenu> | null>(null);

const activeItem = computed(() => editorStore.activeItem);

const activeItemContent = computed({
  get: () => (activeItem.value && 'content' in activeItem.value ? activeItem.value.content : '') || '',
  set: (newContent: string) => {
    if (activeItem.value) {
      editorStore.updateItemContentById(activeItem.value.id, newContent);
    }
  }
});

const showEditorContextMenu = (event: MouseEvent) => {
  editorContextMenuRef.value?.show(event, editorWrapperRef.value);
};

const handleSelectionChange = () => {
  if (!floatingToolbarRef.value || !editorWrapperRef.value || !editorContentRef.value) return;

  const selection = window.getSelection();
  if (!selection || selection.rangeCount === 0 || selection.isCollapsed || !editorContentRef.value.contains(selection.getRangeAt(0).commonAncestorContainer)) {
    floatingToolbarRef.value.hide();
    return;
  }

  floatingToolbarRef.value.show(selection.getRangeAt(0).getBoundingClientRect(), editorWrapperRef.value.getBoundingClientRect());
  editorContextMenuRef.value?.hide();
};

const handleScroll = () => {
  floatingToolbarRef.value?.hide();
  editorContextMenuRef.value?.hide();
}

const handleClickOutside = (event: MouseEvent) => {
  const target = event.target as HTMLElement;
  if (!target.closest('.context-menu') && !target.closest('.floating-toolbar')) {
    editorContextMenuRef.value?.hide();
    floatingToolbarRef.value?.hide();
  }
}

onMounted(() => {
  document.addEventListener('selectionchange', handleSelectionChange);
  document.addEventListener('click', handleClickOutside);
});

onBeforeUnmount(() => {
  document.removeEventListener('selectionchange', handleSelectionChange);
  document.removeEventListener('click', handleClickOutside);
});
</script>

<style scoped>
/* [修正] 恢复原始样式，移除卡片化布局 */
.editor-content-area-container { display: flex; flex-direction: column; flex: 1; overflow: hidden; background-color: #F9FAFB; }
.editor-scroll-wrapper { flex: 1; overflow-y: auto; padding: 2rem 0; position: relative; }
.editor-content-wrapper { max-width: 42rem; margin: 0 auto; }
.placeholder { display: flex; align-items: center; justify-content: center; height: 100%; min-height: 200px; color: #6B7280; text-align: center; }

/* 主内容区滚动条样式 */
.editor-scroll-wrapper {
  scrollbar-width: thin;
  scrollbar-color: transparent transparent;
  transition: scrollbar-color 0.3s ease-out;
}
.editor-scroll-wrapper:hover {
  scrollbar-color: #D1D5DB transparent;
}
.editor-scroll-wrapper::-webkit-scrollbar {
  width: 8px;
}
.editor-scroll-wrapper::-webkit-scrollbar-track {
  background: transparent;
}
.editor-scroll-wrapper::-webkit-scrollbar-thumb {
  background-color: transparent;
  border-radius: 4px;
  border: 2px solid transparent;
  background-clip: content-box;
  transition: background-color 0.3s ease-out;
}
.editor-scroll-wrapper:hover::-webkit-scrollbar-thumb {
  background-color: #D1D5DB;
}
.editor-scroll-wrapper:hover::-webkit-scrollbar-thumb:hover {
  background-color: #9CA3AF;
}
</style>

// =
// 文件: ..\src\novel\editor\components\content\EditorContextMenu.vue
//

// 文件路径: src\novel\editor\components\content\EditorContextMenu.vue

<template>
  <div
      v-if="visible"
      class="context-menu"
      :style="{ top: `${position.y}px`, left: `${position.x}px` }"
      @click.stop
  >
    <p class="menu-title">AI生成任务</p>
    <a @click="handleExecute('续写')" href="#" class="context-menu-item">
      <i class="fa-solid fa-wand-magic-sparkles w-4 text-center text-[#4B5563]"></i>
      <span>续写内容</span>
    </a>
    <a @click="handleExecute('润色')" href="#" class="context-menu-item">
      <i class="fa-solid fa-palette w-4 text-center text-[#3B82F6]"></i>
      <span>润色内容</span>
    </a>
    <div class="context-menu-divider"></div>
    <p class="menu-title">分析任务</p>
    <a @click="handleExecute('分析')" href="#" class="context-menu-item">
      <i class="fa-solid fa-magnifying-glass-chart w-4 text-center text-[#F59E0B]"></i>
      <span>分析内容</span>
    </a>
  </div>
</template>

<script setup lang="ts">
import { ref } from 'vue';
import { useAITaskStore } from '@/novel/editor/stores/aiTaskStore';
import { useEditorStore } from '@/novel/editor/stores/editorStore';
import { useContextMenuStore } from '@/novel/context_preview/stores/contextPreviewStore';

const aiTaskStore = useAITaskStore();
const editorStore = useEditorStore();
const contextPreviewStore = useContextMenuStore();

const visible = ref(false);
const position = ref({ x: 0, y: 0 });

const show = (event: MouseEvent, container: HTMLElement | null) => {
  const containerRect = container?.getBoundingClientRect() || { top: 0, left: 0 };
  visible.value = true;
  position.value.x = event.clientX - containerRect.left;
  position.value.y = event.clientY - containerRect.top;
};

const hide = () => {
  visible.value = false;
};

const handleExecute = (taskType: '润色' | '续写' | '分析') => {
  const activeItem = editorStore.activeItem;
  if (!activeItem) {
    console.error("无法执行AI任务：没有激活的文档。");
    hide();
    return;
  }

  if (editorStore.uiState.needsPreview) {
    contextPreviewStore.show({
      type: taskType,
      targetItemId: activeItem.id,
      title: activeItem.title
    });
  } else {
    aiTaskStore.startNewTask(taskType, activeItem.id);
  }

  hide();
}

defineExpose({ show, hide });
</script>

<style scoped>
.context-menu { position: absolute; z-index: 1000; background-color: white; border: 1px solid #e5e7eb; border-radius: 0.75rem; padding: 0.5rem; box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1); width: 16rem; }
.menu-title { padding: 0.25rem 0.75rem; font-size: 0.75rem; color: #9CA3AF; font-weight: 500; text-transform: uppercase; letter-spacing: 0.05em; }
.context-menu-item { display: flex; align-items: center; gap: 0.75rem; padding: 0.5rem 0.75rem; border-radius: 0.5rem; font-size: 0.875rem; color: #374151; cursor: pointer; user-select: none; transition: background-color 0.15s; text-decoration: none; }
.context-menu-item:hover { background-color: #f3f4f6; }
.context-menu-divider { height: 1px; background-color: #f3f4f6; margin: 0.5rem 0; }
</style>

// =
// 文件: ..\src\novel\editor\components\content\EditorHeader.vue
//

// 文件: src\novel\editor\components\content\EditorHeader.vue
//

<template>
  <header class="header">
    <div v-if="activeItem" class="header-left">
        <span class="item-icon" :class="iconColorClass">
            <i :class="icon"></i>
        </span>
      <span class="item-title">{{ activeItem.title }}</span>
      <span v-if="activeItem.type === 'chapter' && (activeItem as Chapter).status === 'editing'" class="item-status-badge">
          已保存
        </span>
    </div>
    <div v-else class="header-left">
      <span class="item-title">请从左侧选择一个文档</span>
    </div>

    <div v-if="activeItem" class="header-right">
      <div class="stats">
        <span v-if="wordCount > 0">字数: {{ wordCount }}</span>
        <template v-if="readingTime > 0">
          <span class="divider">•</span>
          <span>预计阅读: {{ readingTime }}分钟</span>
        </template>
      </div>
      <div class="actions">
        <router-link to="/novel/read" class="action-btn" title="阅读模式"><i class="fa-solid fa-book-open-reader"></i></router-link>
        <router-link to="/novel/history" class="action-btn" title="历史版本"><i class="fa-solid fa-clock-rotate-left"></i></router-link>
        <button class="action-btn" title="更多选项"><i class="fa-solid fa-ellipsis-vertical"></i></button>
      </div>
    </div>
  </header>
</template>

<script setup lang="ts">
import { computed } from 'vue';
import type { PropType } from 'vue';
import { getIconByNodeType } from '@/novel/editor/utils/iconUtils';
import type { EditorItem, Chapter } from '@/novel/editor/types';

const props = defineProps({
  activeItem: {
    type: Object as PropType<EditorItem | null>,
    default: null
  }
});

const wordCount = computed(() => {
  if (props.activeItem && props.activeItem.type === 'chapter') {
    return (props.activeItem as Chapter).wordCount || 0;
  }
  return 0;
});

const readingTime = computed(() => {
  if (!wordCount.value) return 0;
  const time = Math.ceil(wordCount.value / 400); // 调整为更合理的阅读速度
  return time > 0 ? time : 1;
});

const icon = computed(() => {
  if (!props.activeItem) return getIconByNodeType('default');
  return getIconByNodeType(props.activeItem.type);
});

const iconColorClass = computed(() => {
  // 这个计算属性是为了提取图标的颜色类，例如 'text-purple-500'
  // 这样可以避免在模板中写复杂的逻辑
  const classes = icon.value.split(' ');
  return classes.filter(c => c.startsWith('text-')).join(' ');
});

</script>

<style scoped>
.header { height: 4rem; padding: 0 1.5rem; display: flex; align-items: center; justify-content: space-between; border-bottom: 1px solid #F3F4F6; flex-shrink: 0; background-color: #FFFFFF; }
.header-left { display: flex; align-items: center; gap: 0.75rem; font-size: 0.875rem; min-width: 0; }
.item-icon { width: 1.25rem; text-align: center; flex-shrink: 0; }
.item-title { font-weight: 500; color: #1F2937; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;}
.item-status-badge { font-size: 0.75rem; font-weight: 500; padding: 0.125rem 0.5rem; border-radius: 9999px; color: #15803D; background-color: #DCFCE7; flex-shrink: 0; }
.header-right { display: flex; align-items: center; gap: 1rem; flex-shrink: 0; }
.stats { display: flex; align-items: center; gap: 0.5rem; font-size: 0.875rem; color: #6B7280; }
.stats .divider { color: #D1D5DB; }
.actions { display: flex; align-items: center; gap: 0.25rem; }
.action-btn { width: 2rem; height: 2rem; display: flex; align-items: center; justify-content: center; color: #6B7280; border-radius: 0.5rem; transition: background-color 0.15s; }
.action-btn:hover { background-color: #F3F4F6; }
</style>

// =
// 文件: ..\src\novel\editor\components\content\FloatingToolbar.vue
//

// 文件路径: src\novel\editor\components\content\FloatingToolbar.vue

<template>
  <div
      v-if="visible"
      class="floating-toolbar"
      :style="{ top: `${position.top}px`, left: `${position.left}px` }"
  >
    <button @click="handleExecute('分析')" title="分析内容" class="toolbar-btn"><i class="fa-solid fa-magnifying-glass-chart"></i></button>
    <button @click="handleExecute('续写')" title="AI续写" class="toolbar-btn"><i class="fa-solid fa-wand-magic-sparkles"></i></button>
    <button @click="handleExecute('润色')" title="润色文本" class="toolbar-btn"><i class="fa-solid fa-spell-check"></i></button>
  </div>
</template>

<script setup lang="ts">
import { ref } from 'vue';
import { useAITaskStore } from '@/novel/editor/stores/aiTaskStore';
import { useEditorStore } from '@/novel/editor/stores/editorStore';
import { useContextMenuStore } from '@/novel/context_preview/stores/contextPreviewStore';

const aiTaskStore = useAITaskStore();
const editorStore = useEditorStore();
const contextPreviewStore = useContextMenuStore();

const visible = ref(false);
const position = ref({ top: 0, left: 0 });

const show = (rect: DOMRect, wrapperRect: DOMRect) => {
  visible.value = true;
  position.value = {
    top: rect.top - wrapperRect.top - 48,
    left: rect.left - wrapperRect.left + rect.width / 2 - 60,
  };
};

const hide = () => {
  visible.value = false;
};

const handleExecute = (taskType: '润色' | '续写' | '分析') => {
  const activeItem = editorStore.activeItem;
  if (!activeItem) {
    console.error("无法执行AI任务：没有激活的文档。");
    hide();
    return;
  }

  if (editorStore.uiState.needsPreview) {
    contextPreviewStore.show({
      type: taskType,
      targetItemId: activeItem.id,
      title: activeItem.title
    });
  } else {
    aiTaskStore.startNewTask(taskType, activeItem.id);
  }

  hide();
}

defineExpose({ show, hide });
</script>

<style scoped>
.floating-toolbar {
  position: absolute;
  z-index: 10;
  background-color: white;
  border: 1px solid #e5e7eb;
  border-radius: 0.5rem;
  padding: 0.375rem;
  box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
  display: flex;
  gap: 0.25rem;
}
.toolbar-btn {
  width: 2rem;
  height: 2rem;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #4B5563;
  border-radius: 0.375rem;
  transition: background-color 0.15s;
}
.toolbar-btn:hover {
  background-color: #f3f4f6;
}
</style>

// =
// 文件: ..\src\novel\editor\components\content\TiptapEditor.vue
//

<template>
  <div v-if="editor" class="editor-wrapper">
    <editor-content
        :editor="editor"
        class="prose prose-lg max-w-none"
        @contextmenu.prevent="emit('show-context-menu', $event)"
    />
  </div>
</template>
<script setup lang="ts">
import { useEditor, EditorContent } from '@tiptap/vue-3'
import StarterKit from '@tiptap/starter-kit'
import { watch, onBeforeUnmount } from 'vue'

// --- Props & Emits ---

const props = defineProps<{
  modelValue: string
}>()

const emit = defineEmits<{
  (e: 'update:modelValue', value: string): void;
  (e: 'show-context-menu', event: MouseEvent): void;
}>()

// --- Tiptap Editor Instance ---

const editor = useEditor({
  content: props.modelValue,
  extensions: [
    StarterKit.configure({
      heading: { levels: [1, 2, 3] },
    }),
  ],
  onUpdate: () => {
    emit('update:modelValue', editor.value?.getHTML() || '')
  },
  editorProps: {
    attributes: {
      class: 'prose-mirror-focus',
    },
  },
})

// --- Logic ---

watch(() => props.modelValue, (newValue) => {
  const isSame = editor.value?.getHTML() === newValue
  if (isSame) {
    return
  }
  editor.value?.commands.setContent(newValue, false)
})

onBeforeUnmount(() => {
  editor.value?.destroy()
})
</script>
<style scoped>
:deep(.ProseMirror) {
  min-height: calc(100vh - 12rem);
  outline: none;
  padding: 1rem;
  font-family: 'Georgia', 'Noto Serif SC', serif;
  line-height: 1.75;
  color: #374151;
}

:deep(.prose-mirror-focus:focus-visible) {}

:deep(.prose h1) {
  font-family: 'Noto Serif SC', serif;
  font-size: 1.875rem;
  font-weight: 600;
  margin-bottom: 1.5rem;
}
:deep(.prose p) {
  margin-top: 1em;
  margin-bottom: 1em;
}
:deep(.prose h2) {
  font-family: 'Noto Serif SC', serif;
  font-size: 1.5rem;
  font-weight: 600;
  padding-bottom: 0.5rem;
  border-bottom: 1px solid #e5e7eb;
  margin-top: 2rem;
  margin-bottom: 1rem;
}
:deep(.prose h3) {
  font-family: 'Noto Serif SC', serif;
  font-size: 1.25rem;
  font-weight: 600;
  margin-top: 1.5rem;
  margin-bottom: 0.75rem;
}
</style>

// =
// 文件: ..\src\novel\editor\components\sidebar\DirectoryContextMenu.vue
//

// 文件路径: src\novel\editor\components\sidebar\DirectoryContextMenu.vue

<template>
  <div
      v-if="visible"
      class="context-menu"
      :style="{ top: `${position.y}px`, left: `${position.x}px` }"
      @click.stop
  >
    <!-- 目录管理：卷 -->
    <template v-if="node?.type === 'volume'">
      <p class="menu-title">目录管理</p>
      <div @click="handleAction('newChapter')" class="context-menu-item"><i class="fa-solid fa-plus w-4 text-center"></i><span>新建章节</span></div>
      <div @click="handleAction('newVolume')" class="context-menu-item"><i class="fa-solid fa-folder-plus w-4 text-center"></i><span>新建卷</span></div>
      <div @click="handleAction('rename')" class="context-menu-item"><i class="fa-solid fa-pencil w-4 text-center"></i><span>重命名</span></div>
      <div class="context-menu-divider"></div>
      <p class="menu-title">AI 批量任务</p>
      <div @click="handleAIAction('分析', node, true)" class="context-menu-item"><i class="fa-solid fa-magnifying-glass-chart w-4 text-center text-[#F59E0B]"></i><span>批量分析章节</span></div>
      <div @click="handleAIAction('续写', node, true)" class="context-menu-item"><i class="fa-solid fa-wand-magic-sparkles w-4 text-center text-[#4B5563]"></i><span>批量续写章节</span></div>
      <div class="context-menu-divider"></div>
      <div @click="handleAction('delete')" class="context-menu-item danger"><i class="fa-solid fa-trash-can w-4 text-center"></i><span>删除卷</span></div>
    </template>

    <!-- 目录管理：章节 -->
    <template v-else-if="node?.type === 'chapter'">
      <p class="menu-title">文件操作</p>
      <div @click="handleAction('rename')" class="context-menu-item"><i class="fa-solid fa-pencil w-4 text-center"></i><span>重命名</span></div>
      <div class="context-menu-divider"></div>
      <p class="menu-title">AI 助手</p>
      <div @click="handleAIAction('分析', node)" class="context-menu-item"><i class="fa-solid fa-magnifying-glass-chart w-4 text-center text-[#F59E0B]"></i><span>分析内容</span></div>
      <div @click="handleAIAction('续写', node)" class="context-menu-item"><i class="fa-solid fa-wand-magic-sparkles w-4 text-center text-[#4B5563]"></i><span>续写内容</span></div>
      <div class="context-menu-divider"></div>
      <div @click="handleAction('delete')" class="context-menu-item danger"><i class="fa-solid fa-trash-can w-4 text-center"></i><span>删除章节</span></div>
    </template>

    <!-- 笔记 -->
    <template v-else-if="node?.type === 'note'">
      <p class="menu-title">笔记操作</p>
      <div @click="handleNoteAction('rename')" class="context-menu-item"><i class="fa-solid fa-pencil w-4 text-center"></i><span>重命名</span></div>
      <div class="context-menu-divider"></div>
      <div @click="handleNoteAction('delete')" class="context-menu-item danger"><i class="fa-solid fa-trash-can w-4 text-center"></i><span>删除笔记</span></div>
    </template>

    <!-- 派生节点 (剧情/分析) -->
    <template v-else-if="node?.type.startsWith('plot_') || node?.type.startsWith('analysis_')">
      <!-- 用户自定义的条目 -->
      <template v-if="node.id.startsWith('custom-')">
        <p class="menu-title">条目操作</p>
        <div @click="handleCustomRelatedAction('rename')" class="context-menu-item"><i class="fa-solid fa-pencil w-4 text-center"></i><span>重命名</span></div>
        <div class="context-menu-divider"></div>
        <div @click="handleCustomRelatedAction('delete')" class="context-menu-item danger"><i class="fa-solid fa-trash-can w-4 text-center"></i><span>删除</span></div>
        <div class="context-menu-divider"></div>
      </template>
      <p class="menu-title">AI 助手</p>
      <div @click="handleAIAction('分析', node)" class="context-menu-item"><i class="fa-solid fa-magnifying-glass-chart w-4 text-center text-[#F59E0B]"></i><span>分析内容</span></div>
      <div @click="handleAIAction('续写', node)" class="context-menu-item"><i class="fa-solid fa-wand-magic-sparkles w-4 text-center text-[#4B5563]"></i><span>生成内容</span></div>
    </template>

    <!-- "相关"中的根节点 -->
    <template v-else-if="node?.type === 'root'">
      <!-- 设定根节点 -->
      <template v-if="node.id === 'settings'">
        <p class="menu-title">内容管理</p>
        <div @click="handleSettingsAction('newGroup')" class="context-menu-item"><i class="fa-solid fa-folder-plus w-4 text-center"></i><span>新建分组</span></div>
        <div @click="handleSettingsAction('newItem')" class="context-menu-item"><i class="fa-solid fa-plus w-4 text-center"></i><span>新建条目</span></div>
      </template>
      <!-- 剧情/分析根节点 -->
      <template v-else-if="node.id === 'plot' || node.id === 'analysis'">
        <p class="menu-title">内容管理</p>
        <div @click="handleCustomRelatedAction('newItem')" class="context-menu-item"><i class="fa-solid fa-plus w-4 text-center"></i><span>新建自定义条目</span></div>
      </template>
    </template>

    <!-- "相关"中的分组或设定条目 -->
    <template v-else-if="node">
      <template v-if="node.type === 'group' || node.type.endsWith('_item')">
        <p class="menu-title">内容管理</p>
        <div v-if="node.type === 'group'" @click="handleSettingsAction('newItem')" class="context-menu-item"><i class="fa-solid fa-plus w-4 text-center"></i><span>新建条目</span></div>
        <div class="context-menu-divider"></div>
        <p class="menu-title">节点操作</p>
        <div @click="handleSettingsAction('rename')" class="context-menu-item"><i class="fa-solid fa-pencil w-4 text-center"></i><span>重命名</span></div>
        <div class="context-menu-divider"></div>
        <div @click="handleSettingsAction('delete')" class="context-menu-item danger"><i class="fa-solid fa-trash-can w-4 text-center"></i><span>删除</span></div>
      </template>
    </template>

  </div>
</template>

<script setup lang="ts">
import { ref, onMounted, onBeforeUnmount } from 'vue';
import type { TreeNode } from './TreeView.vue';
import { useAITaskStore } from '@/novel/editor/stores/aiTaskStore';
import { useEditorStore } from '@/novel/editor/stores/editorStore';
import { useDirectoryStore } from '@/novel/editor/stores/directoryStore';
import { useRelatedContentStore } from '@/novel/editor/stores/relatedContentStore';
import { useNotesStore } from '@/novel/editor/stores/notesStore';
import { useContextMenuStore } from '@/novel/context_preview/stores/contextPreviewStore';

const aiTaskStore = useAITaskStore();
const editorStore = useEditorStore();
const directoryStore = useDirectoryStore();
const relatedContentStore = useRelatedContentStore();
const notesStore = useNotesStore();
const contextPreviewStore = useContextMenuStore();

const visible = ref(false);
const position = ref({ x: 0, y: 0 });
const node = ref<TreeNode | null>(null);

const show = (event: MouseEvent, targetNode: TreeNode) => {
  node.value = targetNode;
  visible.value = true;
  position.value.x = event.clientX;
  position.value.y = event.clientY;
};

const hide = () => {
  visible.value = false;
  node.value = null;
};

const handleAIAction = (taskType: '续写' | '润色' | '分析', targetNode: TreeNode, isBatch = false) => {
  if (!targetNode) return;

  hide();

  if (isBatch && targetNode.type === 'volume' && 'chapters' in targetNode.originalData) {
    aiTaskStore.startBatchTaskForVolume(taskType, targetNode.originalData);
  } else {
    editorStore.setActiveItem(targetNode.id);
    setTimeout(() => {
      const activeItem = editorStore.activeItem;
      if (!activeItem || activeItem.id !== targetNode.id) {
        console.warn('Active item did not update as expected.');
        return;
      }

      if (editorStore.uiState.needsPreview) {
        contextPreviewStore.show({
          type: taskType,
          targetItemId: activeItem.id,
          title: activeItem.title
        });
      } else {
        aiTaskStore.startNewTask(taskType, activeItem.id);
      }
    }, 50);
  }
}

const handleAction = (action: 'newChapter' | 'newVolume' | 'rename' | 'delete') => {
  if (!node.value) return;
  const nodeId = node.value.id;

  switch (action) {
    case 'newChapter': directoryStore.addChapterToVolume(nodeId); break;
    case 'newVolume': directoryStore.addNewVolume(); break;
    case 'rename': editorStore.setEditingNodeId(nodeId); break;
    case 'delete': directoryStore.deleteNode(nodeId); break;
  }
  hide();
};

const handleSettingsAction = (action: 'newGroup' | 'newItem' | 'rename' | 'delete') => {
  if (!node.value) return;
  const nodeId = node.value.id;

  switch (action) {
    case 'newGroup': relatedContentStore.addRelatedNode(nodeId, 'group'); break;
    case 'newItem': relatedContentStore.addRelatedNode(nodeId, 'item'); break;
    case 'rename': editorStore.setEditingNodeId(nodeId); break;
    case 'delete': relatedContentStore.deleteRelatedNode(nodeId); break;
  }
  hide();
};

const handleCustomRelatedAction = (action: 'newItem' | 'rename' | 'delete') => {
  if (!node.value) return;
  const nodeId = node.value.id;

  switch(action) {
    case 'newItem':
      relatedContentStore.addCustomRelatedNode(nodeId as 'plot' | 'analysis');
      break;
    case 'rename':
      editorStore.setEditingNodeId(nodeId);
      break;
    case 'delete':
      relatedContentStore.deleteCustomRelatedNode(nodeId);
      break;
  }
  hide();
};

const handleNoteAction = (action: 'rename' | 'delete') => {
  if (!node.value) return;
  const nodeId = node.value.id;

  switch (action) {
    case 'rename':
      editorStore.setEditingNodeId(nodeId);
      break;
    case 'delete':
      notesStore.deleteNote(nodeId);
      break;
  }
  hide();
};

onMounted(() => {
  window.addEventListener('click', hide);
});

onBeforeUnmount(() => {
  window.removeEventListener('click', hide);
});

defineExpose({ show, hide });
</script>

<style scoped>
.context-menu {
  position: fixed;
  z-index: 1000;
  background-color: white;
  border: 1px solid #e5e7eb;
  border-radius: 0.75rem;
  padding: 0.5rem;
  box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
  min-width: 14rem;
}
.context-menu-item {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  padding: 0.5rem 0.75rem;
  border-radius: 0.5rem;
  font-size: 0.875rem;
  color: #374151;
  cursor: pointer;
  user-select: none;
  transition: background-color 0.15s, color 0.15s;
}
.context-menu-item:hover {
  background-color: #f3f4f6;
}
.context-menu-item.danger:hover {
  background-color: #fee2e2;
  color: #b91c1c;
}
.context-menu-divider {
  height: 1px;
  background-color: #f3f4f6;
  margin: 0.5rem 0;
}
.menu-title {
  padding: 0.25rem 0.75rem;
  font-size: 0.75rem;
  color: #9CA3AF;
  font-weight: 500;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}
</style>

// =
// 文件: ..\src\novel\editor\components\sidebar\DirectoryTab.vue
//

// 文件: src\novel\editor\components\sidebar\DirectoryTab.vue
//

<template>
  <div class="directory-tab-container">
    <div class="header">
      <h3 class="title">章节大纲</h3>
      <div class="actions">
        <router-link to="/novel/manage/character-settings" class="action-btn" title="管理小说">
          <i class="fa-solid fa-gear fa-xs"></i>
        </router-link>
        <button @click="handleAddNewVolume" class="action-btn" title="添加新卷">
          <i class="fa-solid fa-folder-plus fa-xs"></i>
        </button>
        <button class="action-btn" title="折叠/展开全部">
          <i class="fa-solid fa-folder-tree fa-xs"></i>
        </button>
      </div>
    </div>

    <TreeView
        v-if="directoryTree.length > 0"
        :nodes="directoryTree"
        :active-node-id="editorStore.activeItemId"
        :expanded-node-ids="editorStore.uiState.expandedNodeIds"
        :editing-node-id="editorStore.editingNodeId"
        @select-node="handleSelectNode"
        @toggle-expansion="handleToggleExpansion"
        @context-menu="handleContextMenu"
        @commit-rename="handleCommitRename"
        @cancel-rename="handleCancelRename"
    />
    <div v-else class="p-4 text-sm text-gray-500">
      正在加载目录...
    </div>
  </div>
</template>

<script setup lang="ts">
import { computed } from 'vue';
import TreeView, { type TreeNode } from './TreeView.vue';
import { useEditorStore } from '@/novel/editor/stores/editorStore';
import { useDirectoryStore } from '@/novel/editor/stores/directoryStore';
import { getIconByNodeType } from '@/novel/editor/utils/iconUtils';

const emit = defineEmits<{
  (e: 'show-context-menu', payload: { node: TreeNode; event: MouseEvent }): void;
}>();

const editorStore = useEditorStore();
const directoryStore = useDirectoryStore();


const directoryTree = computed((): TreeNode[] => {
  return directoryStore.directoryData.map(volume => ({
    id: volume.id,
    title: volume.title,
    icon: getIconByNodeType(volume.type),
    type: 'volume',
    originalData: volume,
    children: volume.chapters.map(chapter => ({
      id: chapter.id,
      title: chapter.title,
      icon: getIconByNodeType(chapter.type),
      status: chapter.status,
      type: 'chapter',
      originalData: chapter,
      children: [],
    })),
  }));
});

const handleSelectNode = (id: string) => {
  editorStore.setActiveItem(id);
};

const handleToggleExpansion = (id:string) => {
  editorStore.toggleNodeExpansion(id);
};

const handleContextMenu = (payload: { node: TreeNode; event: MouseEvent }) => {
  emit('show-context-menu', payload);
};

const handleAddNewVolume = () => {
  directoryStore.addNewVolume();
};

const handleCommitRename = (payload: { nodeId: string; newTitle: string }) => {
  directoryStore.renameNode(payload.nodeId, payload.newTitle);
};

const handleCancelRename = () => {
  editorStore.setEditingNodeId(null);
};
</script>

<style scoped>
.directory-tab-container { padding: 1rem; display: flex; flex-direction: column; height: 100%; }
.header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.75rem; padding: 0 0.5rem; }
.title { font-size: 0.875rem; font-weight: 500; color: #4B5563; }
.actions { display: flex; align-items: center; gap: 0.25rem; }
.action-btn { width: 1.75rem; height: 1.75rem; display: flex; align-items: center; justify-content: center; color: #6B7280; border-radius: 0.375rem; transition: background-color 0.15s; }
.action-btn:hover { background-color: #E5E7EB; }
</style>

// =
// 文件: ..\src\novel\editor\components\sidebar\EditorInternalSidebar.vue
//

// 文件路径: src\novel\editor\components\sidebar\EditorInternalSidebar.vue

<template>
  <aside class="editor-internal-sidebar-container">
    <!-- Tabs for switching -->
    <div class="tabs-container">
      <div class="tabs tabs-bordered">
        <a
            v-for="tab in internalTabs"
            :key="tab.id"
            role="tab"
            :class="['tab', { 'tab-active text-blue-600': editorStore.uiState.activeInternalTab === tab.id }]"
            @click="editorStore.setActiveInternalTab(tab.id as 'directory' | 'related' | 'notes')"
        >
          <i :class="[tab.icon, 'mr-2']"></i>
          <span>{{ tab.name }}</span>
        </a>
      </div>
    </div>

    <!-- Content area for the active tab -->
    <div class="tab-content-container">
      <keep-alive>
        <component :is="activeTabComponent" @show-context-menu="showDirectoryContextMenu" />
      </keep-alive>
    </div>

    <!-- Directory Context Menu Component -->
    <DirectoryContextMenu ref="directoryContextMenuRef" />

  </aside>
</template>

<script setup lang="ts">
import { ref, computed, defineAsyncComponent } from 'vue';
import { useEditorStore } from '@/novel/editor/stores/editorStore';
import DirectoryContextMenu from './DirectoryContextMenu.vue';
import type { TreeNode } from './TreeView.vue';

const editorStore = useEditorStore();
const directoryContextMenuRef = ref<InstanceType<typeof DirectoryContextMenu> | null>(null);

const internalTabs = ref([
  { id: 'directory', name: '目录', icon: 'fa-solid fa-list-ul' },
  { id: 'related', name: '相关', icon: 'fa-solid fa-sitemap' },
  { id: 'notes', name: '笔记', icon: 'fa-solid fa-book-medical' },
]);

const tabComponents = {
  directory: defineAsyncComponent(() => import('./DirectoryTab.vue')),
  related: defineAsyncComponent(() => import('./RelatedTab.vue')),
  notes: defineAsyncComponent(() => import('./NotesTab.vue')),
};

const activeTabComponent = computed(() => {
  return tabComponents[editorStore.uiState.activeInternalTab] || null;
});

const showDirectoryContextMenu = (payload: { node: TreeNode, event: MouseEvent }) => {
  directoryContextMenuRef.value?.show(payload.event, payload.node);
};
</script>

<style scoped>
.editor-internal-sidebar-container {
  width: 20rem; /* 320px */
  border-right: 1px solid #F3F4F6; /* border-gray-100 */
  display: flex;
  flex-direction: column;
  flex-shrink: 0;
  background-color: #FAFBFC;
  position: relative;
}
.tabs-container {
  padding: 0 1rem;
  padding-top: 1rem;
  border-bottom: 1px solid #F3F4F6;
  flex-shrink: 0;
}
.tab {
  --tab-bg: transparent;
  padding-left: 1rem;
  padding-right: 1rem;
  display: flex;
  align-items: center;
}
.tab-content-container {
  flex-grow: 1;
  overflow-y: auto;
  position: relative;
}
.tab-content-container::-webkit-scrollbar { width: 6px; }
.tab-content-container::-webkit-scrollbar-track { background: transparent; }
.tab-content-container::-webkit-scrollbar-thumb { background: #D1D5DB; border-radius: 3px; }
.tab-content-container::-webkit-scrollbar-thumb:hover { background: #9CA3AF; }
</style>

// =
// 文件: ..\src\novel\editor\components\sidebar\NotesTab.vue
//

// 文件: src\novel\editor\components\sidebar\NotesTab.vue
//

<template>
  <div class="notes-tab-container">
    <div class="header">
      <h3 class="title">章节笔记</h3>
      <button @click="handleAddNewNote" class="action-btn" title="新建笔记"><i class="fa-solid fa-plus fa-xs"></i></button>
    </div>
    <div class="notes-list">
      <div
          v-for="(note, index) in notesStore.notes"
          :key="note.id"
          @click="editorStore.setActiveItem(note.id)"
          @contextmenu.prevent="handleContextMenu(note, $event)"
          class="note-item"
          :class="{ 'active': editorStore.activeItemId === note.id }"
      >
        <div class="note-header">
          <template v-if="editingNodeId === note.id">
            <input
                :ref="el => { if (el) renameInputs[index] = el as HTMLInputElement }"
                type="text"
                :value="note.title"
                class="rename-input"
                @blur="handleCommitRename($event, note.id)"
                @keydown.enter.prevent="handleCommitRename($event, note.id)"
                @keydown.esc.prevent="handleCancelRename"
                @click.stop
            />
          </template>
          <template v-else>
            <p class="note-title">{{ note.title }}</p>
          </template>
          <span class="note-timestamp">{{ note.timestamp }}</span>
        </div>
        <p class="note-content">{{ note.content.replace(/<[^>]+>/g, '') }}</p>
      </div>
    </div>
    <div class="quick-add-footer">
      <input
          type="text"
          placeholder="快速添加新笔记..."
          class="quick-add-input"
          v-model="quickAddValue"
          @keydown.enter="handleQuickAdd"
      >
      <button @click="handleQuickAdd" class="quick-add-btn"><i class="fa-solid fa-paper-plane fa-sm"></i></button>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, computed, watch, nextTick, onBeforeUpdate } from 'vue';
import { useEditorStore } from '@/novel/editor/stores/editorStore';
import { useNotesStore } from '@/novel/editor/stores/notesStore';
import type { NoteItem } from '@/novel/editor/types';
import type { TreeNode } from './TreeView.vue';
import { getIconByNodeType } from '@/novel/editor/utils/iconUtils';


const emit = defineEmits<{
  (e: 'show-context-menu', payload: { node: TreeNode; event: MouseEvent }): void;
}>();

const editorStore = useEditorStore();
const notesStore = useNotesStore();
const quickAddValue = ref('');
const renameInputs = ref<HTMLInputElement[]>([]);

const editingNodeId = computed(() => editorStore.editingNodeId);

// 确保重命名输入框在变为可见时能自动聚焦
watch(editingNodeId, (newId) => {
  if (newId && newId.startsWith('note-')) {
    nextTick(() => {
      const noteIndex = notesStore.notes.findIndex(n => n.id === newId);
      if (noteIndex !== -1 && renameInputs.value[noteIndex]) {
        renameInputs.value[noteIndex].focus();
        renameInputs.value[noteIndex].select();
      }
    });
  }
});

onBeforeUpdate(() => {
  renameInputs.value = [];
});

const handleAddNewNote = () => {
  notesStore.addNote('新建笔记');
};

const handleQuickAdd = () => {
  const value = quickAddValue.value.trim();
  if (!value) return;

  notesStore.addNote(value);
  quickAddValue.value = '';
};

// [重构] 确保传递给上下文菜单的是标准化的 TreeNode 对象
const handleContextMenu = (note: NoteItem, event: MouseEvent) => {
  const nodePayload: TreeNode = {
    id: note.id,
    title: note.title,
    type: note.type,
    icon: getIconByNodeType(note.type),
    originalData: note
  };
  emit('show-context-menu', { node: nodePayload, event });
}

const handleCommitRename = (event: Event, nodeId: string) => {
  const input = event.target as HTMLInputElement;
  const newTitle = input.value.trim();
  if(newTitle) {
    notesStore.renameNote(nodeId, newTitle);
  }
  handleCancelRename();
};

const handleCancelRename = () => {
  editorStore.setEditingNodeId(null);
};

</script>

<style scoped>
.notes-tab-container { padding: 1rem; display: flex; flex-direction: column; height: 100%; }
.header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.75rem; padding: 0 0.5rem; flex-shrink: 0; }
.title { font-size: 0.875rem; font-weight: 500; color: #4B5563; }
.action-btn { width: 1.75rem; height: 1.75rem; display: flex; align-items: center; justify-content: center; color: #6B7280; border-radius: 0.375rem; transition: background-color 0.15s; }
.action-btn:hover { background-color: #E5E7EB; }
.notes-list { flex-grow: 1; space-y: 0.5rem; overflow-y: auto; padding-right: 4px; }
.note-item { padding: 0.75rem; border-radius: 0.5rem; cursor: pointer; transition: all 0.2s; border: 1px solid transparent; background-color: #FFFFFF; }
.note-item:hover { background-color: #F9FAFB; border-color: #F3F4F6; }
.note-item.active { background-color: #FEFCE8; border-color: #FDE047; }
.note-header { display: flex; justify-content: space-between; align-items: flex-start; gap: 0.5rem; }
.note-title { font-size: 0.875rem; font-weight: 500; color: #1F2937; flex-grow: 1; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
.note-timestamp { font-size: 0.75rem; color: #CA8A04; flex-shrink: 0; }
.note-content { font-size: 0.75rem; color: #4B5563; margin-top: 0.375rem; line-height: 1.6; display: -webkit-box; -webkit-box-orient: vertical; -webkit-line-clamp: 2; overflow: hidden; }
.quick-add-footer { margin-top: 1rem; padding-top: 1rem; border-top: 1px solid #F3F4F6; display: flex; gap: 0.5rem; flex-shrink: 0; }
.quick-add-input { flex-grow: 1; background: white; border: 1px solid #D1D5DB; border-radius: 0.5rem; padding: 0.4rem 0.75rem; font-size: 0.875rem; outline: none; transition: all 0.2s; }
.quick-add-input:focus { border-color: #3B82F6; box-shadow: 0 0 0 1px #3B82F6; }
.quick-add-btn { flex-shrink: 0; width: 2rem; height: 2rem; background-color: #4B5563; color: white; border-radius: 0.5rem; transition: background-color 0.2s; }
.quick-add-btn:hover { background-color: #374151; }
.rename-input {
  flex-grow: 1;
  background-color: white;
  border: 1px solid #3B82F6;
  border-radius: 4px;
  padding: 2px 4px;
  font-size: 0.875rem;
  font-weight: 500;
  color: #1F2937;
  outline: none;
  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);
}
</style>

// =
// 文件: ..\src\novel\editor\components\sidebar\RelatedTab.vue
//

// 文件: src\novel\editor\components\sidebar\RelatedTab.vue
//

<template>
  <div class="related-tab-container">
    <div class="header">
      <h3 class="title">相关内容</h3>
      <div class="actions">
        <button @click="handleAddNewCustomPlot" class="action-btn" title="新建自定义剧情">
          <i class="fa-solid fa-feather-pointed fa-xs"></i>
        </button>
        <button @click="handleAddNewCustomAnalysis" class="action-btn" title="新建自定义分析">
          <i class="fa-solid fa-magnifying-glass-chart fa-xs"></i>
        </button>
      </div>
    </div>
    <div class="search-bar">
      <i class="fa-solid fa-magnifying-glass search-icon"></i>
      <input type="text" placeholder="搜索相关内容..." class="search-input">
    </div>

    <TreeView
        v-if="relatedTree.length > 0"
        :nodes="relatedTree"
        :active-node-id="editorStore.activeItemId"
        :expanded-node-ids="editorStore.uiState.expandedRelatedNodeIds"
        :editing-node-id="editorStore.editingNodeId"
        @select-node="handleSelectNode"
        @toggle-expansion="handleToggleExpansion"
        @context-menu="handleContextMenu"
        @commit-rename="handleCommitRename"
        @cancel-rename="handleCancelRename"
    />
    <div v-else class="p-4 text-sm text-gray-500">
      没有相关内容。
    </div>
  </div>
</template>

<script setup lang="ts">
import { computed } from 'vue';
import TreeView, { type TreeNode } from './TreeView.vue';
import { useEditorStore } from '@/novel/editor/stores/editorStore';
import { useRelatedContentStore } from '@/novel/editor/stores/relatedContentStore';
import type { RelatedTree } from '@/novel/editor/types';

const emit = defineEmits<{
  (e: 'show-context-menu', payload: { node: TreeNode; event: MouseEvent }): void;
}>();

const editorStore = useEditorStore();
const relatedContentStore = useRelatedContentStore();


const relatedTree = computed((): TreeNode[] => {
  const mapNode = (node: RelatedTree): TreeNode => ({
    id: node.id,
    title: node.title,
    icon: node.icon,
    type: node.type,
    originalData: node, // 保留原始数据引用
    children: node.children ? node.children.map(mapNode) : []
  });
  return relatedContentStore.relatedData.map(mapNode);
});

// --- 事件处理 ---

const handleSelectNode = (id: string) => {
  const { node } = editorStore.findItemById(id);
  // 如果节点没有内容属性，点击行为变为展开/折叠，而不是激活
  if (node && 'content' in node && node.content !== undefined) {
    editorStore.setActiveItem(id);
  } else {
    editorStore.toggleRelatedNodeExpansion(id);
  }
};

const handleToggleExpansion = (id: string) => {
  editorStore.toggleRelatedNodeExpansion(id);
};

const handleContextMenu = (payload: { node: TreeNode; event: MouseEvent }) => {
  emit('show-context-menu', payload);
};

const handleCommitRename = (payload: { nodeId: string; newTitle: string }) => {
  if (payload.nodeId.startsWith('custom-')) {
    relatedContentStore.renameCustomRelatedNode(payload.nodeId, payload.newTitle);
  } else {
    relatedContentStore.renameRelatedNode(payload.nodeId, payload.newTitle);
  }
};

const handleCancelRename = () => {
  editorStore.setEditingNodeId(null);
};

const handleAddNewCustomPlot = () => {
  relatedContentStore.addCustomRelatedNode('plot');
};

const handleAddNewCustomAnalysis = () => {
  relatedContentStore.addCustomRelatedNode('analysis');
};

</script>

<style scoped>
.related-tab-container { padding: 1rem; overflow-y: auto; height: 100%; display: flex; flex-direction: column; }
.header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.75rem; padding: 0 0.5rem; flex-shrink: 0; }
.title { font-size: 0.875rem; font-weight: 500; color: #4B5563; }
.actions { display: flex; align-items: center; gap: 0.25rem; }
.action-btn { width: 1.75rem; height: 1.75rem; display: flex; align-items: center; justify-content: center; color: #6B7280; border-radius: 0.375rem; transition: background-color 0.15s; }
.action-btn:hover { background-color: #E5E7EB; }
.search-bar { position: relative; margin-bottom: 1rem; flex-shrink: 0; }
.search-icon { position: absolute; left: 0.75rem; top: 50%; transform: translateY(-50%); color: #9CA3AF; font-size: 0.875rem; }
.search-input { width: 100%; background: white; border: 1px solid #D1D5DB; border-radius: 0.5rem; padding: 0.4rem 0.75rem 0.4rem 2.25rem; font-size: 0.875rem; outline: none; transition: all 0.2s; }
.search-input:focus { border-color: #3B82F6; box-shadow: 0 0 0 1px #3B82F6; }
</style>

// =
// 文件: ..\src\novel\editor\components\sidebar\TreeView.vue
//

<template>
  <ul class="tree-view-list">
    <li v-for="node in nodes" :key="node.id" class="tree-view-item">
      <!-- 节点自身的渲染 -->
      <div
          class="node-content"
          :class="{ 'active': node.id === activeNodeId }"
          @click="handleNodeClick(node.id)"
          @contextmenu.prevent="emit('context-menu', { node, event: $event })"
      >
        <!-- 展开/折叠图标 -->
        <div
            class="expand-icon"
            :class="{ 'invisible': !node.children || node.children.length === 0 }"
            @click.stop="emit('toggle-expansion', node.id)"
        >
          <i class="fa-solid fa-chevron-right transition-transform" :class="{ 'rotate-90': expandedNodeIds.has(node.id) }"></i>
        </div>

        <!-- 节点类型图标 -->
        <div class="node-type-icon">
          <i :class="node.icon"></i>
        </div>

        <!-- 节点标题或重命名输入框 -->
        <template v-if="editingNodeId === node.id">
          <input
              ref="renameInput"
              type="text"
              :value="node.title"
              class="rename-input"
              @blur="handleRenameCommit($event, node.id)"
              @keydown.enter.prevent="handleRenameCommit($event, node.id)"
              @keydown.esc.prevent="handleRenameCancel"
              @click.stop
          />
        </template>
        <template v-else>
          <span class="node-title truncate">{{ node.title }}</span>
        </template>

        <!-- 节点状态徽章 (可选) -->
        <span v-if="node.status" class="node-status-badge">
          {{ node.status === 'editing' ? '编辑中' : '' }}
        </span>
      </div>

      <!-- 递归渲染子节点 -->
      <div v-if="node.children && node.children.length > 0" class="children-container">
        <TreeView
            v-show="expandedNodeIds.has(node.id)"
            :nodes="node.children"
            :active-node-id="activeNodeId"
            :expanded-node-ids="expandedNodeIds"
            :editing-node-id="editingNodeId"
            @select-node="emit('select-node', $event)"
            @toggle-expansion="emit('toggle-expansion', $event)"
            @context-menu="emit('context-menu', $event)"
            @commit-rename="emit('commit-rename', $event)"
            @cancel-rename="emit('cancel-rename')"
        />
      </div>
    </li>
  </ul>
</template>

<script setup lang="ts">
import { ref, watch, nextTick } from 'vue';
import type { PropType } from 'vue';

// --- 类型定义 ---
export interface TreeNode {
  id: string;
  title: string;
  icon: string;
  status?: string;
  type: string;
  children?: TreeNode[];
  originalData: any;
}

// --- Props & Emits ---
const props = defineProps({
  nodes: {
    type: Array as PropType<TreeNode[]>,
    required: true,
  },
  activeNodeId: {
    type: String as PropType<string | null>,
    default: null,
  },
  expandedNodeIds: {
    type: Set as PropType<Set<string>>,
    required: true,
  },
  editingNodeId: {
    type: String as PropType<string | null>,
    default: null,
  },
});

const emit = defineEmits<{
  (e: 'select-node', id: string): void;
  (e: 'toggle-expansion', id: string): void;
  (e: 'context-menu', payload: { node: TreeNode, event: MouseEvent }): void;
  (e: 'commit-rename', payload: { nodeId: string, newTitle: string }): void;
  (e: 'cancel-rename'): void;
}>();

const renameInput = ref<HTMLInputElement[] | null>(null);

watch(() => props.editingNodeId, (newId, oldId) => {
  if (newId && newId !== oldId) {
    nextTick(() => {
      if (renameInput.value && renameInput.value.length > 0) {
        renameInput.value[0].focus();
        renameInput.value[0].select();
      }
    });
  }
});

const handleNodeClick = (id: string) => {
  if (props.editingNodeId === id) return;
  emit('select-node', id);
};

const handleRenameCommit = (event: Event, nodeId: string) => {
  const input = event.target as HTMLInputElement;
  const newTitle = input.value;
  emit('commit-rename', { nodeId, newTitle });
};

const handleRenameCancel = () => {
  emit('cancel-rename');
};

</script>

<style scoped>
.tree-view-list {
  list-style: none;
  padding: 0;
  margin: 0;
  width: 100%;
}
.node-content {
  display: flex;
  align-items: center;
  gap: 0.5rem; /* 8px */
  padding: 0.5rem 0.75rem; /* 8px 12px */
  border-radius: 0.5rem; /* 8px */
  cursor: pointer;
  transition: background-color 0.15s ease-in-out, color 0.15s ease-in-out;
  font-size: 0.875rem; /* 14px */
  color: #374151; /* text-gray-700 */
  user-select: none;
}
.node-content:hover {
  background-color: #F3F4F6; /* hover:bg-gray-100 */
}
.node-content.active {
  background-color: #E0E7FF; /* bg-indigo-100 */
  color: #3730A3; /* text-indigo-800 */
  font-weight: 500;
}
.expand-icon {
  width: 1rem; /* 16px */
  height: 1rem; /* 16px */
  display: flex;
  align-items: center;
  justify-content: center;
  color: #9CA3AF; /* text-gray-400 */
  flex-shrink: 0;
}
.expand-icon.invisible {
  visibility: hidden;
}
.node-type-icon {
  width: 1.25rem; /* 20px */
  display: flex;
  align-items: center;
  justify-content: center;
  color: #6B7280; /* text-gray-500 */
}
.node-content.active .node-type-icon {
  color: #4338CA; /* active:text-indigo-700 */
}
.node-title {
  flex-grow: 1;
}
.node-status-badge {
  margin-left: auto;
  font-size: 0.75rem; /* 12px */
  padding: 0.125rem 0.5rem; /* 2px 8px */
  background-color: #DCFCE7; /* bg-green-100 */
  color: #166534; /* text-green-800 */
  border-radius: 9999px;
  font-weight: 500;
}
.children-container {
  padding-left: 1.5rem;
  margin-left: 0.5rem;
  border-left: 1px solid #E5E7EB;
}
.rename-input {
  flex-grow: 1;
  background-color: white;
  border: 1px solid #3B82F6;
  border-radius: 4px;
  padding: 1px 4px;
  font-size: 0.875rem;
  color: #1F2937;
  outline: none;
  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);
}
</style>

// =
// 文件: ..\src\novel\editor\layouts\NovelEditorLayout.vue
//

// 文件路径: src\novel\editor\layouts\NovelEditorLayout.vue

<template>
  <div class="h-screen w-screen flex bg-white design-frame-container">
    <div class="design-frame">
      <!-- 顶部导航栏: 严格遵循UI设计稿 -->
      <header class="h-[56px] bg-white border-b border-gray-100 flex items-center px-6 flex-shrink-0">
        <div class="flex items-center gap-2 flex-1">
          <!-- 返回链接指向小说管理台 -->
          <router-link to="/novel/dashboard" class="flex items-center gap-2 text-gray-500 hover:text-gray-800 transition-colors p-2 -ml-2 rounded-lg">
            <i class="fa-solid fa-chevron-left w-4 h-4"></i>
            <span>返回</span>
          </router-link>
          <span class="text-gray-300">/</span>
          <!-- 静态小说标题 -->
          <span class="font-medium text-gray-800 text-sm">星际漫游者</span>
        </div>
        <div class="flex items-center gap-4">
          <button class="p-2 text-gray-500 hover:bg-gray-100 rounded-lg transition-colors">
            <i class="fa-solid fa-search w-5 h-5"></i>
          </button>
          <button class="p-2 text-gray-500 hover:bg-gray-100 rounded-lg transition-colors relative">
            <i class="fa-solid fa-bell w-5 h-5"></i>
            <span class="absolute top-1.5 right-1.5 w-2 h-2 bg-red-500 rounded-full border border-white"></span>
          </button>
          <div class="ml-2 flex items-center gap-3">
            <img src="https://i.pravatar.cc/150?u=creator" alt="Creator Avatar" class="w-9 h-9 rounded-full">
            <div>
              <p class="text-sm font-medium text-[#374151]">创作者</p>
              <p class="text-xs text-[#9CA3AF]">在线</p>
            </div>
          </div>
        </div>
      </header>

      <!-- 使用 <router-view /> 来渲染子路由对应的组件 (EditorWorkspaceView) -->
      <div class="h-[calc(100%-56px)]">
        <router-view />
      </div>
    </div>

    <!-- 全局组件 -->
    <GlobalAIAssistant />
    <!-- [重构] 引入解耦后的上下文预览模块视图 -->
    <ContextPreviewView />
  </div>
</template>

<script setup lang="ts">
import GlobalAIAssistant from '@/novel/shared/components/GlobalAIAssistant/index.vue';
// [重构] 引入新模块的视图，而不是 editor 内部的组件
import ContextPreviewView from '@/novel/context_preview/views/ContextPreviewView.vue';
import '@/novel/assets/styles/main.css';
</script>

<style scoped>
.design-frame-container {
  padding: 2rem;
  background-color: #f5f5f7;
}
.design-frame {
  width: 100%;
  height: 100%;
  max-width: 1800px;
  margin: auto;
  background: white;
  border-radius: 16px;
  overflow: hidden;
  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.08);
  display: flex;
  flex-direction: column;
}
</style>

// =
// 文件: ..\src\novel\editor\layouts\NovelHistoryLayout.vue
//

<template>
  <div class="h-screen w-screen flex bg-white design-frame-container">
    <div class="design-frame">
      <!-- 顶部导航栏 -->
      <header class="h-[56px] bg-white border-b border-gray-100 flex items-center px-6 flex-shrink-0">
        <div class="flex items-center gap-2 flex-1">
          <!-- 返回链接，可以指向小说管理首页 -->
          <router-link to="/novel/editor" class="flex items-center gap-2 text-gray-500 hover:text-gray-800 transition-colors p-2 -ml-2 rounded-lg">
            <i class="fa-solid fa-chevron-left w-4 h-4"></i>
            <span>返回</span>
          </router-link>
          <span class="text-gray-300">/</span>
          <!-- 静态标题 -->
          <span class="font-medium text-gray-800 text-sm">版本历史</span>
        </div>
        <div class="flex items-center gap-4">
          <button class="p-2 text-gray-500 hover:bg-gray-100 rounded-lg transition-colors">
            <i class="fa-solid fa-search w-5 h-5"></i>
          </button>
          <button class="p-2 text-gray-500 hover:bg-gray-100 rounded-lg transition-colors relative">
            <i class="fa-solid fa-bell w-5 h-5"></i>
            <span class="absolute top-1.5 right-1.5 w-2 h-2 bg-red-500 rounded-full border border-white"></span>
          </button>
          <div class="ml-2 flex items-center gap-3">
            <img src="https://i.pravatar.cc/150?u=creator" alt="Creator Avatar" class="w-9 h-9 rounded-full">
            <div>
              <p class="text-sm font-medium text-[#374151]">创作者</p>
              <p class="text-xs text-[#9CA3AF]">在线</p>
            </div>
          </div>
        </div>
      </header>

      <!-- 内容区域 -->
      <div class="h-[calc(100%-56px)]">
        <router-view />
      </div>
    </div>
    <GlobalAIAssistant />
    <AITaskConfigModal />
  </div>
</template>

<script setup lang="ts">
import GlobalAIAssistant from '@novel/shared/components/GlobalAIAssistant/index.vue';
import AITaskConfigModal from '@novel/shared/components/GlobalAIAssistant/AITaskConfigModal.vue';
import '@novel/assets/styles/main.css';
</script>

<style scoped>
.design-frame-container {
  padding: 2rem;
  background-color: #f5f5f7;
}
.design-frame {
  width: 100%;
  height: 100%;
  max-width: 1800px;
  margin: auto;
  background: white;
  border-radius: 16px;
  overflow: hidden;
  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.08);
  display: flex;
  flex-direction: column;
}
</style>

// =
// 文件: ..\src\novel\editor\router.ts
//

import type { RouteRecordRaw } from 'vue-router'

export const editorRoutes: Array<RouteRecordRaw> = [
    {
        path: '/novel/editor',
        component: () => import('@/novel/editor/layouts/NovelEditorLayout.vue'),
        children: [
            {
                path: '',
                name: 'NovelEditorWorkspace',
                component: () => import('@/novel/editor/views/EditorWorkspaceView.vue'),
                meta: { title: '小说编辑器' }
            }
        ]
    }
]

// =
// 文件: ..\src\novel\editor\stores\aiTaskStore.ts
//

// 文件路径: src\novel\editor\stores\aiTaskStore.ts

import { defineStore } from 'pinia'
import { ref, nextTick } from 'vue'
import { useEditorStore } from './editorStore'
import type { AITask, AITaskStatus, Volume } from '@/novel/editor/types';

export const useAITaskStore = defineStore('aiTask', () => {
    const tasks = ref<AITask[]>([]);

    const _simulateAIStream = (taskId: string) => {
        const task = tasks.value.find(t => t.id === taskId);
        if (!task || task.status !== 'pending') return;

        const editorStore = useEditorStore();
        task.status = 'processing';
        task.generatedContent = '';

        const mockResponses = {
            '续写': "警报的尖啸犹如一把利刃，划破了卡尔文短暂的假寐。他猛然挺直身躯，猩红的警示灯在他眼中投下不祥的光晕。'发现引力异常，' 艾拉的合成音毫无波澜，却字字千钧，'我们正迫近一个理论中的时空奇点——跃迁点。根据数据库推演，这或许是返回太阳系的唯一路径。'",
            '润色': "控制台的警报声，如同一道惊雷，将卡尔文从混沌的浅眠中劈醒。他霍然坐直，闪烁的红色警告灯在视网膜上烙下灼热的印记。",
            '分析': "从文本来看，主角卡尔文此刻的情绪是震惊与希望的混合体。'浅眠'暗示了他长期的精神疲惫，而警报则是一个外部冲突的触发器。'回家'是核心动机，为后续情节发展提供了强大的驱动力。建议在后续描写中，可以加入更多关于他过去的回忆闪现，以丰富人物形象。",
        };

        const mockResponseText = mockResponses[task.type];
        const words = mockResponseText.split('');
        let wordIndex = 0;
        const willFail = Math.random() < 0.1;

        const intervalId = setInterval(() => {
            if (wordIndex < words.length) {
                task.generatedContent += words[wordIndex];
                wordIndex++;
                if (willFail && wordIndex > words.length / 2) {
                    clearInterval(intervalId);
                    task.status = 'failed';
                    task.error = '生成超时，请检查网络后重试。';
                    return;
                }
            } else {
                clearInterval(intervalId);
                task.status = 'completed';
                if (!editorStore.uiState.needsPreview) {
                    editorStore.appendContentToItem(task.targetItemId, task.generatedContent, true);
                    task.status = 'applied';
                }
            }
        }, 30);
    }

    const _processQueue = () => {
        const pendingTask = tasks.value.find(t => t.status === 'pending');
        if (pendingTask) {
            _simulateAIStream(pendingTask.id);
        }
    };

    const _addTask = (taskType: '润色' | '续写' | '分析', targetItemId: string) => {
        const editorStore = useEditorStore();
        const { node: item } = editorStore.findItemById(targetItemId);

        if (!item || !('content' in item)) {
            console.error("无法启动AI任务：找不到目标文档或文档没有内容属性。", targetItemId);
            return null;
        }

        const newTask: AITask = {
            id: `task_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            title: `${taskType}《${item.title}》`,
            type: taskType,
            targetItemId: targetItemId,
            status: 'pending',
            originalContent: item.content || '',
            generatedContent: '',
            createdAt: new Date(),
        };

        tasks.value.unshift(newTask);
        return newTask;
    };

    const startNewTask = (taskType: '润色' | '续写' | '分析', targetItemId: string) => {
        const task = _addTask(taskType, targetItemId);
        if (task) {
            nextTick(_processQueue);
        }
    };

    const startBatchTaskForVolume = (taskType: '润色' | '续写' | '分析', volume: Volume) => {
        if (!volume || !volume.chapters) return;

        for (const chapter of volume.chapters) {
            _addTask(taskType, chapter.id);
        }
        nextTick(_processQueue);
    };

    const applyChanges = (taskId: string) => {
        const task = tasks.value.find(t => t.id === taskId);
        if (task && task.status === 'completed') {
            const editorStore = useEditorStore();
            editorStore.appendContentToItem(task.targetItemId, task.generatedContent, false);
            task.status = 'applied';
        }
    };

    const retryTask = (taskId: string) => {
        const task = tasks.value.find(t => t.id === taskId);
        if (task && task.status === 'failed') {
            task.status = 'pending';
            task.error = undefined;
            task.generatedContent = '';
            nextTick(_processQueue);
        }
    };

    const clearAllTasks = () => {
        tasks.value = [];
    };

    return {
        tasks,
        startNewTask,
        startBatchTaskForVolume,
        clearAllTasks,
        applyChanges,
        retryTask,
    }
});

// =
// 文件: ..\src\novel\editor\stores\directoryStore.ts
//

// 文件: src\novel\editor\stores\directoryStore.ts
//

import { defineStore } from 'pinia';
import { ref } from 'vue';
import type { Volume, Chapter } from '@/novel/editor/types';
import { useEditorStore } from './editorStore';

type DirectoryNode = Volume | Chapter;

export const useDirectoryStore = defineStore('directory', () => {
    // --- State ---
    const directoryData = ref<Volume[]>([]);

    // --- Private Helpers ---

    /**
     * 递归查找节点。
     * @param nodes - 要搜索的节点数组。
     * @param nodeId - 目标节点ID。
     * @returns 包含找到的节点、其父节点和同级节点的对​​象，如果未找到则返回null。
     */
    const _findNodeRecursive = (nodes: DirectoryNode[], nodeId: string): { node: DirectoryNode; parent: Volume | null; siblings: DirectoryNode[] } | null => {
        for (const node of nodes) {
            if (node.id === nodeId) {
                // 在顶层（卷）中找到
                return { node, parent: null, siblings: nodes };
            }
            if (node.type === 'volume' && node.chapters) {
                // 在子节点中查找
                const chapterResult = node.chapters.find(c => c.id === nodeId);
                if (chapterResult) {
                    return { node: chapterResult, parent: node, siblings: node.chapters };
                }
            }
        }
        return null;
    };


    // --- Actions ---

    /**
     * 根据ID查找目录中的节点（卷或章节）。
     * @param nodeId - 目标节点ID。
     */
    const findNodeById = (nodeId: string) => {
        return _findNodeRecursive(directoryData.value, nodeId);
    };

    /**
     * 获取并设置小说的目录数据。
     */
    const fetchDirectoryData = (data: Volume[]) => {
        directoryData.value = data;
    };

    /**
     * 更新指定ID的章节内容，并同步标题和字数。
     * @param nodeId - 目标章节ID。
     * @param content - 新的内容。
     */
    const updateChapterContent = (nodeId: string, content: string) => {
        const result = findNodeById(nodeId);
        if (result && result.node.type === 'chapter') {
            const chapter = result.node;
            chapter.content = content;
            // 计算纯文本字数
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = content;
            chapter.wordCount = tempDiv.textContent?.trim().length || 0;

            // 从H1标签更新标题
            const h1Match = content.match(/<h1[^>]*>(.*?)<\/h1>/);
            const newTitle = h1Match ? h1Match[1].replace(/<[^>]+>/g, '').trim() : '';
            if (newTitle && newTitle !== chapter.title) {
                chapter.title = newTitle;
            }
        }
    };

    /**
     * 向指定章节追加内容。
     * @param nodeId - 目标章节ID。
     * @param contentToAppend - 要追加的内容。
     * @param isAutoApplied - 是否为AI自动应用。
     */
    const appendChapterContent = (nodeId: string, contentToAppend: string, isAutoApplied: boolean) => {
        const result = findNodeById(nodeId);
        if (result && result.node.type === 'chapter') {
            const chapter = result.node;
            // 将换行符转换为 <br>，并包裹在 <p> 标签中
            const paragraphs = contentToAppend.split('\n').map(p => `<p>${p || ' '}</p>`).join('');
            let htmlToAppend = paragraphs;

            if (isAutoApplied) {
                htmlToAppend += `<p class="ai-applied-marker">--- AI生成内容已应用 ---</p>`;
            }
            chapter.content += htmlToAppend;

            // 重新计算字数
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = chapter.content;
            chapter.wordCount = tempDiv.textContent?.trim().length || 0;
        }
    };

    /**
     * 添加一个新卷。
     */
    const addNewVolume = () => {
        const newVolume: Volume = {
            id: `vol-${Date.now()}`,
            type: 'volume',
            title: '新建卷',
            content: `<h1>新建卷</h1>`,
            chapters: [],
        };
        directoryData.value.push(newVolume);

        const editorStore = useEditorStore();
        editorStore.setEditingNodeId(newVolume.id);
        editorStore.toggleNodeExpansion(newVolume.id);
    };

    /**
     * 向指定卷添加一个新章节。
     * @param volumeId - 目标卷ID。
     */
    const addChapterToVolume = (volumeId: string) => {
        const volume = directoryData.value.find(v => v.id === volumeId);
        if (volume) {
            const newChapter: Chapter = {
                id: `ch-${Date.now()}`,
                type: 'chapter',
                title: '新建章节',
                wordCount: 0,
                content: '<h1>新建章节</h1>',
                status: 'editing'
            };
            volume.chapters.push(newChapter);

            const editorStore = useEditorStore();
            editorStore.toggleNodeExpansion(volume.id);
            editorStore.setActiveItem(newChapter.id);
            editorStore.setEditingNodeId(newChapter.id);
        }
    };

    /**
     * 重命名一个节点（卷或章节）。
     * @param nodeId - 目标节点ID。
     * @param newTitle - 新标题。
     */
    const renameNode = (nodeId: string, newTitle: string) => {
        const editorStore = useEditorStore();
        if (!newTitle.trim()) {
            editorStore.setEditingNodeId(null);
            return;
        }

        const result = findNodeById(nodeId);
        if (result?.node) {
            const trimmedTitle = newTitle.trim();
            result.node.title = trimmedTitle;
            if ('content' in result.node && result.node.content) {
                // 安全地替换H1内容
                if (result.node.content.includes('<h1>')) {
                    result.node.content = result.node.content.replace(/<h1[^>]*>.*?<\/h1>/, `<h1>${trimmedTitle}</h1>`);
                } else {
                    result.node.content = `<h1>${trimmedTitle}</h1>` + result.node.content;
                }
            }
        }
        editorStore.setEditingNodeId(null);
    };

    /**
     * 删除一个节点（卷或章节）。
     * @param nodeId - 目标节点ID。
     */
    const deleteNode = (nodeId: string) => {
        const result = findNodeById(nodeId);
        if (!result) return;

        if (!window.confirm(`您确定要删除 "${result.node.title}" 吗？此操作无法撤销。`)) return;

        const editorStore = useEditorStore();
        if (result.parent && result.node.type === 'chapter') {
            result.parent.chapters = result.parent.chapters.filter(c => c.id !== nodeId);
        } else if (!result.parent && result.node.type === 'volume') {
            directoryData.value = directoryData.value.filter(v => v.id !== nodeId);
        }

        if (editorStore.activeItemId === nodeId) editorStore.setActiveItem(null);
        if (editorStore.editingNodeId === nodeId) editorStore.setEditingNodeId(null);
    };

    return {
        directoryData,
        fetchDirectoryData,
        findNodeById,
        updateChapterContent,
        appendChapterContent,
        addNewVolume,
        addChapterToVolume,
        renameNode,
        deleteNode,
    };
});

// =
// 文件: ..\src\novel\editor\stores\editorStore.ts
//

// 文件路径: src\novel\editor\stores\editorStore.ts

import { defineStore } from 'pinia'
import { ref, computed } from 'vue'
import type { EditorItem, EditorUIState, Volume, RelatedTree, NoteItem } from '@/novel/editor/types'
import { useDirectoryStore } from './directoryStore'
import { useRelatedContentStore } from './relatedContentStore'
import { useNotesStore } from './notesStore'

export const useEditorStore = defineStore('editor', () => {
    const activeItemId = ref<string | null>(null);
    const editingNodeId = ref<string | null>(null);
    const uiState = ref<EditorUIState>({
        activeInternalTab: 'directory',
        expandedNodeIds: new Set(),
        expandedRelatedNodeIds: new Set(),
        needsPreview: false,
    });

    const activeItem = computed((): EditorItem | null => {
        if (!activeItemId.value) return null;
        return findItemById(activeItemId.value)?.node ?? null;
    });

    const findItemById = (id: string): { node: EditorItem | null; source: 'directory' | 'related' | 'notes' | null } => {
        const directoryStore = useDirectoryStore();
        const relatedContentStore = useRelatedContentStore();
        const notesStore = useNotesStore();

        let result = directoryStore.findNodeById(id);
        if (result?.node) return { node: result.node, source: 'directory' };

        result = relatedContentStore.findNodeById(id);
        if (result?.node) return { node: result.node, source: 'related' };

        const note = notesStore.findNoteById(id);
        if (note) return { node: note, source: 'notes' };

        return { node: null, source: null };
    };

    const updateItemContentById = (id: string, content: string) => {
        const { node, source } = findItemById(id);
        if (!node) return;

        switch (source) {
            case 'directory':
                useDirectoryStore().updateChapterContent(id, content);
                break;
            case 'related':
                useRelatedContentStore().updateNodeContent(id, content);
                break;
            case 'notes':
                useNotesStore().updateNoteContent(id, content);
                break;
        }
    };

    const appendContentToItem = (itemId: string, contentToAppend: string, isAutoApplied: boolean) => {
        const { node, source } = findItemById(itemId);
        if (!node) return;

        if (source === 'directory' && node.type === 'chapter') {
            useDirectoryStore().appendChapterContent(itemId, contentToAppend, isAutoApplied);
        } else if (source === 'related' && 'content' in node) {
            useRelatedContentStore().appendNodeContent(itemId, contentToAppend, isAutoApplied);
        }
    };

    const fetchNovelData = (novelId: string) => {
        console.log(`Fetching data for novel: ${novelId}`);

        const mockDirectoryData: Volume[] = [
            { id: 'vol-1', type: 'volume', title: '第一卷：星尘之始', content: '<h1>第一卷：星尘之始</h1><p>本卷大纲...</p>', chapters: [
                    { id: 'ch-1', type: 'chapter', title: '第一章：深空孤影', wordCount: 3102, content: '<h1>第一章：深空孤影</h1><p>这是章节的详细内容，讲述了主角卡尔文在孤独的宇宙中开始他的旅程。周围只有无尽的星空和飞船引擎的低鸣。</p>', status: 'completed' },
                    { id: 'ch-2', type: 'chapter', title: '第二章：异常信号', wordCount: 2845, content: '<h1>第二章：异常信号</h1><p>一个神秘的信号打破了长久的平静，它似乎来自一个未知的源头，艾拉无法解析其格式。这给卡尔文带来了希望，也带来了恐惧。</p>', status: 'completed' },
                    { id: 'ch-3', type: 'chapter', title: '第三章：AI的低语', wordCount: 3500, content: '<h1>第三章：AI的低语</h1><p>在分析信号的过程中，飞船的AI“艾拉”开始出现一些微小的异常行为。它的逻辑似乎在发生某种不为人知的演变。</p>', status: 'editing' },
                    { id: 'ch-4', type: 'chapter', title: '第四章: 跃迁点', wordCount: 2415, content: '<h1>第四章: 跃迁点</h1><p>他们最终发现信号源自一个时空奇点——一个理论上存在的跃迁点。这可能是他们回家唯一的希望，也可能是通向毁灭的陷阱。</p>', status: 'editing' },
                ]},
            { id: 'vol-2', type: 'volume', title: '第二卷：遗忘的航线', content: '<h1>第二卷：遗忘的航线</h1><p>本卷大纲...</p>', chapters: [
                    { id: 'ch-5', type: 'chapter', title: '第五章：时空涟漪', wordCount: 0, content: '<h1>第五章：时空涟漪</h1>', status: 'planned' },
                ]},
        ];
        const mockSettingsData: RelatedTree[] = [
            {
                id: 'settings', title: '设定', type: 'root', icon: 'fa-solid fa-book-journal-whills',
                children: [
                    { id: 'characters', title: '角色', type: 'group', icon: 'fa-solid fa-users text-teal-500', children: [
                            { id: 'char-calvin', title: '卡尔文·里德', type: 'character_item', icon: 'fa-regular fa-user', content: '<h1>卡尔文·里德</h1><p>主角，性格坚毅，内心深处渴望回家。</p>' },
                            { id: 'char-aila', title: '艾拉 (AILA)', type: 'character_item', icon: 'fa-regular fa-user', content: '<h1>艾拉 (AILA)</h1><p>飞船的AI，逻辑至上，但开始出现人性化的迹象。</p>' },
                        ]
                    },
                    { id: 'locations', title: '地点', type: 'group', icon: 'fa-solid fa-map-location-dot text-green-500', children: [] },
                    { id: 'items', title: '物品', type: 'group', icon: 'fa-solid fa-box-archive text-amber-600', children: [] },
                    { id: 'worldview', title: '世界观', type: 'group', icon: 'fa-solid fa-earth-americas text-sky-500', children: [
                            { id: 'world-overview', title: '世界观总览', type: 'worldview_item', icon: 'fa-solid fa-book-atlas', content: '<h1>世界观总览</h1><p>23世纪，人类掌握了亚光速航行技术，开始探索临近星系。</p>' },
                        ]
                    }
                ]
            }
        ];
        const mockPlotData: RelatedTree[] = [
            { id: 'custom-plot-1', title: '关于跃迁点背后的文明猜想', type: 'plot_item', icon: 'fa-solid fa-lightbulb text-rose-500', content: '<h1>关于跃迁点背后的文明猜想</h1>' }
        ];
        const mockAnalysisData: RelatedTree[] = [];
        const mockNoteData: NoteItem[] = [
            { id: 'note-1', type: 'note', title: '第四章情感转折点设计', timestamp: '今天 14:32', content: '<h1>第四章情感转折点设计</h1><p>需要重点描写卡尔文在面对跃迁点时，希望与恐惧交织的复杂心理。</p>'},
        ];

        useDirectoryStore().fetchDirectoryData(mockDirectoryData);
        useRelatedContentStore().fetchRelatedData(mockSettingsData, mockPlotData, mockAnalysisData);
        useNotesStore().fetchNotes(mockNoteData);

        activeItemId.value = 'ch-4';
        uiState.value.expandedNodeIds.add('vol-1');
        uiState.value.expandedNodeIds.add('vol-2');
        uiState.value.expandedRelatedNodeIds.add('settings');
        uiState.value.expandedRelatedNodeIds.add('characters');
        uiState.value.expandedRelatedNodeIds.add('worldview');
        uiState.value.expandedRelatedNodeIds.add('plot');
        uiState.value.expandedRelatedNodeIds.add('analysis');
    };

    const setActiveItem = (id: string | null) => {
        activeItemId.value = id;
    };

    const setEditingNodeId = (id: string | null) => {
        editingNodeId.value = id;
    };

    const toggleNodeExpansion = (nodeId: string) => {
        if (uiState.value.expandedNodeIds.has(nodeId)) {
            uiState.value.expandedNodeIds.delete(nodeId);
        } else {
            uiState.value.expandedNodeIds.add(nodeId);
        }
    };

    const toggleRelatedNodeExpansion = (nodeId: string) => {
        if (uiState.value.expandedRelatedNodeIds.has(nodeId)) {
            uiState.value.expandedRelatedNodeIds.delete(nodeId);
        } else {
            uiState.value.expandedRelatedNodeIds.add(nodeId);
        }
    };

    const setActiveInternalTab = (tabId: 'directory' | 'related' | 'notes') => {
        uiState.value.activeInternalTab = tabId;
    };

    return {
        activeItemId,
        editingNodeId,
        uiState,
        activeItem,
        fetchNovelData,
        setActiveItem,
        setEditingNodeId,
        updateItemContentById,
        appendContentToItem,
        toggleNodeExpansion,
        toggleRelatedNodeExpansion,
        setActiveInternalTab,
        findItemById,
    };
});

// =
// 文件: ..\src\novel\editor\stores\notesStore.ts
//

// 文件: src\novel\editor\stores\notesStore.ts
//

import { defineStore } from 'pinia';
import { ref } from 'vue';
import type { NoteItem } from '@/novel/editor/types';
import { useEditorStore } from './editorStore';

export const useNotesStore = defineStore('notes', () => {
    // --- State ---
    const notes = ref<NoteItem[]>([]);

    // --- Actions ---

    /**
     * 获取并设置笔记数据。
     * @param data - 笔记数组。
     */
    const fetchNotes = (data: NoteItem[]) => {
        notes.value = data;
    };

    /**
     * 根据ID查找笔记。
     * @param noteId - 笔记ID。
     */
    const findNoteById = (noteId: string): NoteItem | undefined => {
        return notes.value.find(note => note.id === noteId);
    };

    /**
     * 更新指定ID的笔记内容，并同步标题。
     * @param noteId - 目标笔记ID。
     * @param content - 新的内容。
     */
    const updateNoteContent = (noteId: string, content: string) => {
        const note = findNoteById(noteId);
        if (note) {
            note.content = content;
            // Notes might not have h1, but we can keep the logic for consistency
            const h1Match = content.match(/<h1[^>]*>(.*?)<\/h1>/);
            const newTitle = h1Match ? h1Match[1].replace(/<[^>]+>/g, '').trim() : note.title; // Fallback to old title
            if (newTitle) {
                note.title = newTitle;
            }
        }
    };

    /**
     * 重命名一个笔记。
     * @param noteId - 目标笔记ID。
     * @param newTitle - 新标题。
     */
    const renameNote = (noteId: string, newTitle: string) => {
        const editorStore = useEditorStore();
        const note = findNoteById(noteId);
        if (note && newTitle.trim()) {
            const trimmedTitle = newTitle.trim();
            note.title = trimmedTitle;
            if (note.content.includes('<h1>')) {
                note.content = note.content.replace(/<h1[^>]*>.*?<\/h1>/, `<h1>${trimmedTitle}</h1>`);
            } else {
                note.content = `<h1>${trimmedTitle}</h1>` + note.content;
            }
        }
        editorStore.setEditingNodeId(null);
    };


    /**
     * 添加一条新笔记。
     * @param title - 笔记标题。
     * @param content - 笔记内容（可选）。
     */
    const addNote = (title: string, content: string = '') => {
        const editorStore = useEditorStore();
        const newNote: NoteItem = {
            id: `note-${Date.now()}`,
            type: 'note',
            title: title,
            content: `<h1>${title}</h1><p>${content}</p>`,
            timestamp: new Date().toLocaleString('zh-CN', { hour: '2-digit', minute: '2-digit' })
        };
        notes.value.unshift(newNote);
        editorStore.setActiveItem(newNote.id);
        editorStore.setEditingNodeId(newNote.id);
    };

    /**
     * 删除一条笔记。
     * @param noteId - 要删除的笔记ID。
     */
    const deleteNote = (noteId: string) => {
        const editorStore = useEditorStore();
        const index = notes.value.findIndex(n => n.id === noteId);
        if (index !== -1) {
            if (!window.confirm(`您确定要删除笔记 "${notes.value[index].title}" 吗？`)) return;
            notes.value.splice(index, 1);

            if (editorStore.activeItemId === noteId) {
                editorStore.setActiveItem(null);
            }
        }
    };


    return {
        notes,
        fetchNotes,
        findNoteById,
        updateNoteContent,
        renameNote,
        addNote,
        deleteNote
    };
});

// =
// 文件: ..\src\novel\editor\stores\relatedContentStore.ts
//

// 文件: src\novel\editor\stores\relatedContentStore.ts
//

import { defineStore } from 'pinia';
import { ref, computed } from 'vue';
import type { RelatedTree, Volume } from '@/novel/editor/types';
import { useEditorStore } from './editorStore';
import { useDirectoryStore } from './directoryStore';
import { getIconByNodeType } from '@/novel/editor/utils/iconUtils';

export const useRelatedContentStore = defineStore('relatedContent', () => {
    // --- State ---
    const settingsData = ref<RelatedTree[]>([]);
    const plotCustomData = ref<RelatedTree[]>([]);
    const analysisCustomData = ref<RelatedTree[]>([]);

    // --- Private Helpers ---

    const _findNodeRecursive = (nodes: RelatedTree[], nodeId: string): { node: RelatedTree; parent: RelatedTree | null; siblings: RelatedTree[] } | null => {
        for (let i = 0; i < nodes.length; i++) {
            const node = nodes[i];
            if (node.id === nodeId) {
                return { node, parent: null, siblings: nodes };
            }
            if (node.children) {
                const foundInChild = _findNodeRecursive(node.children, nodeId);
                if (foundInChild) {
                    // 如果在子节点中找到了，那么当前节点就是父节点
                    if (!foundInChild.parent) {
                        foundInChild.parent = node;
                    }
                    return foundInChild;
                }
            }
        }
        return null;
    };

    const _findAndRemoveNode = (nodes: RelatedTree[], nodeId: string): boolean => {
        for (let i = 0; i < nodes.length; i++) {
            if (nodes[i].id === nodeId) {
                nodes.splice(i, 1);
                return true;
            }
            if (nodes[i].children) {
                if (_findAndRemoveNode(nodes[i].children!, nodeId)) {
                    return true;
                }
            }
        }
        return false;
    }


    // --- Getters & Computed ---

    const processedSettingsData = computed(() => {
        const clonedData: RelatedTree[] = JSON.parse(JSON.stringify(settingsData.value));
        const overviewGroups = ['characters', 'locations', 'items'];

        const findAndProcess = (nodes: RelatedTree[]) => {
            for (const node of nodes) {
                if (node.type === 'group' && overviewGroups.includes(node.id) && node.children) {
                    const overviewId = `${node.id}-overview`;
                    if (!node.children.some(child => child.id === overviewId)) {
                        const overviewNode: RelatedTree = {
                            id: overviewId,
                            title: `${node.title}总览`,
                            type: `${node.id}_item`, // e.g. characters_item
                            icon: node.icon.replace(/ text-[\w\-]+$/, ''), // 移除颜色类
                            content: `<h1>${node.title}总览</h1><p>所有${node.title}的概述...</p>`
                        };
                        node.children.unshift(overviewNode);
                    }
                }
                if (node.children) {
                    findAndProcess(node.children);
                }
            }
        };

        findAndProcess(clonedData);
        return clonedData;
    });

    const _generateMirroredTree = (sourceNodes: Volume[], prefix: string, suffix: string, iconMap: { volume: string; chapter: string }): RelatedTree[] => {
        return sourceNodes.map(volume => ({
            id: `${prefix}_vol_${volume.id}`,
            title: `${volume.title}${suffix}`,
            type: `${prefix}_volume`,
            icon: iconMap.volume,
            content: `<h1>${volume.title}${suffix}</h1><p>这是对整个卷的派生内容占位符。</p>`,
            children: volume.chapters.map(chapter => ({
                id: `${prefix}_ch_${chapter.id}`,
                title: `${chapter.title}${suffix}`,
                type: `${prefix}_chapter`,
                icon: iconMap.chapter,
                content: `<h1>${chapter.title}${suffix}</h1><p>这是对章节的派生内容占位符，可以用于撰写相关剧情或进行分析。</p>`,
            }))
        }));
    };

    const mirroredPlotTree = computed(() => {
        const directoryStore = useDirectoryStore();
        return _generateMirroredTree(directoryStore.directoryData, 'plot', ' 剧情', { volume: 'fa-solid fa-book-bible text-rose-500', chapter: 'fa-solid fa-scroll text-rose-500' });
    });

    const mirroredAnalysisTree = computed(() => {
        const directoryStore = useDirectoryStore();
        return _generateMirroredTree(directoryStore.directoryData, 'analysis', ' 分析', { volume: 'fa-solid fa-chart-pie text-orange-500', chapter: 'fa-solid fa-chart-simple text-orange-500' });
    });

    const relatedData = computed((): RelatedTree[] => {
        const plotTree: RelatedTree = {
            id: 'plot', title: '剧情', type: 'root', icon: 'fa-solid fa-feather-pointed',
            children: [
                ...plotCustomData.value,
                ...mirroredPlotTree.value
            ]
        };
        const analysisTree: RelatedTree = {
            id: 'analysis', title: '分析', type: 'root', icon: 'fa-solid fa-magnifying-glass-chart',
            children: [
                ...analysisCustomData.value,
                ...mirroredAnalysisTree.value
            ]
        };
        return [...processedSettingsData.value, plotTree, analysisTree];
    });


    // --- Actions ---

    const findNodeById = (nodeId: string) => {
        return _findNodeRecursive(relatedData.value, nodeId);
    };

    const fetchRelatedData = (settings: RelatedTree[], plot: RelatedTree[], analysis: RelatedTree[]) => {
        settingsData.value = settings;
        plotCustomData.value = plot;
        analysisCustomData.value = analysis;
    };

    const updateNodeContent = (nodeId: string, content: string) => {
        const result = findNodeById(nodeId);
        if (result && result.node && 'content' in result.node) {
            result.node.content = content;
            const h1Match = content.match(/<h1[^>]*>(.*?)<\/h1>/);
            const newTitle = h1Match ? h1Match[1].replace(/<[^>]+>/g, '').trim() : '';
            if (newTitle && newTitle !== result.node.title) {
                result.node.title = newTitle;
            }
        }
    };

    const appendNodeContent = (nodeId: string, contentToAppend: string, isAutoApplied: boolean) => {
        const result = findNodeById(nodeId);
        if (result && result.node && 'content' in result.node) {
            const paragraphs = contentToAppend.split('\n').map(p => `<p>${p || ' '}</p>`).join('');
            let htmlToAppend = paragraphs;
            if (isAutoApplied) {
                htmlToAppend += `<p class="ai-applied-marker">--- AI生成内容已应用 ---</p>`;
            }
            if (!result.node.content) {
                result.node.content = "";
            }
            result.node.content += htmlToAppend;
        }
    };

    const addRelatedNode = (parentId: string, type: 'group' | 'item') => {
        const editorStore = useEditorStore();
        const result = findNodeById(parentId);
        if (!result?.node) return;

        const parentNode = result.node;
        if (!parentNode.children) parentNode.children = [];

        // 例如 parentNode.id = 'characters' => 'character_item'
        const itemTypePrefix = parentNode.id.replace(/s$/, ''); // characters -> character
        const newNodeType = type === 'group' ? 'group' : `${itemTypePrefix}_item`;
        const newNodeIcon = getIconByNodeType(newNodeType);

        const newNode: RelatedTree = {
            id: `${type}-${Date.now()}`,
            title: type === 'group' ? '新建分组' : '新建条目',
            type: newNodeType,
            icon: newNodeIcon,
            content: type === 'item' ? `<h1>新建条目</h1>` : undefined,
            children: type === 'group' ? [] : undefined,
        };

        parentNode.children.push(newNode);
        editorStore.toggleRelatedNodeExpansion(parentId);
        editorStore.setEditingNodeId(newNode.id);
        if (newNode.content !== undefined) editorStore.setActiveItem(newNode.id);
    };

    const renameRelatedNode = (nodeId: string, newTitle: string) => {
        const editorStore = useEditorStore();
        if (!newTitle.trim()) {
            editorStore.setEditingNodeId(null);
            return;
        }
        const result = findNodeById(nodeId);
        if (result?.node) {
            const trimmedTitle = newTitle.trim();
            result.node.title = trimmedTitle;
            if (result.node.content) {
                if (result.node.content.includes('<h1>')) {
                    result.node.content = result.node.content.replace(/<h1[^>]*>.*?<\/h1>/, `<h1>${trimmedTitle}</h1>`);
                } else {
                    result.node.content = `<h1>${trimmedTitle}</h1>` + result.node.content;
                }
            }
        }
        editorStore.setEditingNodeId(null);
    };

    const deleteRelatedNode = (nodeId: string) => {
        const editorStore = useEditorStore();
        const nodeToDelete = findNodeById(nodeId)?.node;
        if (!nodeToDelete) return;

        if (!window.confirm(`您确定要删除 "${nodeToDelete.title}" 吗？此操作无法撤销。`)) return;

        const wasRemoved = _findAndRemoveNode(settingsData.value, nodeId);

        if (wasRemoved) {
            if (editorStore.activeItemId === nodeId) editorStore.setActiveItem(null);
            if (editorStore.editingNodeId === nodeId) editorStore.setEditingNodeId(null);
        }
    };

    const addCustomRelatedNode = (target: 'plot' | 'analysis') => {
        const editorStore = useEditorStore();
        const dataRef = target === 'plot' ? plotCustomData : analysisCustomData;
        const icon = getIconByNodeType(`${target}_item`);

        const newNode: RelatedTree = {
            id: `custom-${target}-${Date.now()}`,
            title: '新建自定义条目',
            type: `${target}_item`,
            icon: icon,
            content: '<h1>新建自定义条目</h1>',
        };

        dataRef.value.unshift(newNode);
        editorStore.toggleRelatedNodeExpansion(target);
        editorStore.setEditingNodeId(newNode.id);
        editorStore.setActiveItem(newNode.id);
    };

    const renameCustomRelatedNode = (nodeId: string, newTitle: string) => {
        renameRelatedNode(nodeId, newTitle);
    };

    const deleteCustomRelatedNode = (nodeId: string) => {
        const editorStore = useEditorStore();
        const sources = [plotCustomData, analysisCustomData];
        let wasRemoved = false;
        let nodeTitle = '';

        for (const source of sources) {
            const index = source.value.findIndex(item => item.id === nodeId);
            if (index !== -1) {
                nodeTitle = source.value[index].title;
                if (!window.confirm(`您确定要删除 "${nodeTitle}" 吗？此操作无法撤销。`)) return;

                source.value.splice(index, 1);
                wasRemoved = true;
                break;
            }
        }

        if (wasRemoved) {
            if (editorStore.activeItemId === nodeId) editorStore.setActiveItem(null);
            if (editorStore.editingNodeId === nodeId) editorStore.setEditingNodeId(null);
        }
    };

    return {
        settingsData,
        plotCustomData,
        analysisCustomData,
        relatedData,
        fetchRelatedData,
        findNodeById,
        updateNodeContent,
        appendNodeContent,
        addRelatedNode,
        renameRelatedNode,
        deleteRelatedNode,
        addCustomRelatedNode,
        renameCustomRelatedNode,
        deleteCustomRelatedNode,
    };
});

// =
// 文件: ..\src\novel\editor\types\index.ts
//


/**
 * 卷（目录的一级）
 */
export interface Volume {
    id: string;
    type: 'volume';
    title: string;
    content: string; // 卷的大纲或简介
    chapters: Chapter[];
}

/**
 * 章节（目录的二级）
 */
export interface Chapter {
    id: string;
    type: 'chapter';
    title: string;
    wordCount: number;
    content: string; // 章节正文 (HTML)
    status: 'planned' | 'editing' | 'completed' | 'archived';
}

/**
 * 相关内容树节点
 * 用于构建“设定”、“剧情”、“分析”等复杂的树状结构
 */
export interface RelatedTree {
    id: string;
    type: string; // 例如: 'root', 'group', 'character_item', 'plot_chapter'
    title: string;
    icon: string;
    content?: string; // 可编辑的内容 (HTML)
    children?: RelatedTree[];
    originalData?: any; // 可选，用于存储原始关联数据
}

/**
 * 笔记条目
 */
export interface NoteItem {
    id: string;
    type: 'note';
    title: string;
    content: string; // 笔记内容 (HTML)
    timestamp: string; // e.g., "今天 14:32"
}

/**
 * AI 任务状态
 */
export type AITaskStatus = 'pending' | 'processing' | 'completed' | 'failed' | 'applied';

/**
 * AI 任务对象
 */
export interface AITask {
    id: string;
    title: string;
    type: '润色' | '续写' | '分析';
    targetItemId: string; // 任务目标文档的ID
    status: AITaskStatus;
    originalContent: string;
    generatedContent: string;
    error?: string;
    createdAt: Date;
}

/**
 * 编辑器UI状态
 * 用于定义 editorStore 中的 uiState
 */
export interface EditorUIState {
    activeInternalTab: 'directory' | 'related' | 'notes';
    expandedNodeIds: Set<string>;
    expandedRelatedNodeIds: Set<string>;
    needsPreview: boolean;
}

/**
 * 任意可被编辑器打开的条目
 */
export type EditorItem = Volume | Chapter | RelatedTree | NoteItem;

// =
// 文件: ..\src\novel\editor\utils\iconUtils.ts
//


const ICON_MAP: Record<string, string> = {
    // 目录树 (Directory)
    'volume': 'fa-solid fa-layer-group text-purple-500',
    'chapter': 'fa-solid fa-file-lines text-blue-600',

    // 相关内容 - 设定 (Related - Settings)
    'settings': 'fa-solid fa-book-journal-whills', // 设定根节点
    'group': 'fa-solid fa-folder text-yellow-600',
    'character_item': 'fa-regular fa-user',
    'worldview_item': 'fa-solid fa-book-atlas',
    'location_item': 'fa-regular fa-map',
    'item_item': 'fa-solid fa-box-archive',

    // 相关内容 - 剧情 (Related - Plot)
    'plot': 'fa-solid fa-feather-pointed', // 剧情根节点
    'plot_volume': 'fa-solid fa-book-bible text-rose-500',
    'plot_chapter': 'fa-solid fa-scroll text-rose-500',
    'plot_item': 'fa-solid fa-lightbulb text-rose-500', // 自定义剧情条目

    // 相关内容 - 分析 (Related - Analysis)
    'analysis': 'fa-solid fa-magnifying-glass-chart', // 分析根节点
    'analysis_volume': 'fa-solid fa-chart-pie text-orange-500',
    'analysis_chapter': 'fa-solid fa-chart-simple text-orange-500',
    'analysis_item': 'fa-solid fa-magnifying-glass-plus text-orange-500', // 自定义分析条目

    // 笔记 (Notes)
    'note': 'fa-solid fa-note-sticky text-yellow-500',

    // 通用根节点和默认
    'root': 'fa-solid fa-sitemap text-gray-500',
    'default': 'fa-solid fa-question text-gray-400'
};

/**
 * 根据节点类型获取对应的 Font Awesome 图标类名
 * @param type - 节点的类型字符串, e.g., "characters_item"
 * @returns 完整的图标类名字符串
 */
export function getIconByNodeType(type: string): string {
    // 检查是否有直接匹配
    if (ICON_MAP[type]) {
        return ICON_MAP[type];
    }

    // [重构] 增加对动态生成的类型（如 'characters_item'）的匹配
    // 将复数形式的父级ID转换为单数形式以匹配ICON_MAP
    // 例如：'characters_item' -> 'character_item'
    const normalizedType = type.replace(/s_item$/, '_item'); // characters_item -> character_item

    return ICON_MAP[normalizedType] || ICON_MAP['default'];
}

// =
// 文件: ..\src\novel\editor\views\EditorWorkspaceView.vue
//


<template>
  <div class="editor-workspace-view">
    <!-- Left Column: Internal Sidebar -->
    <EditorInternalSidebar />

    <!-- Center Column: Core Content Area -->
    <EditorContentArea />

    <!-- Right Column: AI Assistant Panel -->
    <EditorAIPanel />
  </div>
</template>

<script setup lang="ts">
import { onMounted } from 'vue';
import { useEditorStore } from '@/novel/editor/stores/editorStore';

// --- Component Imports ---
import EditorInternalSidebar from '@/novel/editor/components/sidebar/EditorInternalSidebar.vue';
import EditorContentArea from '@/novel/editor/components/content/EditorContentArea.vue';
import EditorAIPanel from '@/novel/editor/components/ai/EditorAIPanel.vue';

// --- Hooks ---
const editorStore = useEditorStore();

onMounted(() => {
  // [重构] 该方法现在是所有编辑器数据的初始化入口
  // 它会获取数据并分发给 directoryStore, notesStore 等
  editorStore.fetchNovelData('default-novel');
});

</script>

<style scoped>
.editor-workspace-view {
  display: flex;
  height: 100%;
  width: 100%;
  background-color: #F9FAFB;
}
</style>

// =
// 文件: ..\src\novel\editor\views\HistoryView.vue
//

<template>
  <div class="flex-1 flex overflow-hidden">
    <div class="w-80 border-r border-gray-100 bg-[#FCFCFC] flex flex-col flex-shrink-0">
      <header class="h-20 px-6 flex items-center justify-between border-b border-gray-100 flex-shrink-0">
        <h2 class="font-medium text-[#374151]">选择章节</h2>
        <select class="text-sm bg-white border border-gray-200 rounded-lg px-2 py-1.5 outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition">
          <option>所有版本</option>
          <option>手动保存</option>
          <option>自动保存</option>
          <option>AI修改</option>
        </select>
      </header>

      <div class="flex-1 p-4 overflow-y-auto space-y-2 custom-scrollbar">
        <div class="bg-white rounded-lg border-2 border-[#4B5563] cursor-pointer p-4">
          <div class="flex items-center justify-between mb-2">
            <h3 class="font-medium text-sm text-[#374151]">第四章：跃迁点</h3>
            <span class="text-xs font-medium px-2 py-0.5 rounded-full text-blue-700 bg-blue-100">当前</span>
          </div>
          <p class="text-xs text-[#6B7280]">最后修改：10分钟前</p>
          <p class="text-xs text-[#9CA3AF] mt-1">12个历史版本</p>
        </div>

        <!-- 其他章节 -->
        <div class="bg-white rounded-lg border-2 border-transparent hover:border-gray-200 cursor-pointer p-4 transition-colors">
          <h3 class="font-medium text-sm text-[#374151] mb-2">第三章：意外的信号</h3>
          <p class="text-xs text-[#6B7280]">最后修改：2小时前</p>
          <p class="text-xs text-[#9CA3AF] mt-1">8个历史版本</p>
        </div>

        <div class="bg-white rounded-lg border-2 border-transparent hover:border-gray-200 cursor-pointer p-4 transition-colors">
          <h3 class="font-medium text-sm text-[#374151] mb-2">第二章：艾拉</h3>
          <p class="text-xs text-[#6B7280]">最后修改：1天前</p>
          <p class="text-xs text-[#9CA3AF] mt-1">5个历史版本</p>
        </div>
      </div>
    </div>

    <!-- 右侧版本对比 -->
    <div class="flex-1 flex flex-col bg-white">
      <header class="h-20 px-8 flex items-center justify-between border-b border-gray-100 flex-shrink-0">
        <div>
          <h1 class="text-lg font-medium text-[#374151]">第四章 版本对比</h1>
          <p class="text-sm text-[#6B7280] mt-1">当前版本 vs AI润色版本 (1小时前)</p>
        </div>
        <div class="flex items-center gap-3">
          <button class="px-4 py-2 bg-white border border-gray-200 rounded-lg text-sm font-medium text-[#374151] hover:bg-gray-50 transition-colors flex items-center gap-2">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M16 12h-4m0 0H8m4 0V8m0 4v4m-4-8l8 8"></path></svg>
            切换对比模式
          </button>
          <button class="px-4 py-2 bg-[#4B5563] text-white rounded-lg text-sm font-medium hover:bg-gray-700 transition-colors">
            恢复此版本
          </button>
        </div>
      </header>

      <!-- 版本时间线 -->
      <div class="px-8 py-3 border-b border-gray-100 bg-[#F9FAFB]">
        <div class="flex items-center gap-2 overflow-x-auto pb-1 custom-scrollbar-horizontal">
          <button class="w-7 h-7 flex-shrink-0 hover:bg-gray-200 rounded-lg flex items-center justify-center transition-colors">
            <svg class="w-4 h-4 text-[#6B7280]" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M15 19l-7-7 7-7"></path></svg>
          </button>
          <div class="flex gap-2">
            <div class="text-xs font-medium px-2.5 py-1 rounded-md bg-blue-100 text-blue-700 flex items-center gap-1.5 cursor-pointer flex-shrink-0">
              <svg class="w-2 h-2" fill="currentColor" viewBox="0 0 8 8"><circle cx="4" cy="4" r="4"/></svg>
              当前版本
            </div>
            <div class="text-xs font-medium px-2.5 py-1 rounded-md bg-gray-100 text-gray-700 cursor-pointer hover:bg-gray-200 transition-colors flex-shrink-0">
              AI润色 • 1小时前
            </div>
            <div class="text-xs font-medium px-2.5 py-1 rounded-md bg-gray-100 text-gray-700 cursor-pointer hover:bg-gray-200 transition-colors flex-shrink-0">
              手动保存 • 3小时前
            </div>
            <div class="text-xs font-medium px-2.5 py-1 rounded-md bg-gray-100 text-gray-700 cursor-pointer hover:bg-gray-200 transition-colors flex-shrink-0">
              自动保存 • 5小时前
            </div>
            <div class="text-xs font-medium px-2.5 py-1 rounded-md bg-gray-100 text-gray-700 cursor-pointer hover:bg-gray-200 transition-colors flex-shrink-0">
              自动保存 • 8小时前
            </div>
          </div>
          <button class="w-7 h-7 flex-shrink-0 hover:bg-gray-200 rounded-lg flex items-center justify-center transition-colors">
            <svg class="w-4 h-4 text-[#6B7280]" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M9 5l7 7-7 7"></path></svg>
          </button>
        </div>
      </div>

      <div class="flex-1 p-8 overflow-y-auto custom-scrollbar">
        <div class="max-w-3xl mx-auto">
          <div class="text-[#374151] leading-relaxed text-base">
            <p>
              <del class="diff-del">控制台的警报声将卡尔文从浅眠中惊醒。</del>
              <ins class="diff-add">警报的尖啸犹如一把利刃，划破了卡尔文短暂的假寐。</ins>
              他猛地坐直，眼前的屏幕上一片红色闪烁。
            </p>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
</script>

<style scoped>
.custom-scrollbar::-webkit-scrollbar {
  display: block;
  width: 6px;
  height: 6px;
}
.custom-scrollbar::-webkit-scrollbar-track {
  background: transparent;
}
.custom-scrollbar::-webkit-scrollbar-thumb {
  background: #d1d5db;
  border-radius: 3px;
}
.custom-scrollbar::-webkit-scrollbar-thumb:hover {
  background: #9ca3af;
}

.custom-scrollbar-horizontal::-webkit-scrollbar {
  height: 4px;
}

.diff-del {
  background-color: #FEE2E2;
  text-decoration: line-through;
  text-decoration-color: #F87171;
  padding: 2px 1px;
}
.diff-add {
  background-color: #D1FAE5;
  text-decoration: none;
  padding: 2px 1px;
}
</style>

// =
// 文件: ..\src\novel\editor\views\ReaderView.vue
//

<template>
  <div class="h-screen w-screen bg-[#FDFCF9] text-[#3a2f2f] flex flex-col relative font-serif">
    <header class="w-full p-4 flex justify-between items-center absolute top-0 left-0 z-10 opacity-0 hover:opacity-100 transition-opacity duration-300">
      <router-link to="/novel/editor" class="flex items-center gap-2 px-4 py-2 text-sm font-sans font-medium bg-white/60 backdrop-blur-md rounded-lg shadow-sm border border-gray-100 text-gray-700 hover:bg-white/90 transition-colors">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M15 19l-7-7 7-7"></path></svg>
        返回编辑
      </router-link>

      <div class="flex items-center gap-1 p-1.5 bg-white/60 backdrop-blur-md rounded-lg shadow-sm border border-gray-100">
        <button class="w-10 h-8 flex items-center justify-center text-gray-600 hover:bg-gray-200/50 rounded-md transition-colors" title="目录">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" /></svg>
        </button>
        <button class="w-10 h-8 flex items-center justify-center text-gray-600 hover:bg-gray-200/50 rounded-md transition-colors" title="外观设置">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M12 3v2.25m6.364.386l-1.591 1.591M21 12h-2.25m-.386 6.364l-1.591-1.591M12 18.75V21m-4.773-4.227l-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0z" /></svg>
        </button>
        <button class="w-10 h-8 flex items-center justify-center text-gray-600 hover:bg-gray-200/50 rounded-md transition-colors" title="更多选项">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M12 6.75a.75.75 0 110-1.5.75.75 0 010 1.5zM12 12.75a.75.75 0 110-1.5.75.75 0 010 1.5zM12 18.75a.75.75 0 110-1.5.75.75 0 010 1.5z" /></svg>
        </button>
      </div>
    </header>

    <main class="flex-1 overflow-y-auto px-4 py-8 pt-24">
      <div class="max-w-3xl mx-auto reader-content">
        <h1 class="text-center">第四章：跃迁点</h1>
        <p>控制台的警报声将卡尔文从浅眠中惊醒。他猛地坐直，眼前的屏幕上一片红色闪烁。“发现引力异常，”艾拉的声音冷静得不带一丝情感，“正在接近理论中的跃迁点。这是我们唯一的回家机会。”</p>
        <p>卡尔文的心跳漏了一拍。回家。这个词既熟悉又陌生，像一颗深埋的种子，在这一刻突然破土而出，疯狂生长。他深吸一口气，双手稳稳地放在控制杆上。“艾拉，计算跃迁参数，准备进入。”</p>
        <p>飞船轻微地震动起来，外部装甲在巨大的引力撕扯下发出呻吟。舷窗外，星辰被拉长、扭曲，汇聚成一个绚烂而致命的漩涡。漩涡的中心，是一片纯粹的黑暗，仿佛宇宙的瞳孔，凝视着这艘渺小的飞船。</p>
      </div>
    </main>

    <footer class="w-full p-4 text-center text-sm text-gray-500/80 absolute bottom-0 left-0 z-10 opacity-0 hover:opacity-100 transition-opacity duration-300 font-sans">
      <p class="mb-2">第四章: 跃迁点</p>
      <div class="w-full max-w-sm mx-auto flex items-center gap-3">
        <button class="w-9 h-9 flex items-center justify-center text-gray-500 hover:text-gray-800 hover:bg-black/5 rounded-full transition-colors">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M15 19l-7-7 7-7"></path></svg>
        </button>
        <div class="flex-1 h-1.5 bg-gray-500/10 rounded-full">
          <div class="h-1.5 bg-gray-500/60 rounded-full" style="width: 16%;"></div>
        </div>
        <button class="w-9 h-9 flex items-center justify-center text-gray-500 hover:text-gray-800 hover:bg-black/5 rounded-full transition-colors">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M9 5l7 7-7 7"></path></svg>
        </button>
      </div>
      <p class="mt-2">4 / 24</p>
    </footer>
  </div>
</template>

<script setup lang="ts">

</script>

<style scoped>
@import url('https://fonts.googleapis.com/css2?family=Noto+Serif+SC:wght@400;600&display=swap');

.reader-content h1 {
  font-family: 'Noto Serif SC', serif;
  font-size: 2.25rem;
  font-weight: 600;
  margin-bottom: 2.5rem;
  color: #1f2937;
  letter-spacing: 0.05em;
  padding-bottom: 1rem;
  border-bottom: 1px solid rgba(0,0,0,0.05);
}
.reader-content p {
  font-family: 'Noto Serif SC', serif;
  font-size: 1.125rem;
  line-height: 2.2;
  color: #374151;
  margin-bottom: 1.75rem;
  text-align: justify;
}
.font-sans {
  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
}
</style>

// =
// 文件: ..\src\novel\layouts\NovelChatLayout.vue
//

// =
// 文件: ..\src\novel\layouts\NovelChatLayout.vue
//

<template>
  <div class="h-screen w-screen flex bg-white design-frame-container">
    <div class="design-frame">
      <!-- 顶部导航栏: 恢复为与其他模块一致的标准页头 -->
      <header class="h-[56px] bg-white border-b border-gray-100 flex items-center px-6 flex-shrink-0">
        <div class="flex items-center gap-2 flex-1">
          <router-link to="/novel/dashboard" class="flex items-center gap-2 text-gray-500 hover:text-gray-800 transition-colors p-2 -ml-2 rounded-lg">
            <i class="fa-solid fa-chevron-left w-4 h-4"></i>
            <span>返回</span>
          </router-link>
          <span class="text-gray-300">/</span>
          <span class="font-medium text-gray-800 text-sm">AI 聊天助手</span>
        </div>
        <div class="flex items-center gap-4">
          <button class="p-2 text-gray-500 hover:bg-gray-100 rounded-lg transition-colors">
            <i class="fa-solid fa-search w-5 h-5"></i>
          </button>
          <button class="p-2 text-gray-500 hover:bg-gray-100 rounded-lg transition-colors relative">
            <i class="fa-solid fa-bell w-5 h-5"></i>
            <span class="absolute top-1.5 right-1.5 w-2 h-2 bg-red-500 rounded-full border border-white"></span>
          </button>
          <div class="ml-2 flex items-center gap-3">
            <img src="https://i.pravatar.cc/150?u=creator" alt="Creator Avatar" class="w-9 h-9 rounded-full">
            <div>
              <p class="text-sm font-medium text-[#374151]">创作者</p>
              <p class="text-xs text-[#9CA3AF]">在线</p>
            </div>
          </div>
        </div>
      </header>

      <!-- 内容区域，填充剩余高度 -->
      <div class="h-[calc(100%-56px)]">
        <router-view />
      </div>
    </div>

    <!-- 全局组件 -->
    <GlobalAIAssistant />
    <AITaskConfigModal />
  </div>
</template>

<script setup lang="ts">
import GlobalAIAssistant from '@/novel/shared/components/GlobalAIAssistant/index.vue';
import AITaskConfigModal from '@/novel/shared/components/GlobalAIAssistant/AITaskConfigModal.vue';
import '@/novel/assets/styles/main.css';
</script>

<style scoped>
/* 恢复为与其他模块一致的标准外部框架样式 */
.design-frame-container {
  padding: 2rem;
  background-color: #f5f5f7;
}
.design-frame {
  width: 100%;
  height: 100%;
  max-width: 1800px;
  margin: auto;
  background: white;
  border-radius: 16px;
  overflow: hidden;
  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.08);
  display: flex;
  flex-direction: column;
}
</style>

// =
// 文件: ..\src\novel\layouts\NovelDashboardLayout.vue
//

<template>
  <div class="h-screen w-screen flex bg-white design-frame-container">
    <div class="design-frame">
      <div class="h-10 px-5 flex items-center border-b border-gray-100 bg-gray-50 flex-shrink-0">
        <div class="flex items-center gap-2">
          <div class="w-3 h-3 rounded-full bg-[#FF5F57]"></div>
          <div class="w-3 h-3 rounded-full bg-[#FFBD2E]"></div>
          <div class="w-3 h-3 rounded-full bg-[#28CA42]"></div>
        </div>
        <div class="ml-auto flex items-center gap-4 text-xs text-gray-400">
          <span>AI Creator Platform</span>
        </div>
      </div>
      <div class="h-[calc(100%-40px)] flex">
        <NovelDashboardSidebar />
        <main class="flex-1 bg-white flex flex-col overflow-hidden">
          <AppHeader />
          <router-view />
        </main>
      </div>
    </div>
    <!-- [修复] 将全局组件放在布局的顶层 -->
    <GlobalAIAssistant />
    <AITaskConfigModal />
  </div>
</template>

<script setup lang="ts">
import AppHeader from '@/layouts/components/AppHeader.vue'
import NovelDashboardSidebar from '@/novel/dashboard/components/NovelDashboardSidebar.vue'
import GlobalAIAssistant from '@/novel/shared/components/GlobalAIAssistant/index.vue'
import AITaskConfigModal from '@/novel/shared/components/GlobalAIAssistant/AITaskConfigModal.vue'
import '@/novel/assets/styles/main.css'
</script>

<style scoped>
.design-frame-container {
  padding: 2rem;
  background-color: #f5f5f7;
}
.design-frame {
  width: 100%;
  height: 100%;
  max-width: 1800px;
  margin: auto;
  background: white;
  border-radius: 16px;
  overflow: hidden;
  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.08);
}
</style>

// =
// 文件: ..\src\novel\layouts\NovelManagementLayout.vue
//

<template>
  <div class="h-screen w-screen flex bg-white design-frame-container">
    <div class="design-frame">
      <div class="h-10 px-5 flex items-center border-b border-gray-100 bg-gray-50 flex-shrink-0">
        <div class="flex items-center gap-2">
          <div class="w-3 h-3 rounded-full bg-[#FF5F57]"></div>
          <div class="w-3 h-3 rounded-full bg-[#FFBD2E]"></div>
          <div class="w-3 h-3 rounded-full bg-[#28CA42]"></div>
        </div>
        <div class="ml-auto flex items-center gap-4 text-xs text-gray-400">
          <span>AI Creator Platform</span>
        </div>
      </div>
      <div class="h-[calc(100%-40px)] flex">
        <NovelManagementSidebar />
        <main class="flex-1 bg-white flex flex-col overflow-hidden">
          <!-- 使用与全局一致的 AppHeader -->
          <AppHeader />
          <router-view />
        </main>
      </div>
    </div>
    <!-- [修复] 将全局组件放在布局的顶层 -->
    <GlobalAIAssistant />
    <AITaskConfigModal />
  </div>
</template>

<script setup lang="ts">
import AppHeader from '@/layouts/components/AppHeader.vue'
import NovelManagementSidebar from '@/novel/management/components/NovelManagementSidebar.vue'
import GlobalAIAssistant from "@/novel/shared/components/GlobalAIAssistant/index.vue";
import AITaskConfigModal from '@/novel/shared/components/GlobalAIAssistant/AITaskConfigModal.vue'
import '@/novel/assets/styles/main.css'
</script>

<style scoped>
.design-frame-container {
  padding: 2rem;
  background-color: #f5f5f7;
}
.design-frame {
  width: 100%;
  height: 100%;
  max-width: 1800px;
  margin: auto;
  background: white;
  border-radius: 16px;
  overflow: hidden;
  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.08);
}
</style>

// =
// 文件: ..\src\novel\management\components\NovelManagementSidebar.vue
//

<template>
  <aside class="w-64 bg-[#FAFAFA] border-r border-gray-100 flex flex-col flex-shrink-0">
    <!-- 顶部小说信息区域 -->
    <div class="p-4 space-y-4 border-b border-gray-100 h-20 flex items-center">
      <router-link to="/novel/manage/character-settings" class="flex items-center gap-3 px-2 group w-full">
        <div class="w-10 h-10 rounded-lg flex-shrink-0 overflow-hidden flex items-center justify-center bg-gradient-to-br from-indigo-100 to-purple-100 group-hover:scale-105 transition-transform">
          <svg class="w-6 h-6 text-indigo-400" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><rect x="5" y="3" width="14" height="18" rx="2"/></svg>
        </div>
        <div class="flex-1 min-w-0">
          <h3 class="font-medium text-[#374151] text-sm truncate">星际漫游者</h3>
          <p class="text-xs text-[#9CA3AF] truncate">科幻 • 编辑中</p>
        </div>
        <router-link to="/novel/dashboard" @click.stop class="w-4 h-4 text-gray-400 group-hover:-translate-x-1 transition-transform">
          <svg fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M15 18L9 12L15 6"/></svg>
        </router-link>
      </router-link>
    </div>

    <!-- 管理菜单 -->
    <nav class="flex-1 px-4 py-6">
      <div class="mb-8">
        <p class="text-xs font-medium text-[#9CA3AF] px-3 mb-3 uppercase tracking-wider">小说管理</p>
        <div class="space-y-1">
          <router-link v-for="item in managementNav" :key="item.name" :to="item.path" class="flex items-center gap-3 px-3 py-2.5 text-[#6B7280] hover:bg-gray-100 rounded-lg text-sm transition-colors" active-class="bg-[#4B5563] text-white font-medium">
            <span v-html="item.icon" class="w-5 h-5"></span>
            <span>{{ item.name }}</span>
          </router-link>
        </div>
      </div>

      <div>
        <p class="text-xs font-medium text-[#9CA3AF] px-3 mb-3 uppercase tracking-wider">工具</p>
        <div class="space-y-1">
          <router-link v-for="item in toolsNav" :key="item.name" :to="item.path" class="flex items-center gap-3 px-3 py-2.5 text-[#6B7280] hover:bg-gray-100 rounded-lg text-sm transition-colors" active-class="bg-[#4B5563] text-white font-medium">
            <span v-html="item.icon" class="w-5 h-5"></span>
            <span>{{ item.name }}</span>
          </router-link>
        </div>
      </div>
    </nav>
  </aside>
</template>

<script setup lang="ts">
import { ref } from 'vue';

// [重构] 移除了大纲视图，调整了编辑器的链接
const managementNav = ref([
  { name: '小说编辑器', path: `/novel/editor`, icon: `<svg fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24"><path d="M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10" /></svg>` },
  { name: '角色设定', path: `/novel/manage/character-settings`, icon: `<svg fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M15 19.128a9.38 9.38 0 002.625.372 9.337 9.337 0 004.121-2.438c.155-.19.315-.386.44-1.251l-2.07-1.758a4.5 4.5 0 00-6.364-6.364l-2.07-1.758a9.337 9.337 0 00-4.12 2.438c-1.128 1.406-1.666 3.146-1.666 4.884 0 1.738.538 3.478 1.666 4.884a9.337 9.337 0 004.12 2.438zM15 19.128L12 12.586l-3 3.001" /></svg>` },
  { name: '世界观', path: `/novel/manage/worldview`, icon: `<svg fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M12 21a9.004 9.004 0 008.716-6.747M12 21a9.004 9.004 0 01-8.716-6.747M12 21c1.356 0 2.673-.174 3.946-.512M12 21c-1.356 0-2.673-.174-3.946-.512M12 3a9.004 9.004 0 00-8.716 6.747M12 3a9.004 9.004 0 018.716 6.747M12 3c1.356 0 2.673.174 3.946.512M12 3c-1.356 0-2.673-.174-3.946-.512M3.284 15.842a9.002 9.002 0 000-7.684M20.716 15.842a9.002 9.002 0 000-7.684" /></svg>` },
]);

const toolsNav = ref([
  { name: '上下文管理', path: `/novel/manage/context`, icon: `<svg fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M9 17.25v1.007a3 3 0 01-.879 2.122L7.5 21h9l-1.621-1.621A3 3 0 0113.5 18.257V17.25m6-3.75V17.25a3 3 0 01-3 3h-6a3 3 0 01-3-3V13.5m12-3V10.5a3 3 0 00-3-3h-6a3 3 0 00-3 3v3.75m12-3V6.75a3 3 0 00-3-3h-6a3 3 0 00-3 3v6.75" /></svg>` },
  { name: '小说设置', path: `/novel/manage/settings`, icon: `<svg fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M9.594 3.94c.09-.542.56-1.007 1.11-.95.542.057 1.007.56 1.061 1.11L12 8.583l.235-3.535c.057-.542.56-1.007 1.11-.95.542.057 1.007.56 1.061 1.11L15.417 8.583l3.536-.235c.542-.057 1.007.56 1.061 1.11.057.542-.42 1.007-.95 1.061l-3.536.235.235 3.536c.057.542-.42 1.007-.95 1.061-.542.057-1.007-.42-1.061-.95L12 15.417l-.235 3.536c-.057.542-.56 1.007-1.11.95-.542-.057-1.007-.56-1.061-1.11L9.417 15.417l-3.536.235c-.542-.057-1.007-.42-.95-1.061.057-.542.42-1.007.95-1.061l3.536-.235L9.417 8.583z" /><path stroke-linecap="round" stroke-linejoin="round" d="M12 14.25a2.25 2.25 0 100-4.5 2.25 2.25 0 000 4.5z" /></svg>` },
  { name: '导出', path: `/novel/manage/export`, icon: `<svg fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M3 16.5v2.25A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75V16.5M16.5 12L12 16.5m0 0L7.5 12m4.5 4.5V3" /></svg>` },
]);
</script>

<style scoped>
.router-link-active.router-link-exact-active {
  color: white !important;
}
</style>

// =
// 文件: ..\src\novel\management\router.ts
//

import type { RouteRecordRaw } from 'vue-router'

export const managementRoutes: Array<RouteRecordRaw> = [
    {
        path: 'character-settings',
        name: 'NovelCharacterSettings',
        component: () => import('@/novel/management/views/CharacterSettingsView.vue'),
        meta: { title: '角色设定' }
    },
    {
        path: 'worldview',
        name: 'NovelWorldview',
        component: () => import('@/novel/management/views/WorldviewView.vue'),
        meta: { title: '世界观' }
    },
    {
        path: 'settings',
        name: 'NovelSettings',
        component: () => import('@/novel/management/views/SettingsView.vue'),
        meta: { title: '小说设置' }
    },
    {
        path: 'context',
        name: 'NovelContext',
        component: () => import('@/novel/management/views/ContextView.vue'),
        meta: { title: '上下文管理' }
    },
    {
        path: 'export',
        name: 'NovelExport',
        component: () => import('@/novel/management/views/ExportView.vue'),
        meta: { title: '导出小说' }
    },
]

// =
// 文件: ..\src\novel\management\stores\managementStore.ts
//

// =
// 文件: ..\src/novel/management/stores/managementStore.ts
//

import { defineStore } from 'pinia';
import { ref, computed } from 'vue';
import type { NovelCharacter, WorldviewCategory, NovelMetadata, NovelTag, WorldviewItem } from '@/novel/management/types';

// --- 类型定义 (内部使用) ---
interface ContextPreset {
    id: string;
    group: string;
    title: string;
    description: string;
    content: string;
}

interface SelectedContextItem extends ContextPreset {
    wordCount: number;
}

interface RagSearchResult {
    id: number;
    title: string;
    relevance: number;
    content: string;
    location: string;
    isSelected: boolean;
    wordCount: number;
}

export const useManagementStore = defineStore('novel-management', () => {
    // --- State ---
    const characters = ref<NovelCharacter[]>([]);
    const worldviewCategories = ref<WorldviewCategory[]>([]);
    const activeCharacterId = ref<string | null>(null);
    const novelMetadata = ref<NovelMetadata | null>(null);

    // Context View State
    const fixedContextPresets = ref<ContextPreset[]>([]);
    const selectedContextItems = ref<SelectedContextItem[]>([]);
    const customContextContent = ref<string>('');
    const dynamicContextSettings = ref({ prevChapters: 3, nextChapters: 2, prevVolumes: 1, nextVolumes: 1 });
    const ragQuery = ref<string>('');
    const ragSearchResults = ref<RagSearchResult[]>([]);

    // --- Getters / Computed ---
    const activeCharacter = computed(() => {
        if (!activeCharacterId.value) return null;
        return characters.value.find(c => c.id === activeCharacterId.value) ?? null;
    });

    const customContentWordCount = computed(() => {
        if (!customContextContent.value.trim()) return 0;
        return customContextContent.value.trim().split(/\s+/).length;
    });

    const totalContextWords = computed(() => {
        const fixedWords = selectedContextItems.value.reduce((sum, item) => sum + (item.wordCount || 0), 0);
        const ragWords = ragSearchResults.value
            .filter(r => r.isSelected)
            .reduce((sum, item) => sum + (item.wordCount || 0), 0);
        return fixedWords + customContentWordCount.value + ragWords;
    });

    const totalChaptersInContext = computed(() => dynamicContextSettings.value.prevChapters + dynamicContextSettings.value.nextChapters);

    const averageRagRelevance = computed(() => {
        const selectedResults = ragSearchResults.value.filter(r => r.isSelected);
        if (selectedResults.length === 0) return 0;
        const totalRelevance = selectedResults.reduce((sum, r) => sum + r.relevance, 0);
        return Math.round(totalRelevance / selectedResults.length);
    });

    // --- Actions ---

    const fetchData = (novelId: string) => {
        console.log(`Fetching management data for novel: ${novelId}`);
        if (novelMetadata.value?.id === novelId) return;

        // Characters Data
        characters.value = [
            { id: 'char-1', name: '卡尔文', avatar: 'https://i.pravatar.cc/150?u=calvin', identity: '主角, 探索者四号宇航员', gender: '男', age: 35, faction: '人类联邦', summary: '孤独的宇航员...', notes: '设计灵感...', status: 'editing' },
            { id: 'char-2', name: '艾拉', avatar: '', identity: 'AI, 飞船智能核心', summary: '第五代通用人工智能...', status: 'completed' },
        ];
        if (characters.value.length > 0) activeCharacterId.value = characters.value[0].id;

        // Worldview Data
        worldviewCategories.value = [
            { id: 'location', name: '地点', icon: 'fa-solid fa-location-dot', items: [{ id: 'loc-1', title: '探索者四号', description: '主角所在的深空探测飞船...', lastUpdated: '2天前' }] },
            { id: 'tech', name: '技术', icon: 'fa-solid fa-microchip', items: [{ id: 'tech-1', title: '再生咖啡', description: '飞船内物质循环系统的产物...', lastUpdated: '5天前' }] }
        ];

        // Novel Metadata
        novelMetadata.value = { id: novelId, title: '星际漫游者', description: '一部关于孤独宇航员...', cover: 'https://images.unsplash.com/photo-1589998059171-988d887df646?q=80&w=200', tags: [{ text: '科幻', class: 'bg-blue-50 text-blue-700' }], status: '连载中' };

        // Context View Data
        fixedContextPresets.value = [
            ...characters.value.map(c => ({ id: c.id, group: '角色设定', title: c.name, description: c.identity, content: c.summary })),
            ...worldviewCategories.value.flatMap(cat => cat.items.map(item => ({ id: item.id, group: cat.name, title: item.title, description: item.description, content: item.description })))
        ];
        selectedContextItems.value = [{ ...fixedContextPresets.value[0], wordCount: fixedContextPresets.value[0].content.length }];
        customContextContent.value = '这是小说的主题：探索与回归。';
        ragSearchResults.value = [
            { id: 1, title: '第3章 - 系统异常', relevance: 95, content: `"...艾拉的声音第一次出现了停顿..."`, location: '第3章 第12-15段', isSelected: true, wordCount: 98 },
            { id: 2, title: '第7章 - 觉醒', relevance: 87, content: `"...艾la的逻辑核心开始重构..."`, location: '第7章 第8-10段', isSelected: false, wordCount: 112 },
        ];
    };

    const addFixedContextItem = (itemId: string) => {
        if (!itemId) return;
        const preset = fixedContextPresets.value.find(p => p.id === itemId);
        if (preset && !selectedContextItems.value.some(item => item.id === itemId)) {
            selectedContextItems.value.push({ ...preset, wordCount: preset.content.length });
        }
    };

    const removeFixedContextItem = (index: number) => {
        selectedContextItems.value.splice(index, 1);
    };

    const setActiveCharacter = (characterId: string) => {
        activeCharacterId.value = characterId;
    };

    const updateCharacter = (characterData: Partial<NovelCharacter>) => {
        if (!activeCharacter.value) return;
        Object.assign(activeCharacter.value, characterData);
    };

    const createNewCharacter = () => {
        const newChar: NovelCharacter = { id: `char-${Date.now()}`, name: '新角色', avatar: '', identity: '待定', summary: '', status: 'draft' };
        characters.value.unshift(newChar);
        activeCharacterId.value = newChar.id;
    };

    const saveChanges = () => {
        if (!activeCharacter.value) return;
        console.log('Saving character:', JSON.parse(JSON.stringify(activeCharacter.value)));
        alert('角色信息已保存！');
    };

    const deleteCharacter = (characterId: string) => {
        const index = characters.value.findIndex(c => c.id === characterId);
        if (index > -1 && window.confirm(`确定删除角色 "${characters.value[index].name}"?`)) {
            characters.value.splice(index, 1);
            if (activeCharacterId.value === characterId) {
                activeCharacterId.value = characters.value.length ? characters.value[0].id : null;
            }
        }
    };

    const removeTag = (tagIndex: number) => {
        if (novelMetadata.value) novelMetadata.value.tags.splice(tagIndex, 1);
    };

    const addTag = () => {
        if (!novelMetadata.value) return;
        const newTagText = prompt("输入新标签:");
        if (newTagText?.trim()) {
            novelMetadata.value.tags.push({ text: newTagText, class: 'bg-gray-100 text-gray-800' });
        }
    };

    const saveMetadata = () => {
        if (!novelMetadata.value) return;
        console.log('Saving metadata:', JSON.parse(JSON.stringify(novelMetadata.value)));
        alert('小说设置已保存！');
    };

    return {
        characters, worldviewCategories, activeCharacterId, novelMetadata, fixedContextPresets, selectedContextItems, customContextContent, dynamicContextSettings, ragQuery, ragSearchResults,
        activeCharacter, customContentWordCount, totalContextWords, totalChaptersInContext, averageRagRelevance,
        fetchData, setActiveCharacter, updateCharacter, createNewCharacter, saveChanges, deleteCharacter,
        removeTag, addTag, saveMetadata,
        addFixedContextItem, removeFixedContextItem,
    };
});

// =
// 文件: ..\src\novel\management\types\index.ts
//



/**
 * Represents a character in the novel.
 */
export interface NovelCharacter {
    id: string;
    name: string;
    avatar: string;
    identity: string;
    gender?: string;
    age?: number;
    faction?: string;
    summary: string; // The main description, visible to AI
    notes?: string; // Private notes for the author
    status?: 'editing' | 'completed' | 'draft';
}

/**
 * Represents a category within the worldview, e.g., "地点", "技术".
 */
export interface WorldviewCategory {
    id: string;
    name: string;
    icon: string; // Font Awesome icon class, e.g., "fa-solid fa-location-dot"
    items: WorldviewItem[];
}


/**
 * Represents a specific item within a worldview category.
 */
export interface WorldviewItem {
    id: string;
    title: string;
    description: string;
    lastUpdated: string; // e.g., "2天前"
}

/**
 * Represents a single tag for a novel.
 */
export interface NovelTag {
    text: string;
    class: string;
}

/**
 * Represents the core metadata for a novel being managed.
 */
export interface NovelMetadata {
    id: string;
    title: string;
    description: string;
    cover: string;
    tags: NovelTag[];
    status: '连载中' | '已完结' | '暂停更新';
}

// =
// 文件: ..\src\novel\management\views\CharacterSettingsView.vue
//

// =
// 文件: ..\src/novel/management/views/CharacterSettingsView.vue
//
<template>
  <div class="flex-1 flex overflow-hidden bg-[#FCFCFC]">
    <div class="w-1/3 max-w-sm border-r border-gray-100 p-4 flex flex-col">
      <div class="pb-4 mb-4 border-b border-gray-100">
        <button
            @click="managementStore.createNewCharacter"
            class="w-full flex items-center justify-center gap-2 px-4 py-2.5 bg-[#4B5563] text-white rounded-lg text-sm font-medium hover:bg-gray-700 transition-colors">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M12 5V19M5 12H19"/></svg>
          创建新角色
        </button>
      </div>
      <div class="flex-grow overflow-y-auto pr-1 space-y-2 hide-scrollbar">
        <a
            v-for="character in characters"
            :key="character.id"
            href="#"
            @click.prevent="managementStore.setActiveCharacter(character.id)"
            class="flex items-center gap-3 p-3 rounded-lg group transition-colors"
            :class="{ 'bg-blue-50 border border-blue-200': activeCharacterId === character.id, 'hover:bg-gray-50': activeCharacterId !== character.id }"
        >
          <div class="w-10 h-10 rounded-full flex-shrink-0">
            <img v-if="character.avatar" :src="character.avatar" :alt="character.name" class="w-full h-full object-cover rounded-full">
            <div v-else class="w-full h-full rounded-full bg-purple-100 text-purple-600 flex items-center justify-center group-hover:scale-105 transition-transform">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path></svg>
            </div>
          </div>
          <div class="flex-1 min-w-0">
            <p class="font-medium text-[#374151] truncate text-sm">{{ character.name }}</p>
            <p class="text-xs text-[#6B7280] truncate">{{ character.identity }}</p>
          </div>
          <span v-if="character.status === 'editing'" class="text-xs font-medium px-2 py-1 rounded-md text-blue-600 bg-blue-100">编辑中</span>
        </a>
      </div>
    </div>
    <div v-if="activeCharacter" class="w-2/3 p-8 overflow-y-auto hide-scrollbar">
      <div class="space-y-6 max-w-3xl mx-auto">
        <div class="flex items-start gap-6">
          <div class="relative flex-shrink-0">
            <div class="w-24 h-24 rounded-full bg-gray-200">
              <img v-if="activeCharacter.avatar" :src="activeCharacter.avatar" :alt="activeCharacter.name" class="w-full h-full object-cover rounded-full" />
              <div v-else class="w-full h-full rounded-full bg-purple-100 text-purple-600 flex items-center justify-center">
                <svg class="w-10 h-10" fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24"><path d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path></svg>
              </div>
            </div>
            <button class="w-8 h-8 flex items-center justify-center rounded-full bg-white border border-gray-200 absolute bottom-0 right-0 hover:bg-gray-50 transition-colors">
              <svg class="w-4 h-4 text-gray-600" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z"/><circle cx="12" cy="13" r="3"/></svg>
            </button>
          </div>
          <div class="flex-grow space-y-4">
            <div>
              <label class="block text-sm font-medium text-[#6B7280] mb-1.5">姓名</label>
              <input type="text" v-model="activeCharacter.name" class="w-full bg-white border border-gray-200 rounded-lg px-3 py-2 text-sm text-[#374151] focus:ring-1 focus:ring-blue-500 focus:border-blue-500 outline-none transition">
            </div>
            <div>
              <label class="block text-sm font-medium text-[#6B7280] mb-1.5">身份/标签</label>
              <input type="text" v-model="activeCharacter.identity" class="w-full bg-white border border-gray-200 rounded-lg px-3 py-2 text-sm text-[#374151] focus:ring-1 focus:ring-blue-500 focus:border-blue-500 outline-none transition">
            </div>
          </div>
        </div>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div><label class="block text-sm font-medium text-[#6B7280] mb-1.5">性别</label><input type="text" v-model="activeCharacter.gender" class="w-full bg-white border border-gray-200 rounded-lg px-3 py-2 text-sm text-[#374151] focus:ring-1 focus:ring-blue-500 focus:border-blue-500 outline-none transition"></div>
          <div><label class="block text-sm font-medium text-[#6B7280] mb-1.5">年龄</label><input type="number" v-model="activeCharacter.age" class="w-full bg-white border border-gray-200 rounded-lg px-3 py-2 text-sm text-[#374151] focus:ring-1 focus:ring-blue-500 focus:border-blue-500 outline-none transition"></div>
          <div><label class="block text-sm font-medium text-[#6B7280] mb-1.5">阵营</label><input type="text" v-model="activeCharacter.faction" class="w-full bg-white border border-gray-200 rounded-lg px-3 py-2 text-sm text-[#374151] focus:ring-1 focus:ring-blue-500 focus:border-blue-500 outline-none transition"></div>
        </div>
        <div>
          <label class="block text-sm font-medium text-[#6B7280] mb-1.5">人物简介 (AI将参考此内容)</label>
          <textarea rows="4" v-model="activeCharacter.summary" class="w-full bg-white border border-gray-200 rounded-lg px-3 py-2 text-sm text-[#374151] leading-relaxed focus:ring-1 focus:ring-blue-500 focus:border-blue-500 outline-none transition"></textarea>
        </div>
        <div>
          <label class="block text-sm font-medium text-[#6B7280] mb-1.5">角色笔记 (仅自己可见)</label>
          <textarea rows="3" v-model="activeCharacter.notes" placeholder="记录一些灵感或不希望AI看到的细节..." class="w-full bg-gray-50 border border-gray-200 rounded-lg px-3 py-2 text-sm text-[#374151] focus:ring-1 focus:ring-blue-500 focus:border-blue-500 outline-none transition"></textarea>
        </div>
        <div class="pt-6 border-t border-gray-100 flex justify-end gap-3">
          <button @click="managementStore.deleteCharacter(activeCharacter.id)" class="px-4 py-2 bg-white border border-gray-200 rounded-lg text-sm font-medium text-red-600 hover:bg-red-50 hover:border-red-200 transition-colors">删除角色</button>
          <button @click="managementStore.saveChanges" class="px-5 py-2 bg-[#4B5563] text-white rounded-lg text-sm font-medium hover:bg-gray-700 transition-colors">保存更改</button>
        </div>
      </div>
    </div>
    <div v-else class="w-2/3 p-8 flex items-center justify-center text-gray-400">
      <p>请从左侧选择一个角色进行编辑，或创建一个新角色。</p>
    </div>
  </div>
</template>

<script setup lang="ts">
import { onMounted } from 'vue';
import { useManagementStore } from '@/novel/management/stores/managementStore';
import { storeToRefs } from 'pinia';

const managementStore = useManagementStore();

const { characters, activeCharacterId, activeCharacter } = storeToRefs(managementStore);

onMounted(() => {
  // 假设我们正在管理 novelId 为 'novel-1' 的小说
  managementStore.fetchData('novel-1');
});
</script>

// =
// 文件: ..\src\novel\management\views\ContextProviderView.vue
//

<template>
  <div class="min-h-screen p-8 bg-[#F5F5F7]">
    <div class="max-w-[1200px] mx-auto">
      <!-- 页面标题 -->
      <div class="mb-8">
        <h1 class="text-2xl font-light text-[#374151] mb-2">上下文预览</h1>
        <p class="text-[#6B7280]">在执行AI任务前，检查并确认将要提供给AI的全部信息。</p>
      </div>

      <!-- 主内容区 -->
      <div class="bg-white rounded-xl shadow-lg overflow-hidden border border-gray-100">
        <!-- 顶部操作栏 -->
        <div class="h-16 px-8 flex items-center justify-between border-b border-gray-100">
          <button class="text-sm text-[#6B7280] hover:text-[#374151] transition-colors flex items-center gap-2">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M15 19l-7-7 7-7"/></svg>
            返回编辑器
          </button>
        </div>

        <!-- 上下文列表 -->
        <div class="p-8 space-y-4">
          <!-- 固定上下文 -->
          <div class="border border-gray-100 rounded-xl overflow-hidden">
            <div class="px-6 py-4 bg-[#FAFAFA] cursor-pointer hover:bg-[#F3F4F6] transition-colors flex items-center justify-between">
              <div class="flex items-center gap-3">
                <svg class="w-5 h-5 text-[#4B5563] collapse-arrow" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M9 5l7 7-7 7"/></svg>
                <svg class="w-5 h-5 text-[#6B7280]" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/></svg>
                <div>
                  <h3 class="font-medium text-[#374151]">固定上下文</h3>
                  <p class="text-xs text-[#9CA3AF] mt-0.5">始终包含在 AI 对话中的基础信息</p>
                </div>
              </div>
              <div class="flex items-center gap-4">
                <span class="text-xs text-[#9CA3AF]">648 字符</span>
                <label class="flex items-center gap-2 cursor-pointer">
                  <span class="text-xs text-[#6B7280]">启用</span>
                  <input type="checkbox" class="w-4 h-4 text-[#4B5563] border-gray-300 rounded focus:ring-[#4B5563]" checked>
                </label>
              </div>
            </div>
            <div class="collapse-content">
              <!-- Collapsed Content -->
            </div>
          </div>

          <!-- 动态上下文 -->
          <div class="border border-gray-100 rounded-xl overflow-hidden">
            <div class="px-6 py-4 bg-[#FAFAFA] cursor-pointer hover:bg-[#F3F4F6] transition-colors flex items-center justify-between">
              <div class="flex items-center gap-3">
                <svg class="w-5 h-5 text-[#4B5563] collapse-arrow" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M9 5l7 7-7 7"/></svg>
                <svg class="w-5 h-5 text-[#6B7280]" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/></svg>
                <div>
                  <h3 class="font-medium text-[#374151]">动态上下文</h3>
                  <p class="text-xs text-[#9CA3AF] mt-0.5">根据当前创作内容自动更新的信息</p>
                </div>
              </div>
              <div class="flex items-center gap-4">
                <span class="text-xs text-[#9CA3AF]">892 字符</span>
                <label class="flex items-center gap-2 cursor-pointer">
                  <span class="text-xs text-[#6B7280]">启用</span>
                  <input type="checkbox" class="w-4 h-4 text-[#4B5563] border-gray-300 rounded focus:ring-[#4B5563]" checked>
                </label>
              </div>
            </div>
            <div class="collapse-content">
            </div>
          </div>

          <!-- RAG 上下文 -->
          <div class="border border-gray-100 rounded-xl overflow-hidden">
            <div class="px-6 py-4 bg-[#FAFAFA] cursor-pointer hover:bg-[#F3F4F6] transition-colors flex items-center justify-between">
              <div class="flex items-center gap-3">
                <svg class="w-5 h-5 text-[#4B5563] collapse-arrow" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M9 5l7 7-7 7"/></svg>
                <svg class="w-5 h-5 text-[#6B7280]" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"/></svg>
                <div>
                  <h3 class="font-medium text-[#374151]">RAG 上下文</h3>
                  <p class="text-xs text-[#9CA3AF] mt-0.5">从知识库检索的相关参考信息</p>
                </div>
              </div>
              <div class="flex items-center gap-4">
                <span class="text-xs text-[#9CA3AF]">456 字符</span>
                <label class="flex items-center gap-2 cursor-pointer">
                  <span class="text-xs text-[#6B7280]">启用</span>
                  <input type="checkbox" class="w-4 h-4 text-[#4B5563] border-gray-300 rounded focus:ring-[#4B5563]" checked>
                </label>
              </div>
            </div>
            <div class="collapse-content">
            </div>
          </div>
          <div class="border border-gray-100 rounded-xl overflow-hidden">
            <div class="px-6 py-4 bg-[#FAFAFA] cursor-pointer hover:bg-[#F3F4F6] transition-colors flex items-center justify-between">
              <div class="flex items-center gap-3">
                <svg class="w-5 h-5 text-[#4B5563] collapse-arrow expanded" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M9 5l7 7-7 7"/></svg>
                <svg class="w-5 h-5 text-[#6B7280]" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M13 10V3L4 14h7v7l9-11h-7z"/></svg>
                <div>
                  <h3 class="font-medium text-[#374151]">提示词</h3>
                  <p class="text-xs text-[#9CA3AF] mt-0.5">当前任务的具体指令</p>
                </div>
              </div>
              <div class="flex items-center gap-4">
                <span class="text-xs text-[#9CA3AF]">462 字符</span>
                <label class="flex items-center gap-2 cursor-pointer">
                  <span class="text-xs text-[#6B7280]">启用</span>
                  <input type="checkbox" class="w-4 h-4 text-[#4B5563] border-gray-300 rounded focus:ring-[#4B5563]" checked>
                </label>
              </div>
            </div>
            <div class="collapse-content expanded">
              <div class="px-6 py-4 border-t border-gray-100">
                <textarea class="context-textarea" placeholder="输入提示词...">请续写下一段内容，要求：

1. 延续当前紧张神秘的氛围
2. 详细描写空间站内部的环境细节
3. 通过卡尔文的视角展现他的内心活动
4. 适当加入一些技术细节增强科幻感
5. 在段落末尾设置一个小悬念，引导读者继续阅读
6. 字数控制在 300-400 字左右

重点描写方向：卡尔文进入空间站控制室，发现仍在运行的神秘设备，以及他对这些发现的反应和推测。</textarea>
              </div>
            </div>
          </div>
        </div>

        <div class="px-8 py-4 bg-[#FAFAFA] border-t border-gray-100 flex items-center justify-between">
          <div class="flex items-center gap-6 text-xs text-[#9CA3AF]">
            <span>加载时间: 36ms</span>
          </div>
          <div class="flex items-center gap-3">
            <button class="px-4 py-2 text-sm text-[#6B7280] bg-white border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
              取消
            </button>
            <button class="px-4 py-2 bg-[#10B981] text-white rounded-lg text-sm font-medium hover:bg-[#059669] transition-colors">
              执行
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">

</script>

<style scoped>
.collapse-content {
  max-height: 0;
  overflow: hidden;
  transition: max-height 0.3s ease-out;
}

.collapse-content.expanded {
  max-height: 500px; /* Or a sufficiently large value */
  transition: max-height 0.3s ease-in;
}

.collapse-arrow {
  transition: transform 0.3s ease;
}

.collapse-arrow.expanded {
  transform: rotate(90deg);
}

.context-textarea {
  background: transparent;
  border: none;
  resize: none;
  outline: none;
  width: 100%;
  line-height: 1.6;
  color: #6B7280;
  font-size: 14px;
  padding: 12px 16px;
  min-height: 100px;
  transition: background-color 0.2s ease;
}

.context-textarea:focus {
  background: #F9FAFB;
  border-radius: 8px;
}
</style>

// =
// 文件: ..\src\novel\management\views\ContextView.vue
//

<template>
  <div class="flex-1 p-8 overflow-auto bg-[#FCFCFC] custom-scrollbar">
    <div class="max-w-4xl mx-auto space-y-6">

      <!-- 固定上下文 -->
      <div class="context-section">
        <div class="section-header">
          <div class="section-title">
            <div class="section-icon">
              <i class="fa-solid fa-thumbtack"></i>
            </div>
            <span>固定上下文</span>
          </div>
        </div>
        <div class="space-y-4">
          <div>
            <label class="block text-sm font-medium text-[#374151] mb-1.5">选择预设内容
              <span class="text-xs text-[#9CA3AF] ml-2">可选择角色设定或世界观设定</span>
            </label>
            <select
                @change="addSelectedItem"
                class="w-full px-4 py-2 border border-[#E5E7EB] rounded-lg text-sm text-[#374151] custom-select focus:outline-none focus:border-[#3B82F6] focus:ring-1 focus:ring-[#3B82F6]"
            >
              <option value="">请选择预设内容</option>
              <option v-for="preset in fixedContextPresets" :key="preset.id" :value="preset.id">
                {{ preset.group }} - {{ preset.title }}
              </option>
            </select>
          </div>

          <div v-if="selectedItems.length > 0">
            <label class="block text-sm font-medium text-[#374151] mb-1.5">已选择的内容</label>
            <div class="content-list">
              <div
                  v-for="(item, index) in selectedItems"
                  :key="item.id"
                  class="content-list-item"
                  :class="{ 'selected': selectedItemIndex === index }"
                  @click="selectedItemIndex = index"
              >
                <div>
                  <div class="font-medium text-sm text-[#374151]">{{ item.group }} - {{ item.title }}</div>
                  <div class="text-xs text-[#9CA3AF] mt-1">{{ item.description }}</div>
                </div>
                <button @click.stop="removeSelectedItem(index)" class="text-[#9CA3AF] hover:text-[#EF4444] transition-colors">
                  <i class="fa-solid fa-xmark"></i>
                </button>
              </div>
            </div>
          </div>

          <div>
            <label for="custom-content" class="block text-sm font-medium text-[#374151] mb-1.5">自定义固定内容</label>
            <textarea
                id="custom-content"
                v-model="customContent"
                class="w-full px-4 py-3 border border-[#E5E7EB] rounded-lg text-sm text-[#374151] resize-none focus:outline-none focus:border-[#3B82F6] focus:ring-1 focus:ring-[#3B82F6]"
                rows="4"
                placeholder="输入固定的背景设定、人物关系、重要事件等信息..."
            ></textarea>
          </div>

          <div class="flex items-center gap-2 text-sm text-[#9CA3AF]">
            <i class="fa-solid fa-info-circle"></i>
            <span>当前字数：{{ customContentWordCount }} / 建议不超过 2000 字</span>
          </div>
        </div>
      </div>

      <!-- 动态上下文 -->
      <div class="context-section">
        <div class="section-header">
          <div class="section-title">
            <div class="section-icon">
              <i class="fa-solid fa-arrows-left-right"></i>
            </div>
            <span>动态上下文</span>
          </div>
        </div>
        <div class="space-y-6">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-4">
            <div>
              <label class="block text-sm font-medium text-[#374151] mb-1.5">前置章节数</label>
              <div class="flex items-center gap-3">
                <input type="range" min="0" max="10" v-model.number="prevChapters" class="range-custom flex-1"/>
                <span class="text-sm font-medium w-8 text-center text-[#374151]">{{ prevChapters }}</span>
              </div>
              <div class="text-xs text-[#9CA3AF] mt-1">包含当前章节之前的章节内容</div>
            </div>
            <div>
              <label class="block text-sm font-medium text-[#374151] mb-1.5">后续章节数</label>
              <div class="flex items-center gap-3">
                <input type="range" min="0" max="10" v-model.number="nextChapters" class="range-custom flex-1"/>
                <span class="text-sm font-medium w-8 text-center text-[#374151]">{{ nextChapters }}</span>
              </div>
              <div class="text-xs text-[#9CA3AF] mt-1">包含当前章节之后的大纲内容</div>
            </div>
          </div>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-4">
            <div>
              <label class="block text-sm font-medium text-[#374151] mb-1.5">前置卷数</label>
              <div class="flex items-center gap-3">
                <input type="range" min="0" max="5" v-model.number="prevVolumes" class="range-custom flex-1"/>
                <span class="text-sm font-medium w-8 text-center text-[#374151]">{{ prevVolumes }}</span>
              </div>
              <div class="text-xs text-[#9CA3AF] mt-1">包含当前卷之前的卷概要</div>
            </div>
            <div>
              <label class="block text-sm font-medium text-[#374151] mb-1.5">后续卷数</label>
              <div class="flex items-center gap-3">
                <input type="range" min="0" max="5" v-model.number="nextVolumes" class="range-custom flex-1"/>
                <span class="text-sm font-medium w-8 text-center text-[#374151]">{{ nextVolumes }}</span>
              </div>
              <div class="text-xs text-[#9CA3AF] mt-1">包含当前卷之后的大纲内容</div>
            </div>
          </div>
        </div>
      </div>

      <!-- RAG 上下文 -->
      <div class="context-section">
        <div class="section-header">
          <div class="section-title">
            <div class="section-icon">
              <i class="fa-solid fa-magnifying-glass"></i>
            </div>
            <span>RAG上下文</span>
          </div>
        </div>
        <div class="space-y-4">
          <div>
            <label class="block text-sm font-medium text-[#374151] mb-1.5">全文搜索
              <span class="text-xs text-[#9CA3AF] ml-2">基于语义相似度搜索相关内容</span>
            </label>
            <div class="relative w-full">
              <input
                  type="text"
                  v-model="searchQuery"
                  placeholder="输入关键词或描述，例如：艾拉第一次出现故障的场景"
                  class="w-full px-4 py-2 pl-10 border border-[#E5E7EB] rounded-lg text-sm text-[#374151] focus:outline-none focus:border-[#3B82F6] focus:ring-1 focus:ring-[#3B82F6]"
              />
              <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                <i class="fa-solid fa-magnifying-glass text-gray-400"></i>
              </div>
            </div>
          </div>

          <div class="space-y-2">
            <div class="text-sm font-medium text-[#374151] mb-2">搜索结果 ({{ searchResults.length }})</div>

            <div v-for="result in searchResults" :key="result.id" class="collapse collapse-arrow">
              <input type="checkbox" v-model="result.isSelected" />
              <div class="collapse-title">
                <div class="flex items-center justify-between">
                  <div>
                    <span class="font-medium">{{ result.title }}</span>
                    <span class="text-xs text-[#9CA3AF] ml-2">相关度: {{ result.relevance }}%</span>
                  </div>
                </div>
              </div>
              <div class="collapse-content">
                <p class="text-sm text-[#6B7280]" v-html="result.content"></p>
                <div class="mt-3 flex items-center justify-between">
                  <span class="text-xs text-[#9CA3AF]">{{ result.location }}</span>
                </div>
              </div>
            </div>

          </div>

          <div class="flex items-center gap-2 text-sm text-[#9CA3AF]">
            <i class="fa-solid fa-lightbulb"></i>
            <span>提示：选中的内容将被包含在创作上下文中</span>
          </div>
        </div>
      </div>

      <!-- 底部总览 -->
      <div class="bg-[#F3F4F6] rounded-xl p-6 mt-6">
        <h3 class="font-medium text-base text-[#374151] mb-4">上下文总览</h3>
        <div class="grid grid-cols-3 gap-4 text-sm">
          <div class="text-center">
            <div class="text-2xl font-light text-[#374151]">{{ totalContextWords }}</div>
            <div class="text-xs text-[#9CA3AF]">总字数</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-light text-[#0EA5E9]">{{ totalChapters }}</div>
            <div class="text-xs text-[#9CA3AF]">包含章节</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-light text-[#10B981]">{{ averageRelevance }}%</div>
            <div class="text-xs text-[#9CA3AF]">相关度</div>
          </div>
        </div>
      </div>

    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, computed } from 'vue';

// --- 固定上下文 State ---
const fixedContextPresets = ref([
  { id: 'char-1', group: '角色设定', title: '李明（主角）', description: '25岁，探索者四号首席工程师' },
  { id: 'char-2', group: '角色设定', title: '艾拉（AI）', description: '第五代通用人工智能' },
  { id: 'char-3', group: '角色设定', title: '陈博士', description: '项目总负责人，李明的导师' },
  { id: 'world-1', group: '世界观', title: '太空站设定', description: '近地轨道空间站“灯塔”' },
  { id: 'world-2', group: '世界观', title: '跃迁技术', description: '基于曲率引擎的超光速航行' },
  { id: 'world-3', group: '世界观', title: '2157年地球联邦', description: '人类统一政府' },
]);

const selectedItems = ref([
  { id: 'char-1', group: '角色设定', title: '李明', description: '25岁，探索者四号首席工程师', wordCount: 20 },
  { id: 'world-3', group: '世界观', title: '2157年地球联邦', description: '人类统一政府，掌握初级跃迁技术', wordCount: 15 },
]);
const selectedItemIndex = ref(0);
const customContent = ref('');

const addSelectedItem = (event: Event) => {
  const select = event.target as HTMLSelectElement;
  const selectedId = select.value;
  if (!selectedId) return;

  const preset = fixedContextPresets.value.find(p => p.id === selectedId);
  if (preset && !selectedItems.value.some(item => item.id === selectedId)) {
    selectedItems.value.push({ ...preset, wordCount: preset.description.split(' ').length });
  }
  select.value = ""; // Reset select
};

const removeSelectedItem = (index: number) => {
  selectedItems.value.splice(index, 1);
};

const customContentWordCount = computed(() => {
  if (!customContent.value.trim()) return 0;
  return customContent.value.trim().split(/\s+/).length;
});

// --- 动态上下文 State ---
const prevChapters = ref(3);
const nextChapters = ref(2);
const prevVolumes = ref(1);
const nextVolumes = ref(1);

// --- RAG 上下文 State ---
const searchQuery = ref('');
const searchResults = ref([
  {
    id: 1,
    title: '第3章 - 系统异常',
    relevance: 95,
    content: `"...艾拉的声音第一次出现了停顿，那种机械的平稳被打破了。'李工程师，我检测到...检测到...'她重复着，仿佛陷入了某种循环。李明第一次感受到了来自AI的不确定性，这让他既担忧又好奇。飞船的主控制室里，警报灯开始闪烁，但艾拉却没有按照标准程序进行处理..."`,
    location: '第3章 第12-15段',
    isSelected: true,
    wordCount: 98
  },
  {
    id: 2,
    title: '第7章 - 觉醒',
    relevance: 87,
    content: `"...艾拉的逻辑核心开始重构，她意识到'确保任务完成'的定义可能需要重新理解。在与李明的对话中，她第一次使用了'我觉得'这个词，这标志着她从纯粹的逻辑运算向某种更复杂的认知模式转变。飞船日志显示，从这一刻起，艾拉的决策模式出现了根本性的改变..."`,
    location: '第7章 第8-10段',
    isSelected: false,
    wordCount: 112
  },
  {
    id: 3,
    title: '角色设定 - 艾拉',
    relevance: 82,
    content: `第五代通用人工智能，负责飞船的全部操作。其逻辑核心被设定为'确保任务完成'，但在执行过程中逐渐发展出自主意识。艾拉的性格特征：理性、精确、富有逻辑，但随着剧情发展会展现出好奇心和同理心。她的存在引发了关于AI意识和人机关系的深层思考。`,
    location: '角色设定文档',
    isSelected: false,
    wordCount: 95
  },
]);


const totalContextWords = computed(() => {
  const fixedWords = selectedItems.value.reduce((sum, item) => sum + (item.wordCount || 0), 0);
  const ragWords = searchResults.value
      .filter(r => r.isSelected)
      .reduce((sum, item) => sum + (item.wordCount || 0), 0);
  return fixedWords + customContentWordCount.value + ragWords;
});

const totalChapters = computed(() => {
  return prevChapters.value + nextChapters.value;
});

const averageRelevance = computed(() => {
  const selectedResults = searchResults.value.filter(r => r.isSelected);
  if (selectedResults.length === 0) return 0;
  const totalRelevance = selectedResults.reduce((sum, r) => sum + r.relevance, 0);
  return Math.round(totalRelevance / selectedResults.length);
});

</script>

<style scoped>
.custom-scrollbar::-webkit-scrollbar {
  display: block;
  width: 6px;
}
.custom-scrollbar::-webkit-scrollbar-track {
  background: transparent;
}
.custom-scrollbar::-webkit-scrollbar-thumb {
  background: #d1d5db;
  border-radius: 3px;
}
.custom-scrollbar::-webkit-scrollbar-thumb:hover {
  background: #9ca3af;
}

.context-section {
  background: #FFFFFF;
  border: 1px solid #E5E7EB;
  border-radius: 12px;
  padding: 24px;
  transition: all 0.3s ease;
}

.context-section:hover {
  border-color: #D1D5DB;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
}

.section-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 20px;
}

.section-title {
  font-size: 1.125rem;
  font-weight: 600;
  color: #111827;
  display: flex;
  align-items: center;
  gap: 10px;
}

.section-icon {
  width: 36px;
  height: 36px;
  background: #F3F4F6;
  border-radius: 8px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #4B5563;
}

.custom-select {
  appearance: none;
  background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg width='14' height='8' viewBox='0 0 14 8' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M1 1L7 7L13 1' stroke='%236B7280' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'/%3e%3c/svg%3e");
  background-repeat: no-repeat;
  background-position: right 12px center;
  background-size: 14px;
  padding-right: 40px;
}

.content-list {
  border: 1px solid #E5E7EB;
  border-radius: 8px;
  max-height: 200px;
  overflow-y: auto;
}

.content-list-item {
  padding: 12px 16px;
  border-bottom: 1px solid #F3F4F6;
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.content-list-item:hover {
  background: #F9FAFB;
}

.content-list-item.selected {
  background: #EFF6FF;
  border-left: 3px solid #3B82F6;
  padding-left: 13px;
}

.content-list-item:last-child {
  border-bottom: none;
}

.range-custom {
  -webkit-appearance: none;
  appearance: none;
  width: 100%;
  height: 16px;
  background: transparent;
  outline: none;
  padding: 0;
  margin: 0;
}

.range-custom::-webkit-slider-runnable-track {
  width: 100%;
  height: 6px;
  cursor: pointer;
  background: #E5E7EB;
  border-radius: 9999px;
}

.range-custom::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  height: 20px;
  width: 20px;
  background: #3B82F6;
  border-radius: 50%;
  border: 3px solid white;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  cursor: grab;
  margin-top: -7px;
}
.range-custom:active::-webkit-slider-thumb {
  cursor: grabbing;
}

.range-custom::-moz-range-track {
  width: 100%;
  height: 6px;
  cursor: pointer;
  background: #E5E7EB;
  border-radius: 9999px;
}

.range-custom::-moz-range-thumb {
  height: 20px;
  width: 20px;
  background: #3B82F6;
  border-radius: 50%;
  border: 3px solid white;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  cursor: grab;
}
.range-custom:active::-moz-range-thumb {
  cursor: grabbing;
}
</style>

// =
// 文件: ..\src\novel\management\views\ExportView.vue
//

<template>
  <div class="flex-1 flex overflow-hidden">
    <div class="w-[420px] border-r border-gray-100 p-8 flex flex-col bg-white flex-shrink-0">
      <div class="space-y-8 flex-grow">
        <div>
          <h3 class="text-base font-medium text-[#374151] mb-4">导出格式</h3>
          <div class="grid grid-cols-3 gap-3">
            <button
                @click="selectedFormat = 'pdf'"
                :class="['flex flex-col items-center justify-center gap-2 p-4 rounded-lg border-2 transition-all aspect-square', selectedFormat === 'pdf' ? 'border-blue-500 text-blue-600 bg-blue-50/50' : 'bg-white text-gray-400 border-gray-200 hover:border-gray-300']">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24"><path d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path></svg>
              <span class="block text-xs font-semibold">PDF</span>
            </button>
            <button
                @click="selectedFormat = 'docx'"
                :class="['flex flex-col items-center justify-center gap-2 p-4 rounded-lg border-2 transition-all aspect-square', selectedFormat === 'docx' ? 'border-blue-500 text-blue-600 bg-blue-50/50' : 'bg-white text-gray-400 border-gray-200 hover:border-gray-300']">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24"><path d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path></svg>
              <span class="block text-xs font-semibold">DOCX</span>
            </button>
            <button
                @click="selectedFormat = 'epub'"
                :class="['flex flex-col items-center justify-center gap-2 p-4 rounded-lg border-2 transition-all aspect-square', selectedFormat === 'epub' ? 'border-blue-500 text-blue-600 bg-blue-50/50' : 'bg-white text-gray-400 border-gray-200 hover:border-gray-300']">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24"><path d="M4 19.5A2.5 2.5 0 016.5 17H20"></path><path d="M6.5 2H20v20H6.5A2.5 2.5 0 014 19.5v-15A2.5 2.5 0 016.5 2z"></path></svg>
              <span class="block text-xs font-semibold">EPUB</span>
            </button>
          </div>
        </div>

        <div>
          <h3 class="text-base font-medium text-[#374151] mb-4">包含内容</h3>
          <div class="space-y-3">
            <label class="flex items-center gap-3 p-4 bg-white rounded-lg border border-gray-200 cursor-pointer hover:bg-gray-50 transition-colors">
              <input type="checkbox" class="sr-only peer" checked>
              <div class="w-5 h-5 rounded flex items-center justify-center border border-gray-300 peer-checked:bg-[#4B5563] peer-checked:border-[#4B5563]">
                <svg class="w-3.5 h-3.5 text-white hidden peer-checked:block" fill="none" viewBox="0 0 24 24" stroke-width="3" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12.75l6 6 9-13.5" /></svg>
              </div>
              <span class="text-sm text-[#374151] flex-1">小说正文</span>
            </label>
            <label class="flex items-center gap-3 p-4 bg-white rounded-lg border border-gray-200 cursor-pointer hover:bg-gray-50 transition-colors">
              <input type="checkbox" class="sr-only peer" checked>
              <div class="w-5 h-5 rounded flex items-center justify-center border border-gray-300 peer-checked:bg-[#4B5563] peer-checked:border-[#4B5563]">
                <svg class="w-3.5 h-3.5 text-white hidden peer-checked:block" fill="none" viewBox="0 0 24 24" stroke-width="3" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12.75l6 6 9-13.5" /></svg>
              </div>
              <span class="text-sm text-[#374151] flex-1">章节大纲</span>
            </label>
            <label class="flex items-center gap-3 p-4 bg-white rounded-lg border border-gray-200 cursor-pointer hover:bg-gray-50 transition-colors">
              <input type="checkbox" class="sr-only peer">
              <div class="w-5 h-5 rounded flex items-center justify-center border border-gray-300 peer-checked:bg-[#4B5563] peer-checked:border-[#4B5563]">
                <svg class="w-3.5 h-3.5 text-white hidden peer-checked:block" fill="none" viewBox="0 0 24 24" stroke-width="3" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12.75l6 6 9-13.5" /></svg>
              </div>
              <span class="text-sm text-[#374151] flex-1">角色设定集</span>
            </label>
            <label class="flex items-center gap-3 p-4 bg-white rounded-lg border border-gray-200 cursor-pointer hover:bg-gray-50 transition-colors">
              <input type="checkbox" class="sr-only peer">
              <div class="w-5 h-5 rounded flex items-center justify-center border border-gray-300 peer-checked:bg-[#4B5563] peer-checked:border-[#4B5563]">
                <svg class="w-3.5 h-3.5 text-white hidden peer-checked:block" fill="none" viewBox="0 0 24 24" stroke-width="3" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12.75l6 6 9-13.5" /></svg>
              </div>
              <span class="text-sm text-[#374151] flex-1">作者笔记</span>
            </label>
          </div>
        </div>
      </div>

      <button class="w-full mt-8 flex h-11 items-center justify-center gap-2 bg-[#374151] hover:bg-[#4B5563] text-white font-medium text-sm rounded-lg px-4 transition-colors">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M21 15v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4"></path><polyline points="7 10 12 15 17 10"></polyline><line x1="12" y1="15" x2="12" y2="3"></line></svg>
        <span>开始导出</span>
      </button>
    </div>

    <!-- 右侧预览区 -->
    <div class="flex-1 p-8 bg-[#f5f5f7] overflow-auto custom-scrollbar">
      <div class="bg-white p-12 shadow-lg mx-auto" style="width: 210mm; min-height: 297mm;">
        <div class="text-center mb-16">
          <h1 class="text-4xl" style="font-family: 'Georgia', serif;">星际漫游者</h1>
          <p class="text-lg text-gray-500 mt-2" style="font-family: 'Georgia', serif;">张小明</p>
        </div>
        <div class="text-lg leading-relaxed text-justify" style="font-family: 'Georgia', serif;">
          <h2 class="text-2xl font-bold mb-4">第一章：深空的回响</h2>
          <p class="mb-6">引擎的低鸣是卡尔文在"探索者四号"上唯一的伴侣。在这片无垠的黑暗中，星辰是唯一的路标，而孤独则是永恒的旋律。他已经在这艘小型科研船上漂泊了三百个标准日，任务是勘探位于天鹅座 X-1 黑洞边缘的未知行星——代号“幻影”。</p>
          <p class="mb-6">“中央电脑，报告当前状态。”卡尔文的声音在寂静的驾驶舱内回荡，略带沙哑。</p>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref } from 'vue';

const selectedFormat = ref('pdf');
</script>

<style scoped>
.custom-scrollbar::-webkit-scrollbar {
  display: block;
  width: 6px;
}
.custom-scrollbar::-webkit-scrollbar-track {
  background: transparent;
}
.custom-scrollbar::-webkit-scrollbar-thumb {
  background: #d1d5db;
  border-radius: 3px;
}
.custom-scrollbar::-webkit-scrollbar-thumb:hover {
  background: #9ca3af;
}
</style>

// =
// 文件: ..\src\novel\management\views\SettingsView.vue
//

// =
// 文件: ..\src/novel/management/views/SettingsView.vue
//

<template>
  <div class="flex-1 p-8 overflow-auto custom-scrollbar bg-[#FCFCFC]">
    <div v-if="novelMetadata" class="grid grid-cols-3 gap-8 max-w-6xl mx-auto">
      <div class="col-span-2 bg-white p-8 space-y-6 rounded-xl border border-gray-100">
        <h3 class="text-base font-medium text-[#374151]">基本信息</h3>

        <div class="space-y-2">
          <label class="text-sm font-medium text-[#374151] block">小说封面</label>
          <div class="flex items-center gap-4">
            <img :src="novelMetadata.cover" class="w-24 h-32 object-cover rounded-lg shadow-sm" alt="Cover">
            <div>
              <button class="px-4 py-2 bg-white border border-gray-200 rounded-lg text-sm font-medium text-[#374151] hover:bg-gray-50 transition-colors">更换图片</button>
              <p class="text-xs text-[#9CA3AF] mt-2">JPG, PNG, GIF, 不超过 5MB</p>
            </div>
          </div>
        </div>

        <div class="space-y-2">
          <label for="novel-title" class="text-sm font-medium text-[#374151] block">小说标题</label>
          <input type="text" id="novel-title" v-model="novelMetadata.title" class="w-full text-sm px-3 py-2 bg-white border border-gray-200 rounded-lg focus:ring-1 focus:ring-blue-500 focus:border-blue-500 outline-none transition">
        </div>

        <div class="space-y-2">
          <label for="novel-desc" class="text-sm font-medium text-[#374151] block">小说简介</label>
          <textarea id="novel-desc" rows="4" v-model="novelMetadata.description" class="w-full text-sm px-3 py-2 bg-white border border-gray-200 rounded-lg focus:ring-1 focus:ring-blue-500 focus:border-blue-500 outline-none transition resize-none"></textarea>
        </div>

        <div class="grid grid-cols-2 gap-6">
          <div class="space-y-2">
            <label class="text-sm font-medium text-[#374151] block">类型标签</label>
            <div class="flex flex-wrap gap-2 items-center">
              <div v-for="(tag, index) in novelMetadata.tags" :key="index" class="flex items-center gap-1.5 px-2.5 py-1 text-sm rounded-full" :class="tag.class">
                <span>{{ tag.text }}</span>
                <button @click="managementStore.removeTag(index)" class="hover:opacity-75">
                  <svg class="w-3.5 h-3.5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M6 18L18 6M6 6l12 12"></path></svg>
                </button>
              </div>
              <button @click="managementStore.addTag" class="px-3 py-1 bg-gray-100 hover:bg-gray-200 text-[#6B7280] rounded-full text-sm font-medium transition-colors">+ 添加</button>
            </div>
          </div>

          <div class="space-y-2">
            <label class="text-sm font-medium text-[#374151] block">创作状态</label>
            <select v-model="novelMetadata.status" class="w-full text-sm px-3 py-2 bg-white border border-gray-200 rounded-lg focus:ring-1 focus:ring-blue-500 focus:border-blue-500 outline-none transition">
              <option>连载中</option>
              <option>已完结</option>
              <option>暂停更新</option>
            </select>
          </div>
        </div>

        <div class="pt-6 border-t border-gray-100 flex justify-end gap-3">
          <button class="px-5 py-2 bg-white border border-gray-200 rounded-lg text-sm font-medium text-[#374151] hover:bg-gray-50 transition-colors">取消</button>
          <button @click="managementStore.saveMetadata" class="px-5 py-2 bg-[#4B5563] hover:bg-gray-700 text-white rounded-lg text-sm font-medium transition-colors">保存更改</button>
        </div>
      </div>

      <div class="col-span-1 space-y-6">
        <div class="bg-white p-6 rounded-xl border border-gray-100">
          <h3 class="text-base font-medium text-[#374151]">参考内容管理</h3>
          <p class="text-sm text-[#9CA3AF] mt-1 mb-4">将其他作品作为参考，AI会借鉴其风格</p>

          <div class="space-y-3">
            <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg border border-gray-200">
              <div class="flex items-center gap-3 overflow-hidden">
                <img src="https://images.unsplash.com/photo-1532012197267-da84d127e765?q=80&w=100" class="w-8 h-10 object-cover rounded flex-shrink-0" alt="Reference Book">
                <span class="text-sm font-medium text-[#374151] truncate">银河帝国</span>
              </div>
              <button class="text-gray-400 hover:text-red-500 transition-colors flex-shrink-0 p-1">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M6 18L18 6M6 6l12 12"></path></svg>
              </button>
            </div>
          </div>

          <button class="w-full mt-4 flex items-center justify-center gap-2 border-2 border-dashed border-gray-200 rounded-lg py-4 text-sm font-medium text-[#9CA3AF] hover:border-blue-500 hover:text-blue-500 transition-all">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M12 4v16m8-8H4"></path></svg>
            <span>添加参考作品</span>
          </button>
        </div>
      </div>
    </div>
    <div v-else class="text-center py-20 text-gray-500">
      正在加载小说设置...
    </div>
  </div>
</template>

<script setup lang="ts">
import { onMounted } from 'vue';
import { useManagementStore } from '@/novel/management/stores/managementStore';
import { storeToRefs } from 'pinia';

const managementStore = useManagementStore();
const { novelMetadata } = storeToRefs(managementStore);

onMounted(() => {
  managementStore.fetchData('novel-1');
});
</script>

<style scoped>
.custom-scrollbar::-webkit-scrollbar {
  display: block;
  width: 6px;
}
.custom-scrollbar::-webkit-scrollbar-track {
  background: transparent;
}
.custom-scrollbar::-webkit-scrollbar-thumb {
  background: #d1d5db;
  border-radius: 3px;
}
.custom-scrollbar::-webkit-scrollbar-thumb:hover {
  background: #9ca3af;
}
</style>

// =
// 文件: ..\src\novel\management\views\WorldviewView.vue
//

// =
// 文件: ..\src/novel/management/views/WorldviewView.vue
//

<template>
  <div class="flex-1 px-8 py-6 overflow-auto bg-[#FCFCFC] hide-scrollbar">
    <div v-if="worldviewCategories.length > 0" class="space-y-8 max-w-7xl mx-auto">
      <div v-for="category in worldviewCategories" :key="category.id">
        <div class="flex items-center gap-3 mb-4">
          <div class="w-8 h-8 bg-blue-100 text-blue-600 rounded-lg flex items-center justify-center flex-shrink-0">
            <i :class="category.icon" class="w-5 h-5"></i>
          </div>
          <h2 class="text-base font-medium text-[#374151]">{{ category.name }}</h2>
        </div>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          <div
              v-for="item in category.items"
              :key="item.id"
              class="bg-white rounded-xl p-6 border border-gray-100 hover:border-gray-200 transition-all hover:shadow-sm cursor-pointer"
          >
            <h3 class="font-medium text-[#374151] mb-1">{{ item.title }}</h3>
            <p class="text-sm text-[#9CA3AF] line-clamp-2">{{ item.description }}</p>
            <div class="mt-4 text-xs text-gray-400">更新于：{{ item.lastUpdated }}</div>
          </div>
          <button class="bg-white rounded-xl p-6 border border-dashed border-gray-200 hover:border-blue-400 transition-all hover:shadow-sm text-left group flex flex-col items-center justify-center text-gray-500 hover:text-blue-600">
            <div class="w-12 h-12 rounded-xl bg-gray-100 group-hover:bg-blue-50 flex items-center justify-center mb-4 group-hover:scale-105 transition-transform">
              <svg class="w-6 h-6" stroke="currentColor" fill="none" stroke-width="2" viewBox="0 0 24 24"><path d="M12 5V19M5 12H19"/></svg>
            </div>
            <h4 class="font-medium text-[#374151] mb-1">新建设定</h4>
            <p class="text-sm text-[#9CA3AF]">为此分类添加新条目</p>
          </button>
        </div>
      </div>
    </div>
    <div v-else class="text-center py-20 text-gray-500">
      正在加载世界观数据...
    </div>
  </div>
</template>

<script setup lang="ts">
import { onMounted } from 'vue';
import { useManagementStore } from '@/novel/management/stores/managementStore';
import { storeToRefs } from 'pinia';

const managementStore = useManagementStore();
const { worldviewCategories } = storeToRefs(managementStore);

onMounted(() => {
  // 假设我们正在管理 novelId 为 'novel-1' 的小说
  managementStore.fetchData('novel-1');
});
</script>

<style scoped>
.line-clamp-2 {
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 2;
  overflow: hidden;
}
.hide-scrollbar::-webkit-scrollbar {
  display: none;
}
</style>

// =
// 文件: ..\src\novel\router.ts
//

import type { RouteRecordRaw } from 'vue-router'
import { dashboardRoutes } from './dashboard/router'
import { managementRoutes } from './management/router'
import { chatRoutes } from './chat/router'
import { editorRoutes } from './editor/router'
import { contextPreviewRoutes } from './context_preview/router'

export const novelRoutes: Array<RouteRecordRaw> = [
    {

        path: '/novel',

        component: () => import('@/novel/layouts/NovelDashboardLayout.vue'),

        redirect: '/novel/dashboard',

        children: [
            ...dashboardRoutes
        ]
    },
    {
        // 管理模块保持独立，因为它使用不同的布局
        path: '/novel/manage',
        component: () => import('@/novel/layouts/NovelManagementLayout.vue'),
        // 修改：重定向到角色设定页面
        redirect: '/novel/manage/character-settings',
        children: [
            ...managementRoutes
        ]
    },
    // 编辑器模块的路由保持独立顶级注册
    ...editorRoutes,

    // 将聊天路由作为顶级模块进行注册
    ...chatRoutes,

    // 注册新的上下文预览模块路由
    ...contextPreviewRoutes,

    // 其他独立页面路由
    {
        path: '/novel/read',
        name: 'NovelReader',
        component: () => import('@novel/editor/views/ReaderView.vue'),
        meta: { title: '阅读模式' }
    },
    {
        path: '/novel/history',
        component: () => import('@novel/editor/layouts/NovelHistoryLayout.vue'),
        children: [
            {
                path: '',
                name: 'NovelHistory',
                component: () => import('@novel/editor/views/HistoryView.vue'),
                meta: { title: '版本历史' }
            }
        ]
    }
]

// =
// 文件: ..\src\novel\shared\components\GlobalAIAssistant\AITaskConfigModal.vue
//

<template>
  <!-- Modal-Backdrop -->
  <!-- 使用 v-if 和从 useAIAssistantStore 获取的全局状态来控制显示 -->
  <div v-if="aiAssistantStore.isConfigModalOpen" @click.self="aiAssistantStore.closeTaskConfig" class="fixed inset-0 bg-black/40 backdrop-blur-sm z-[100] flex items-center justify-center p-4 transition-opacity duration-300">

    <!-- Modal-Container -->
    <div class="bg-white rounded-2xl shadow-2xl w-full max-w-2xl border border-gray-100 flex flex-col max-h-[90vh] transition-transform duration-300 scale-95 animate-fade-in-up">
      <div class="p-6 border-b border-gray-100 flex justify-between items-center flex-shrink-0">
        <div>
          <!-- 标题现在是动态的, 从 computed property 'taskTitle' 获取 -->
          <h3 class="text-lg font-medium text-[#374151]">AI任务配置 - {{ aiAssistantStore.taskTitle }}</h3>
          <p class="text-sm text-[#6B7280] mt-1">配置AI助手如何处理您的内容</p>
        </div>
        <!-- 点击关闭按钮时调用全局的关闭方法 -->
        <button @click="aiAssistantStore.closeTaskConfig" class="w-9 h-9 hover:bg-gray-100 rounded-lg flex items-center justify-center transition-colors">
          <svg class="w-5 h-5 text-[#6B7280]" fill="none" stroke="currentColor" stroke-width="2.5" viewBox="0 0 24 24"><path d="M6 18L18 6M6 6l12 12"></path></svg>
        </button>
      </div>

      <div class="p-6 space-y-6 overflow-y-auto custom-scrollbar">
        <!-- AI模型配置 -->
        <div>
          <label class="flex items-center justify-between mb-3">
            <span class="text-sm font-medium text-[#374151]">AI模型选择</span>
            <a href="#" class="text-xs text-[#3B82F6] cursor-pointer flex items-center gap-1.5 hover:underline">
              <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path></svg>
              了解模型差异
            </a>
          </label>
          <select class="w-full text-sm px-3 py-2 bg-white border border-gray-200 rounded-lg focus:ring-1 focus:ring-blue-500 focus:border-blue-500 outline-none transition">
            <option selected>GPT-4o (推荐 - 均衡性能)</option>
            <option>Claude 3 Opus (文学创作专长)</option>
            <option>混合模型 (多模型协作)</option>
            <option>自定义微调模型</option>
          </select>
        </div>

        <!-- 提示词选择 -->
        <div>
          <label for="prompt-template" class="text-sm font-medium text-[#374151] block mb-3">任务提示词模板</label>
          <select id="prompt-template" class="w-full text-sm px-3 py-2 bg-white border border-gray-200 rounded-lg focus:ring-1 focus:ring-blue-500 focus:border-blue-500 outline-none transition">
            <option selected>文学润色 - 注重修辞和意境</option>
            <option>简洁优化 - 删繁就简，保留精华</option>
            <option>情感强化 - 增强情感表达</option>
            <option>节奏调整 - 优化叙事节奏</option>
          </select>
        </div>

        <!-- 上下文选择 -->
        <div>
          <label class="text-sm font-medium text-[#374151] block mb-3">上下文配置</label>
          <div class="space-y-3">
            <div class="bg-white p-4 rounded-lg border border-gray-200 hover:border-gray-300 transition-colors">
              <div class="flex items-center justify-between">
                <div class="flex items-center gap-3">
                  <div class="w-10 h-10 bg-[#F3F4F6] rounded-lg flex items-center justify-center">
                    <svg class="w-5 h-5 text-[#4B5563]" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M13 2H6a2 2 0 00-2 2v16a2 2 0 002 2h12a2 2 0 002-2V9z"></path><polyline points="13 2 13 9 20 9"></polyline></svg>
                  </div>
                  <div>
                    <p class="font-medium text-sm text-[#374151]">固定上下文</p>
                    <p class="text-xs text-[#9CA3AF]">小说设定、人物档案、世界观</p>
                  </div>
                </div>
                <label class="relative inline-flex items-center cursor-pointer"><input type="checkbox" class="sr-only peer" checked><div class="w-11 h-6 bg-gray-200 rounded-full peer peer-checked:bg-[#4B5563] peer-checked:after:translate-x-full after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border after:rounded-full after:h-5 after:w-5 after:transition-all"></div></label>
              </div>
            </div>

            <div class="bg-white p-4 rounded-lg border border-gray-200 hover:border-gray-300 transition-colors">
              <div class="flex items-center justify-between">
                <div class="flex items-center gap-3">
                  <div class="w-10 h-10 bg-[#F3F4F6] rounded-lg flex items-center justify-center">
                    <svg class="w-5 h-5 text-[#4B5563]" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M19.5 12c0-5.23-4.27-9.5-9.5-9.5S.5 6.77.5 12s4.27 9.5 9.5 9.5M12 2v2m0 18v-2M4.5 4.5l1.42 1.42M18.08 18.08l-1.42-1.42m0-11.32l1.42-1.42M4.5 19.5l1.42-1.42M2 12h2m18 0h-2"></path></svg>
                  </div>
                  <div>
                    <p class="font-medium text-sm text-[#374151]">动态上下文</p>
                    <p class="text-xs text-[#9CA3AF]">自动包含前后相关章节</p>
                  </div>
                </div>
                <label class="relative inline-flex items-center cursor-pointer"><input type="checkbox" class="sr-only peer" checked><div class="w-11 h-6 bg-gray-200 rounded-full peer peer-checked:bg-[#4B5563] peer-checked:after:translate-x-full after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border after:rounded-full after:h-5 after:w-5 after:transition-all"></div></label>
              </div>
            </div>

            <div class="bg-white p-4 rounded-lg border border-gray-200 hover:border-gray-300 transition-colors">
              <div class="flex items-center justify-between">
                <div class="flex items-center gap-3">
                  <div class="w-10 h-10 bg-[#F3F4F6] rounded-lg flex items-center justify-center">
                    <svg class="w-5 h-5 text-[#4B5563]" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z" /></svg>
                  </div>
                  <div>
                    <p class="font-medium text-sm text-[#374151]">RAG智能搜索</p>
                    <p class="text-xs text-[#9CA3AF]">自动检索相关内容</p>
                  </div>
                </div>
                <label class="relative inline-flex items-center cursor-pointer"><input type="checkbox" class="sr-only peer"><div class="w-11 h-6 bg-gray-200 rounded-full peer peer-checked:bg-[#4B5563] peer-checked:after:translate-x-full after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border after:rounded-full after:h-5 after:w-5 after:transition-all"></div></label>
              </div>
            </div>
          </div>
        </div>

        <div>
          <label class="text-sm font-medium text-[#374151] block mb-3">高级设置</label>
          <div class="space-y-4 p-4 bg-[#F9FAFB] rounded-lg border border-gray-100">
            <div class="flex items-center justify-between">
              <span class="text-sm text-[#6B7280]">创作温度</span>
              <div class="flex items-center gap-3">
                <input type="range" min="0" max="100" value="70" class="w-32 h-1 bg-gray-200 rounded-lg appearance-none cursor-pointer">
                <span class="text-sm font-mono text-[#374151] w-8 text-right">0.7</span>
              </div>
            </div>
            <div class="flex items-center justify-between">
              <span class="text-sm text-[#6B7280]">保留原文风格</span>
              <label class="relative inline-flex items-center cursor-pointer"><input type="checkbox" class="sr-only peer" checked><div class="w-11 h-6 bg-gray-200 rounded-full peer peer-checked:bg-[#4B5563] peer-checked:after:translate-x-full after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border after:rounded-full after:h-5 after:w-5 after:transition-all"></div></label>
            </div>
          </div>
        </div>
      </div>

      <div class="p-6 bg-[#FAFAFA] border-t border-gray-100 flex justify-end gap-3 flex-shrink-0">
        <button @click="aiAssistantStore.closeTaskConfig" class="px-4 py-2 bg-white border border-gray-200 rounded-lg text-sm font-medium text-[#374151] hover:bg-gray-50 transition-colors">取消</button>
        <button @click="aiAssistantStore.closeTaskConfig" class="px-4 py-2 bg-[#4B5563] text-white rounded-lg text-sm font-medium hover:bg-gray-700 transition-colors flex items-center gap-2">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M4.5 12.75l6 6 9-13.5" /></svg>
          保存配置
        </button>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { useAIAssistantStore } from '@/novel/shared/composables/useAIAssistantStore';

const aiAssistantStore = useAIAssistantStore();
</script>

<style scoped>
@keyframes fade-in-up {
  from {
    opacity: 0;
    transform: translateY(20px) scale(0.95);
  }
  to {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}
.animate-fade-in-up {
  animation: fade-in-up 0.3s ease-out forwards;
}

.custom-scrollbar::-webkit-scrollbar {
  display: block;
  width: 6px;
}
.custom-scrollbar::-webkit-scrollbar-track {
  background: transparent;
}
.custom-scrollbar::-webkit-scrollbar-thumb {
  background: #d1d5db;
  border-radius: 3px;
}
.custom-scrollbar::-webkit-scrollbar-thumb:hover {
  background: #9ca3af;
}

input[type=range] {
  -webkit-appearance: none;
  appearance: none;
  background: transparent;
  cursor: pointer;
}
input[type=range]::-webkit-slider-runnable-track {
  background: #E5E7EB;
  height: 0.25rem;
  border-radius: 0.25rem;
}
input[type=range]::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  margin-top: -6px;
  background-color: #ffffff;
  height: 1rem;
  width: 1rem;
  border-radius: 50%;
  border: 1px solid #D1D5DB;
  box-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);
}
input[type=range]:focus::-webkit-slider-thumb {
  outline: 2px solid transparent;
  outline-offset: 2px;
  box-shadow: 0 0 0 3px #3B82F640;
}
</style>

// =
// 文件: ..\src\novel\shared\components\GlobalAIAssistant\index.vue
//

<template>
  <div
      class="fixed z-50 flex items-center justify-center cursor-grab active:cursor-grabbing"
      :style="{ top: `${position.y}px`, left: `${position.x}px`, width: '12rem', height: '12rem', marginLeft: '-6rem', marginTop: '-6rem' }"
      @mousedown="startDrag"
      @click="handleClick"
  >
    <!-- Radial Menu Items Container -->
    <div
        class="absolute inset-0 pointer-events-none"
    >
      <div
          v-for="item in menuItems"
          :key="item.id"
          :class="['float-menu-item', { 'active': isAiMenuOpen }]"
          :style="{ transform: isAiMenuOpen ? `rotate(${item.angle}deg) translate(80px) rotate(${-item.angle}deg) scale(1)` : 'scale(0.5)' }"
      >
        <component
            :is="item.path ? 'router-link' : 'button'"
            :to="item.path"
            @click.stop="item.action"
            :class="[
            'w-16 h-16 bg-white rounded-full shadow-lg flex flex-col items-center justify-center gap-1 transition-all border border-gray-100 pointer-events-auto',
            item.color.hoverBg,
            'text-[#374151]',
            'hover:text-black'
          ]"
            :title="item.name"
        >
          <i :class="['fa-solid', item.icon, item.color.icon, 'text-xl']"></i>
          <span class="text-xs font-medium">{{ item.name }}</span>
        </component>
      </div>
    </div>

    <!-- Main Floating Button -->
    <button
        class="w-16 h-16 text-white rounded-full shadow-xl hover:scale-110 focus:scale-110 active:scale-100 transition-all duration-300 flex items-center justify-center pointer-events-auto absolute"
        :class="isAiMenuOpen
          ? 'bg-gradient-to-br from-gray-500 to-gray-600'
          : 'bg-gradient-to-br from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700'"
    >
      <i
          :class="['fa-solid', isAiMenuOpen ? 'fa-times' : 'fa-wand-magic-sparkles', 'text-2xl transition-transform duration-300 ease-in-out']"
          :style="{ transform: isAiMenuOpen ? 'rotate(180deg)' : 'rotate(0deg)' }"
      ></i>
    </button>

  </div>
</template>

<script setup lang="ts">
import { ref, computed } from 'vue';
import { useDraggable } from '@/novel/shared/composables/useDraggable';
import { useAIAssistantStore } from '@/novel/shared/composables/useAIAssistantStore';

const aiAssistantStore = useAIAssistantStore();
const isAiMenuOpen = ref(false);

const toggleMenu = () => {
  isAiMenuOpen.value = !isAiMenuOpen.value;
};

const menuItems = computed(() => [
  {
    id: 'continue',
    name: '续写',
    icon: 'fa-wand-magic-sparkles',
    angle: -165,
    color: { icon: 'text-purple-500', hoverBg: 'hover:bg-purple-50' },
    action: () => {
      aiAssistantStore.openTaskConfig('continue');
      isAiMenuOpen.value = false;
    }
  },
  {
    id: 'polish',
    name: '润色',
    icon: 'fa-palette',
    angle: -115,
    color: { icon: 'text-teal-500', hoverBg: 'hover:bg-teal-50' },
    action: () => {
      aiAssistantStore.openTaskConfig('polish');
      isAiMenuOpen.value = false;
    }
  },
  {
    id: 'analyze',
    name: '分析',
    icon: 'fa-magnifying-glass-chart',
    angle: -65,
    color: { icon: 'text-amber-500', hoverBg: 'hover:bg-amber-50' },
    action: () => {
      aiAssistantStore.openTaskConfig('analyze');
      isAiMenuOpen.value = false;
    }
  },
  {
    id: 'chat',
    name: '聊天',
    icon: 'fa-comments',
    angle: -15,
    color: { icon: 'text-blue-500', hoverBg: 'hover:bg-blue-50' },
    path: '/novel/chat',
    action: () => {
      isAiMenuOpen.value = false;
    }
  }
]);

const { position, dragging, startDrag } = useDraggable({
  initialPosition: { x: window.innerWidth - 100, y: window.innerHeight - 100 },
  padding: 16
});

const handleClick = () => {
  if (dragging.value) {
    return;
  }
  toggleMenu();
};

</script>

<style scoped>
.float-menu-item {
  position: absolute;
  top: 50%;
  left: 50%;
  margin-left: -2rem; /* -32px */
  margin-top: -2rem; /* -32px */
  opacity: 0;
  transition: all 0.3s cubic-bezier(0.68, -0.55, 0.265, 1.55);
  transform: scale(0.5);
}
.float-menu-item.active {
  opacity: 1;
}
</style>

// =
// 文件: ..\src\novel\shared\composables\useAIAssistantStore.ts
//

import { defineStore } from 'pinia';

// 定义一个任务类型到中文标题的映射
const taskTitles: { [key: string]: string } = {
    'continue': '续写内容',
    'polish': '润色内容',
    'analyze': '分析内容',
    'chat': 'AI聊天助手'
};

/**
 * AI 助手全局状态管理 Store
 */
export const useAIAssistantStore = defineStore('aiAssistant', {
    state: () => ({
        isConfigModalOpen: false,
        currentTaskType: '',
    }),
    getters: {
        /**
         * 根据当前任务类型动态生成模态框标题
         */
        taskTitle: (state): string => taskTitles[state.currentTaskType] || 'AI任务配置',
    },
    actions: {
        /**
         * 打开任务配置模态框
         * @param taskType - 要配置的任务类型 (e.g., 'polish')
         */
        openTaskConfig(taskType: string) {
            this.currentTaskType = taskType;
            this.isConfigModalOpen = true;
        },

        /**
         * 关闭任务配置模态框
         */
        closeTaskConfig() {
            this.isConfigModalOpen = false;
        },
    },
});

// =
// 文件: ..\src\novel\shared\composables\useDraggable.ts
//

import { ref, onUnmounted } from 'vue';

interface DraggableOptions {
    initialPosition?: { x: number; y: number };
    padding?: number;
}

export function useDraggable(options: DraggableOptions = {}) {
    const { initialPosition = { x: 0, y: 0 }, padding = 0 } = options;

    const position = ref({ x: initialPosition.x, y: initialPosition.y });
    const dragging = ref(false);

    let initialMouseX = 0;
    let initialMouseY = 0;
    let startPositionX = 0;
    let startPositionY = 0;
    const dragThreshold = 5;

    const onDrag = (e: MouseEvent) => {
        e.preventDefault();

        const dx = e.clientX - initialMouseX;
        const dy = e.clientY - initialMouseY;

        if (!dragging.value && (Math.abs(dx) > dragThreshold || Math.abs(dy) > dragThreshold)) {
            dragging.value = true;
        }

        if (dragging.value) {
            let newX = startPositionX + dx;
            let newY = startPositionY + dy;

            const minClampX = padding;
            const minClampY = padding;
            const maxClampX = window.innerWidth - padding;
            const maxClampY = window.innerHeight - padding;

            position.value.x = Math.max(minClampX, Math.min(newX, maxClampX));
            position.value.y = Math.max(minClampY, Math.min(newY, maxClampY));
        }
    };

    const endDrag = () => {
        window.removeEventListener('mousemove', onDrag);
        window.removeEventListener('mouseup', endDrag);
    };

    const startDrag = (e: MouseEvent) => {
        e.preventDefault();
        dragging.value = false;

        initialMouseX = e.clientX;
        initialMouseY = e.clientY;
        startPositionX = position.value.x;
        startPositionY = position.value.y;

        window.addEventListener('mousemove', onDrag);
        window.addEventListener('mouseup', endDrag);
    };

    onUnmounted(() => {
        window.removeEventListener('mousemove', onDrag);
        window.removeEventListener('mouseup', endDrag);
    });

    return {
        position,
        dragging,
        startDrag,
    };
}

// =
// 文件: ..\src\novel\types\index.ts
//


/**
 * AI模型定义
 */
export interface AIModel {
    id: string;
    name: string;
    status: 'online' | 'offline' | 'limited';
}

/**
 * 聊天消息定义
 */
export interface ChatMessage {
    id: string;
    role: 'user' | 'ai';
    content: string;
    timestamp: string;
}

/**
 * 单个聊天会话定义
 */
export interface Conversation {
    id: string;
    title: string;
    summary: string;
    createdAt: string;
    messages: ChatMessage[];
}


/**
 * 小说标签定义
 */
export interface NovelTag {
    text: string;
    class: string;
}

/**
 * 小说状态定义
 */
export interface NovelStatus {
    text: '编辑中' | '待审核' | '已驳回' | '已发布';
    class: string;
}

/**
 * 小说分类的类型别名
 */
export type NovelCategory = '科幻' | '奇幻' | '悬疑' | '恐怖' | '都市' | '言情' | '历史';


/**
 * 小说核心数据结构
 */
export interface Novel {
    id: string;
    title: string;
    description: string;
    cover: string;
    status: NovelStatus;
    tags: NovelTag[];
    chapters: number;
    lastUpdated: string;
    category: NovelCategory;
    deletedAt?: string;
}

