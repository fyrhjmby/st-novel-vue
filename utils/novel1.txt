// == 扫描摘要 ==
//
// == 文件内容 ==

// =
// 文件: ..\src\novel\assets\styles\main.css
//



.novel-module {

}


.hide-scrollbar::-webkit-scrollbar {
    display: none;
}



// =
// 文件: ..\src\novel\chat\router.ts
//

import type { RouteRecordRaw } from 'vue-router'

export const chatRoutes: Array<RouteRecordRaw> = [
    {
        path: '/novel/chat',
        component: () => import('@/novel/layouts/NovelChatLayout.vue'),
        children: [
            {
                path: '',
                name: 'NovelChat',
                component: () => import('@/novel/chat/views/ChatView.vue'),
                meta: { title: 'AI聊天助手' }
            }
        ]
    },
]

// =
// 文件: ..\src\novel\chat\views\ChatView.vue
//

<template>
  <div class="flex-1 flex overflow-hidden">
    <!-- 左侧聊天列表 -->
    <aside class="w-80 bg-[#FAFAFA] border-r border-gray-100 flex flex-col flex-shrink-0">
      <div class="p-4 border-b border-gray-100">
        <button class="w-full flex items-center justify-center gap-2 px-4 py-2 bg-[#4B5563] text-white rounded-lg text-sm font-medium hover:bg-gray-700 transition-colors">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M12 5V19M5 12H19"/></svg>
          新建对话
        </button>
      </div>

      <div class="flex-1 p-4 space-y-2 overflow-y-auto">
        <!-- 选中状态 -->
        <a href="#" class="block p-3 bg-[#EFF6FF] border border-[#3B82F6] rounded-lg">
          <div class="flex items-start gap-3">
            <div class="w-8 h-8 bg-[#3B82F6] rounded-full flex items-center justify-center flex-shrink-0">
              <svg class="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 24 24"><path d="M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM6 9h12v2H6V9zm8 5H6v-2h8v2zm4-6H6V6h12v2z"></path></svg>
            </div>
            <div class="flex-1 min-w-0">
              <p class="font-medium text-sm text-[#374151] truncate">角色性格讨论</p>
              <p class="text-xs text-[#6B7280] truncate mt-1">关于卡尔文的内心世界...</p>
              <p class="text-xs text-[#9CA3AF] mt-2">2小时前</p>
            </div>
          </div>
        </a>

        <!-- 未选中状态 -->
        <a href="#" class="block p-3 hover:bg-gray-100 rounded-lg transition-colors">
          <div class="flex items-start gap-3">
            <div class="w-8 h-8 bg-[#F3F4F6] rounded-full flex items-center justify-center flex-shrink-0">
              <svg class="w-4 h-4 text-[#6B7280]" fill="currentColor" viewBox="0 0 24 24"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-1-13h2v2h-2zm0 4h2v6h-2z"></path></svg>
            </div>
            <div class="flex-1 min-w-0">
              <p class="font-medium text-sm text-[#374151] truncate">情节灵感</p>
              <p class="text-xs text-[#6B7280] truncate mt-1">跃迁点的科学原理...</p>
              <p class="text-xs text-[#9CA3AF] mt-2">昨天</p>
            </div>
          </div>
        </a>
      </div>
    </aside>

    <!-- 右侧聊天界面 -->
    <main class="flex-1 flex flex-col bg-white">
      <header class="h-20 px-8 flex items-center justify-between border-b border-gray-100 flex-shrink-0">
        <div class="flex items-center gap-4">
          <div class="w-10 h-10 bg-gradient-to-br from-[#4B5563] to-[#374151] rounded-full flex items-center justify-center">
            <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M8.25 3v1.5M4.5 8.25H3m18 0h-1.5M4.5 12H3m18 0h-1.5m-15 3.75H3m18 0h-1.5M8.25 21v-1.5M15.75 3v1.5M12 4.5v15M15.75 21v-1.5" /></svg>
          </div>
          <div>
            <h2 class="font-medium text-[#374151]">AI创作助手</h2>
            <button class="text-sm text-[#6B7280] flex items-center gap-2 hover:text-[#374151] transition-colors mt-1">
              <span class="w-2 h-2 bg-[#10B981] rounded-full"></span>
              在线 • GPT-4o
              <svg class="w-3 h-3 text-gray-500" fill="none" stroke="currentColor" stroke-width="2.5" viewBox="0 0 24 24"><path d="M19 9l-7 7-7-7"></path></svg>
            </button>
          </div>
        </div>
        <div class="flex items-center gap-2">
          <button class="w-9 h-9 flex items-center justify-center text-gray-500 hover:bg-gray-100 rounded-lg transition-colors" title="上下文管理">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 00-3.375-3.375h-1.5A1.125 1.125 0 0113.5 7.125v-1.5a3.375 3.375 0 00-3.375-3.375H8.25m0 12.75h7.5m-7.5 3H12M10.5 2.25H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 00-9-9z" /></svg>
          </button>
          <button class="w-9 h-9 flex items-center justify-center text-gray-500 hover:bg-gray-100 rounded-lg transition-colors" title="设置">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M9.594 3.94c.09-.542.56-1.007 1.11-.95.542.057 1.007.56 1.061 1.11L12 8.583l.235-3.535c.057-.542.56-1.007 1.11-.95.542.057 1.007.56 1.061 1.11L15.417 8.583l3.536-.235c.542-.057 1.007.56 1.061 1.11.057.542-.42 1.007-.95 1.061l-3.536.235.235 3.536c.057.542-.42 1.007-.95 1.061-.542.057-1.007-.42-1.061-.95L12 15.417l-.235 3.536c-.057.542-.56 1.007-1.11.95-.542-.057-1.007-.56-1.061-1.11L9.417 15.417l-3.536.235c-.542-.057-1.007-.42-.95-1.061.057-.542.42-1.007.95-1.061l3.536-.235-.235-3.536c-.057-.542.42-1.007.95-1.061.542-.057 1.007.42 1.061.95L12 9.417l.235-3.536zM12 14.25a2.25 2.25 0 100-4.5 2.25 2.25 0 000 4.5z" /></svg>
          </button>
        </div>
      </header>

      <div class="flex-1 p-6 overflow-y-auto">
        <div class="max-w-5xl mx-auto space-y-6">
          <!-- 用户消息 -->
          <div class="flex justify-end">
            <div class="bg-[#3B82F6] text-white p-4 rounded-xl rounded-br-lg max-w-[70%] text-sm">
              我想讨论一下卡尔文这个角色的内心世界。在面对跃迁点时，他应该有什么样的心理活动？
            </div>
          </div>

          <!-- AI回复 -->
          <div class="flex items-start gap-3">
            <div class="w-8 h-8 bg-gradient-to-br from-[#4B5563] to-[#374151] rounded-full flex items-center justify-center flex-shrink-0 shadow-sm">
              <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M8.25 3v1.5M4.5 8.25H3m18 0h-1.5M4.5 12H3m18 0h-1.5m-15 3.75H3m18 0h-1.5M8.25 21v-1.5M15.75 3v1.5M12 4.5v15M15.75 21v-1.5" /></svg>
            </div>
            <div class="bg-[#F3F4F6] text-[#374151] p-4 rounded-xl rounded-bl-lg max-w-[70%] text-sm">
              <p class="mb-3">当然，这是一个很好的切入点。卡尔文在面对跃迁点时的心理活动可以从多个层面展现：</p>
              <ol class="list-decimal list-inside space-y-2">
                <li><strong>希望与恐惧的交织</strong>：跃迁点代表着回家的可能，但也意味着巨大的未知风险。可以描写他手心出汗，但眼神却异常明亮。</li>
                <li><strong>孤独感的顶峰</strong>：在做出这个重大决定时，他比任何时候都更加意识到自己的孤独。没有战友，只有AI。</li>
                <li><strong>对过去的眷恋</strong>："回家"这个词会触发他的记忆闸门，可以闪回一些与家人或恋人的片段。</li>
              </ol>
            </div>
          </div>
        </div>
      </div>

      <!-- 输入区域 -->
      <div class="p-4 border-t border-gray-100 bg-[#FAFAFA]">
        <div class="flex gap-3 items-end max-w-5xl mx-auto">
          <button class="w-9 h-9 flex-shrink-0 flex items-center justify-center text-gray-500 hover:bg-gray-200 rounded-lg transition-colors">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M18.375 12.739l-7.693 7.693a4.5 4.5 0 01-6.364-6.364l10.94-10.94A3.375 3.375 0 1118.375 12.74z" /></svg>
          </button>
          <div class="flex-1 bg-white border border-gray-200 rounded-lg focus-within:ring-1 focus-within:ring-blue-500 focus-within:border-blue-500 transition-shadow">
            <textarea
                class="w-full bg-transparent p-2.5 text-sm text-[#374151] resize-none outline-none"
                placeholder="输入您的问题，按 Enter 发送"
                rows="1"
            ></textarea>
          </div>
          <button class="w-10 h-10 flex-shrink-0 bg-[#4B5563] text-white rounded-lg hover:bg-[#374151] transition-colors flex items-center justify-center">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M6 12L3.269 3.126A59.768 59.768 0 0121.485 12 59.77 59.77 0 013.27 20.876L5.999 12zm0 0h7.5"></path></svg>
          </button>
        </div>
        <div class="text-center mt-2 text-xs text-[#9CA3AF]">
          <span>按 Shift+Enter 换行 • 当前会话: 1,847 tokens</span>
        </div>
      </div>
    </main>
  </div>
</template>

<script setup lang="ts">
// Chat logic will be implemented here
</script>

<style scoped>
/* Scoped styles can be added here if needed */
</style>

// =
// 文件: ..\src\novel\dashboard\components\NovelDashboardSidebar.vue
//

<template>
  <aside class="w-64 bg-[#FAFAFA] border-r border-gray-100 flex flex-col flex-shrink-0">
    <!-- 侧边栏头部区域 -->
    <div class="p-4 space-y-4 border-b border-gray-100 h-20 flex items-center">
      <div class="flex items-center gap-3 px-2">
        <!-- 使用与主侧边栏一致的返回工作台的链接 -->
        <router-link to="/home" class="w-10 h-10 bg-gray-200 rounded-lg flex items-center justify-center flex-shrink-0">
          <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path></svg>
        </router-link>
        <div>
          <h3 class="font-medium text-[#374151] text-sm">创作中心</h3>
          <p class="text-xs text-[#9CA3AF]">小说与故事</p>
        </div>
      </div>
    </div>

    <!-- 主导航 -->
    <nav class="flex-1 px-4 py-6">
      <p class="text-xs font-medium text-[#9CA3AF] px-3 mb-3 uppercase tracking-wider">工作空间</p>
      <div class="space-y-1">
        <router-link
            v-for="item in navItems"
            :key="item.name"
            :to="item.path"
            class="flex items-center gap-3 px-3 py-2.5 text-[#6B7280] hover:bg-gray-100 rounded-lg text-sm transition-colors"
            active-class="bg-[#4B5563] text-white font-medium"
        >
          <span v-html="item.icon" class="w-5 h-5"></span>
          <span>{{ item.name }}</span>
        </router-link>
      </div>
    </nav>

    <!-- 底部设置 -->
    <div class="p-4 border-t border-gray-100 mt-auto">
      <router-link to="/settings" class="flex items-center gap-3 px-3 py-2.5 text-[#6B7280] hover:bg-gray-100 rounded-lg text-sm transition-colors">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><circle cx="12" cy="12" r="3"/><path d="M12 1V6M12 18V23M4.22 4.22L7.76 7.76M16.24 16.24L19.78 19.78M1 12H6M18 12H23M4.22 19.78L7.76 16.24M16.24 7.76L19.78 4.22"/></svg>
        <span>设置</span>
      </router-link>
    </div>
  </aside>
</template>

<script setup lang="ts">
import { ref } from 'vue'

const navItems = ref([
  { name: '我的小说', path: '/novel/dashboard', icon: `<svg fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><rect x="5" y="3" width="14" height="18" rx="2"/><path d="M9 7H15M9 11H15M9 15H13"/></svg>` },
  { name: '最近编辑', path: '/novel/recent', icon: `<svg fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><circle cx="12" cy="12" r="10"/><path d="M12 6V12L16 16"/></svg>` },
  { name: '回收站', path: '/novel/trash', icon: `<svg fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M3 6h18M5 6V20a2 2 0 002 2h10a2 2 0 002-2V6M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2M10 11v6M14 11v6"/></svg>` }
])
</script>

<style scoped>
.router-link-exact-active {
  color: white !important;
}
</style>

// =
// 文件: ..\src\novel\dashboard\router.ts
//

import type { RouteRecordRaw } from 'vue-router'

export const dashboardRoutes: Array<RouteRecordRaw> = [
    {
        path: 'dashboard',
        name: 'NovelDashboard',
        component: () => import('@/novel/dashboard/views/DashboardView.vue'),
        meta: { title: '我的小说' }
    },
    {
        path: 'recent',
        name: 'NovelRecent',
        component: () => import('@/novel/dashboard/views/RecentView.vue'), // 路径已更新
        meta: { title: '最近编辑' }
    },
    {
        path: 'trash',
        name: 'NovelTrash',
        component: () => import('@/novel/dashboard/views/TrashView.vue'), // 路径已更新
        meta: { title: '回收站' }
    },
    {
        path: 'import',
        name: 'NovelImport',
        component: () => import('@/novel/dashboard/views/ImportView.vue'), // 路径已更新
        meta: { title: '导入小说' }
    },
]

// =
// 文件: ..\src\novel\dashboard\views\DashboardView.vue
//

<template>
  <div class="flex-1 px-8 py-6 overflow-auto bg-[#FCFCFC] hide-scrollbar">
    <div class="flex justify-between items-center mb-6">
      <div class="flex items-center gap-4">
        <!-- 搜索框 -->
        <label class="flex items-center gap-2 w-64 bg-white border border-gray-200 rounded-lg px-3 py-2 focus-within:border-blue-500 focus-within:ring-1 focus-within:ring-blue-500 transition">
          <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><circle cx="11" cy="11" r="8"/><path d="M21 21L16.65 16.65"/></svg>
          <input type="text" class="grow text-sm bg-transparent outline-none text-[#374151]" placeholder="搜索小说名或标签..." />
        </label>
        <!-- 下拉选择 -->
        <select class="text-sm bg-white border border-gray-200 rounded-lg px-3 py-2 outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition text-[#374151]">
          <option>全部类型</option>
          <option>科幻</option>
          <option>言情</option>
          <option>悬疑</option>
        </select>
      </div>
      <div class="flex items-center gap-4">
        <button class="text-sm text-[#6B7280] hover:text-[#374151] transition-colors flex items-center gap-2">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M7 18C4.5 18 3 16.5 3 14C3 11.5 5 10 7 10C7.3 10 7.5 10 7.8 10.1C8.5 7.2 11 5 14 5C17.3 5 20 7.7 20 11C20 11.3 20 11.7 19.9 12C21.1 12.5 22 13.6 22 15C22 16.9 20.4 18.5 18.5 18.5"/><path d="M12 13V21M15 16L12 13L9 16"/></svg>
          <span>导入小说</span>
        </button>
        <button class="text-sm font-medium text-white bg-[#4B5563] hover:bg-gray-700 transition-colors flex items-center gap-2 px-4 py-2 rounded-lg">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M12 5V19M5 12H19"/></svg>
          <span>新建小说</span>
        </button>
      </div>
    </div>

    <!-- 小说网格 -->
    <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6">
      <div
          v-for="(novel, index) in novels"
          :key="index"
          class="group bg-white rounded-xl border border-gray-100 p-4 flex flex-col transition-all duration-300 hover:shadow-md hover:-translate-y-1"
      >
        <router-link to="/novel/manage/outline" class="block aspect-[2/3] relative w-full mb-4 rounded-lg overflow-hidden">
          <img :src="novel.cover" class="object-cover w-full h-full group-hover:scale-105 transition-transform duration-300" alt="Book Cover">
          <div class="absolute top-0 left-0 w-full h-full bg-black/5 group-hover:bg-black/10 transition-colors"></div>
        </router-link>

        <div class="flex flex-col flex-grow">
          <h3 class="text-sm font-medium text-[#374151] leading-tight truncate">
            <router-link to="/novel/manage/outline" class="hover:text-blue-600 transition-colors">{{ novel.title }}</router-link>
          </h3>
          <p class="text-xs text-[#9CA3AF] mt-1">{{ novel.chapters }}章 · {{ novel.status.text }}</p>
          <div class="mt-auto pt-3">
            <div class="border-t border-gray-100 pt-3 flex justify-between items-center text-xs text-gray-400">
              <div class="flex items-center gap-1.5">
                 <span
                     v-for="tag in novel.tags"
                     :key="tag.text"
                     class="text-xs px-1.5 py-0.5 rounded font-medium"
                     :class="tag.class"
                 >
                  {{ tag.text }}
                </span>
              </div>
              <span>{{ novel.lastUpdated }}</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref } from 'vue';

const novels = ref([
  {
    title: '星际漫游者',
    description: '一部关于孤独宇航员在未知星系中寻找回家之路的科幻史诗。',
    cover: 'https://images.unsplash.com/photo-1589998059171-988d887df646?q=80&w=800',
    status: { text: '编辑中', class: 'bg-green-500/90' },
    tags: [
      { text: '科幻', class: 'bg-blue-50 text-blue-700' },
      { text: '冒险', class: 'bg-purple-50 text-purple-700' }
    ],
    chapters: 24,
    lastUpdated: '2小时前'
  },
  {
    title: '时间之沙',
    description: '当历史可以被改写，一个历史学家必须阻止一个神秘组织抹去关键的历史事件。',
    cover: 'https://images.unsplash.com/photo-1544947950-fa07a98d237f?q=80&w=800',
    status: { text: '待审核', class: 'bg-yellow-500/90' },
    tags: [
      { text: '悬疑', class: 'bg-yellow-50 text-yellow-700' },
      { text: '科幻', class: 'bg-blue-50 text-blue-700' }
    ],
    chapters: 15,
    lastUpdated: '1天前'
  },
  {
    title: '深海回响',
    description: '一支科考队在马里亚纳海沟深处唤醒了远古的未知生物，带来了无尽的恐惧。',
    cover: 'https://images.unsplash.com/photo-1512820790803-83ca734da794?q=80&w=800',
    status: { text: '已驳回', class: 'bg-red-500/90' },
    tags: [
      { text: '恐怖', class: 'bg-gray-100 text-gray-600' },
      { text: '冒险', class: 'bg-purple-50 text-purple-700' }
    ],
    chapters: 5,
    lastUpdated: '3天前'
  },
  {
    title: '都市霓虹',
    description: '一个平凡的程序员意外获得读取他人思想的能力，卷入一场巨大的商业阴谋。',
    cover: 'https://images.unsplash.com/photo-1532012197267-da84d127e765?q=80&w=800',
    status: { text: '已发布', class: 'bg-blue-500/90' },
    tags: [
      { text: '都市', class: 'bg-pink-50 text-pink-700' },
      { text: '异能', class: 'bg-green-50 text-green-700' }
    ],
    chapters: 102,
    lastUpdated: '1周前'
  },
  {
    title: '红尘一梦',
    description: '穿越回古代，成为一个不受宠的公主，她如何利用现代知识在宫廷斗争中生存。',
    cover: 'https://images.unsplash.com/photo-1521587760476-6c12a4b040da?q=80&w=800',
    status: { text: '编辑中', class: 'bg-green-500/90' },
    tags: [
      { text: '古风', class: 'bg-red-50 text-red-700' },
      { text: '言情', class: 'bg-indigo-50 text-indigo-700' }
    ],
    chapters: 56,
    lastUpdated: '5小时前'
  }
]);
</script>

// =
// 文件: ..\src\novel\dashboard\views\ImportView.vue
//

<template>
  <div class="flex-1 px-8 py-6 overflow-auto bg-[#FCFCFC] flex items-center justify-center">
    <div class="w-full max-w-2xl bg-white rounded-xl p-8 border border-gray-100 shadow-sm">

      <!-- 文件上传区域 -->
      <div class="border-2 border-dashed border-gray-200 rounded-xl p-12 text-center hover:border-blue-400 hover:bg-gray-50/50 transition-colors cursor-pointer">
        <svg class="w-12 h-12 text-gray-300 mx-auto mb-4" fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" d="M7 18C4.5 18 3 16.5 3 14C3 11.5 5 10 7 10C7.3 10 7.5 10 7.8 10.1C8.5 7.2 11 5 14 5C17.3 5 20 7.7 20 11C20 11.3 20 11.7 19.9 12C21.1 12.5 22 13.6 22 15C22 16.9 20.4 18.5 18.5 18.5"/><path stroke-linecap="round" stroke-linejoin="round" d="M12 13V21M15 16L12 13L9 16"/>
        </svg>
        <h3 class="text-lg font-medium text-[#374151]">将文件拖拽至此</h3>
        <p class="text-sm text-[#6B7280] mt-1">或</p>
        <button class="mt-4 px-6 py-2.5 bg-[#4B5563] text-white rounded-lg text-sm font-medium hover:bg-[#374151] transition-colors">
          选择文件
        </button>
        <p class="text-xs text-gray-400 mt-4">支持 .txt, .docx, .md, .epub</p>
      </div>

      <!-- 导入设置区域 -->
      <div class="mt-8 text-left space-y-4 w-full">
        <h4 class="text-base font-medium text-[#374151]">导入设置</h4>
        <div class="space-y-3">
          <div class="flex items-center justify-between p-4 bg-[#F9FAFB] rounded-lg border border-gray-100">
            <div>
              <label for="auto-detect-chapters" class="text-sm font-medium text-[#374151] cursor-pointer">自动识别章节</label>
              <p class="text-xs text-[#9CA3AF] mt-1">根据常见格式自动分割章节</p>
            </div>
            <!-- 自定义 Toggle 开关 -->
            <label for="auto-detect-chapters" class="relative inline-flex items-center cursor-pointer">
              <input type="checkbox" id="auto-detect-chapters" class="sr-only peer" checked>
              <div class="w-11 h-6 bg-gray-200 rounded-full peer peer-checked:bg-[#4B5563] transition-all peer-checked:after:translate-x-full after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border after:rounded-full after:h-5 after:w-5 after:transition-all"></div>
            </label>
          </div>
          <div class="p-4 bg-[#F9FAFB] rounded-lg border border-gray-100">
            <label for="chapter-rule" class="text-sm font-medium text-[#374151] block mb-2">章节识别规则</label>
            <input type="text" id="chapter-rule" value="第.+章|Chapter \d+" class="w-full bg-white border border-gray-200 rounded-lg px-3 py-1.5 text-sm font-mono text-[#374151] focus:ring-1 focus:ring-blue-500 focus:border-blue-500 outline-none transition-colors">
            <p class="text-xs text-[#9CA3AF] mt-2">使用正则表达式匹配章节标题</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">

</script>

<style scoped>

</style>

// =
// 文件: ..\src\novel\dashboard\views\RecentView.vue
//

<template>
  <div class="flex-1 p-8 overflow-auto bg-[#FCFCFC] hide-scrollbar">
    <div class="max-w-6xl mx-auto">
      <!-- 页面标题 -->
      <div class="mb-6 pb-4 border-b border-gray-100">
        <h1 class="text-xl font-semibold text-[#374151]">最近编辑</h1>
        <p class="text-sm text-gray-500 mt-1">查看并继续您最近的工作</p>
      </div>

      <!-- 最近编辑列表 -->
      <div class="space-y-8">
        <div v-for="group in recentItems" :key="group.period">
          <h2 class="text-sm font-medium text-[#9CA3AF] mb-3 px-2">{{ group.period }}</h2>
          <div class="bg-white rounded-xl border border-gray-100 overflow-hidden">
            <ul class="divide-y divide-gray-100">
              <li
                  v-for="item in group.items"
                  :key="item.id"
                  class="p-4 flex items-center justify-between group hover:bg-gray-50/50 transition-colors"
              >
                <div class="flex items-center gap-4 flex-1 min-w-0">
                  <router-link to="/novel/editor">
                    <img :src="item.cover" class="w-10 h-14 object-cover rounded-md flex-shrink-0 shadow-sm" alt="cover">
                  </router-link>
                  <div class="flex-1 min-w-0">
                    <p class="text-sm font-medium text-[#374151] truncate">
                      <router-link to="/novel/editor" class="hover:text-blue-600">{{ item.title }}</router-link>
                    </p>
                    <p class="text-xs text-gray-500 mt-1">
                      编辑了 <span class="font-medium text-gray-600">{{ item.lastEditedChapter }}</span>
                    </p>
                  </div>
                </div>
                <div class="flex items-center gap-6">
                  <span class="text-sm text-gray-400 w-28 text-right">{{ item.lastEditedTime }}</span>
                  <div class="flex items-center gap-2 opacity-0 group-hover:opacity-100 transition-opacity">
                    <router-link to="/novel/editor" class="px-3 py-1.5 bg-[#4B5563] text-white rounded-lg text-xs font-medium hover:bg-gray-700 transition-colors">继续编辑</router-link>
                    <button class="w-8 h-8 flex items-center justify-center text-gray-500 hover:bg-gray-200 rounded-lg transition-colors">
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M5 12h.01M12 12h.01M19 12h.01M6 12a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0z"/></svg>
                    </button>
                  </div>
                </div>
              </li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref } from 'vue';

const recentItems = ref([
  {
    period: '今天',
    items: [
      {
        id: 1,
        title: '星际漫游者',
        cover: 'https://images.unsplash.com/photo-1589998059171-988d887df646?q=80&w=800',
        lastEditedChapter: '第四章：跃迁点',
        lastEditedTime: '2小时前'
      },
      {
        id: 5,
        title: '红尘一梦',
        cover: 'https://images.unsplash.com/photo-1521587760476-6c12a4b040da?q=80&w=800',
        lastEditedChapter: '第五十六章：终局',
        lastEditedTime: '5小时前'
      }
    ]
  },
  {
    period: '昨天',
    items: [
      {
        id: 2,
        title: '时间之沙',
        cover: 'https://images.unsplash.com/photo-1544947950-fa07a98d237f?q=80&w=800',
        lastEditedChapter: '大纲',
        lastEditedTime: '下午 3:45'
      },
      {
        id: 1,
        title: '星际漫游者',
        cover: 'https://images.unsplash.com/photo-1589998059171-988d887df646?q=80&w=800',
        lastEditedChapter: '角色设定 - 艾拉',
        lastEditedTime: '上午 10:12'
      },
    ]
  },
]);
</script>

// =
// 文件: ..\src\novel\dashboard\views\TrashView.vue
//

<template>
  <div class="flex-1 p-8 overflow-auto bg-[#FCFCFC] hide-scrollbar">
    <!-- 提示信息栏 -->
    <div class="flex justify-between items-center mb-6 p-4 bg-blue-50 border border-blue-100 rounded-lg">
      <p class="text-sm text-blue-800 flex items-center gap-2">
        <svg class="w-5 h-5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path></svg>
        项目将在回收站中保留30天，之后将被永久删除。
      </p>
      <button class="flex items-center gap-2 px-3 py-1.5 text-sm font-medium bg-red-100 text-red-700 rounded-md hover:bg-red-200 transition-colors">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M19 21H5a2 2 0 01-2-2V7h18v12a2 2 0 01-2 2zM3 7h18M10 12v4M14 12v4M8 7V4a1 1 0 011-1h6a1 1 0 011 1v3"/></svg>
        清空回收站
      </button>
    </div>

    <!-- 表格容器 -->
    <div class="bg-white rounded-xl border border-gray-100 overflow-hidden">
      <table class="w-full text-sm text-left">
        <thead class="text-xs text-[#6B7280] uppercase bg-gray-50">
        <tr>
          <th scope="col" class="px-6 py-3 font-medium w-2/5">项目名称</th>
          <th scope="col" class="px-6 py-3 font-medium">类型</th>
          <th scope="col" class="px-6 py-3 font-medium">删除时间</th>
          <th scope="col" class="px-6 py-3 font-medium">剩余时间</th>
          <th scope="col" class="px-6 py-3 font-medium text-right">操作</th>
        </tr>
        </thead>
        <tbody class="divide-y divide-gray-100">
        <tr v-for="item in deletedItems" :key="item.id" class="hover:bg-gray-50/50 transition-colors">
          <td class="px-6 py-4 font-medium text-[#374151] flex items-center gap-3">
            <span class="text-gray-400 w-5 h-5 flex-shrink-0" v-html="item.icon"></span>
            <span>{{ item.name }}</span>
          </td>
          <td class="px-6 py-4 text-[#6B7280]">{{ item.type }}</td>
          <td class="px-6 py-4 text-[#6B7280]">{{ item.deletedAt }}</td>
          <td class="px-6 py-4">
            <div class="flex items-center gap-3">
              <div class="w-full bg-gray-200 rounded-full h-1.5">
                <div class="bg-orange-400 h-1.5 rounded-full" :style="{ width: item.retentionPercent + '%' }"></div>
              </div>
              <span class="text-orange-500 text-xs font-medium w-16 text-right">{{ item.retentionDays }} 天</span>
            </div>
          </td>
          <td class="px-6 py-4 text-right space-x-4">
            <button class="font-medium text-blue-600 hover:text-blue-800 transition-colors">恢复</button>
            <button class="font-medium text-red-600 hover:text-red-800 transition-colors">永久删除</button>
          </td>
        </tr>
        </tbody>
      </table>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref } from 'vue';

const deletedItems = ref([
  {
    id: 1,
    name: '废弃的赛博朋克大纲',
    type: '小说',
    icon: `<svg fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M4 19.5A2.5 2.5 0 016.5 17H20"></path><path d="M6.5 2H20v20H6.5A2.5 2.5 0 014 19.5v-15A2.5 2.5 0 016.5 2z"></path></svg>`,
    deletedAt: '2024-05-20 14:30',
    retentionDays: 28,
    retentionPercent: 93,
  },
  {
    id: 2,
    name: '一个短篇故事',
    type: '章节',
    icon: `<svg fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M14 2H6a2 2 0 00-2 2v16a2 2 0 002 2h12a2 2 0 002-2V8z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="16" y1="13" x2="8" y2="13"></line><line x1="16" y1="17" x2="8" y2="17"></line><polyline points="10 9 9 9 8 9"></polyline></svg>`,
    deletedAt: '2024-05-18 09:12',
    retentionDays: 26,
    retentionPercent: 87,
  },
  {
    id: 3,
    name: '无题角色设定',
    type: '角色',
    icon: `<svg fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M17 21v-2a4 4 0 00-4-4H5a4 4 0 00-4 4v2"/><circle cx="9" cy="7" r="4"/><path d="M23 21v-2a4 4 0 00-3-3.87M16 3.13a4 4 0 010 7.75"/></svg>`,
    deletedAt: '2024-05-15 22:01',
    retentionDays: 23,
    retentionPercent: 76,
  },
]);
</script>

<style scoped>
</style>

// =
// 文件: ..\src\novel\editor\components\ai\AIDiffPreview.vue
//

<template>
  <div class="diff-preview-container">
    <div class="header">
      <h3 class="title">AI生成预览</h3>
      <div class="actions">
        <!-- [修复] 只有在有选中任务且任务已完成时才显示应用按钮 -->
        <button v-if="previewTask && previewTask.status === 'completed'" @click="$emit('apply-changes', previewTask.generatedContent)" class="apply-btn">
          <i class="fa-solid fa-check"></i>
          应用修改
        </button>
      </div>
    </div>
    <div class="content-area hide-scrollbar">
      <div v-if="previewTask">
        <!-- [新增] 流式预览: 当任务在进行中时显示 -->
        <div v-if="previewTask.status === 'processing'" class="prose-live">
          <div v-html="previewTask.generatedContent.replace(/\n/g, '<br>')"></div>
          <span class="blinking-cursor">▍</span>
        </div>

        <!-- [修复] 差异对比预览: 当任务已完成时显示 -->
        <div v-else-if="previewTask.status === 'completed'" v-html="diffHtml" class="prose-diff"></div>

        <!-- 其他状态的提示 -->
        <div v-else class="empty-state">
          <p>任务状态: {{ previewTask.status }}</p>
        </div>
      </div>
      <div v-else class="empty-state">
        <i class="fa-regular fa-eye text-3xl text-gray-300"></i>
        <p class="mt-2">请从上方任务队列中</p>
        <p>选择一个任务来查看预览。</p>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { computed } from 'vue';
import type { PropType } from 'vue';
import { diff_match_patch, DIFF_DELETE, DIFF_INSERT, DIFF_EQUAL } from 'diff-match-patch';
import type { AITask } from '@/novel/editor/stores/aiTaskStore';

// --- Props & Emits ---
const props = defineProps({
  previewTask: {
    type: Object as PropType<AITask | null>,
    default: null
  }
});

defineEmits<{
  (e: 'apply-changes', content: string): void;
}>();


/**
 * 差异对比的核心逻辑。
 * 使用 google-diff-match-patch 库来计算差异并生成HTML。
 */
const diffHtml = computed(() => {
  if (!props.previewTask || props.previewTask.status !== 'completed') return '';

  const dmp = new diff_match_patch();
  const text1 = props.previewTask.originalContent;
  const text2 = props.previewTask.generatedContent;

  const diffs = dmp.diff_main(text1, text2);
  dmp.diff_cleanupSemantic(diffs);

  let html = '';
  // Sanitize text for HTML display
  const sanitize = (text: string) => text.replace(/&/g, '&').replace(/</g, '<').replace(/>/g, '>').replace(/\n/g, '<br>');

  for (const [op, data] of diffs) {
    const text = sanitize(data);
    switch (op) {
      case DIFF_INSERT:
        // 用 <span> 替代 <ins> 以避免 ProseMirror 的默认样式冲突
        html += `<span class="diff-add">${text}</span>`;
        break;
      case DIFF_DELETE:
        // 用 <span> 替代 <del>
        html += `<span class="diff-del">${text}</span>`;
        break;
      case DIFF_EQUAL:
        html += `<span>${text}</span>`;
        break;
    }
  }
  return html;
});
</script>

<style scoped>
.diff-preview-container { padding: 1rem; display: flex; flex-direction: column; height: 100%; }
.header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.75rem; padding: 0 0.5rem; flex-shrink: 0; height: 32px; /* 保持头部高度一致 */ }
.title { font-size: 0.875rem; font-weight: 500; color: #4B5563; }
.apply-btn { display: flex; align-items: center; gap: 0.375rem; padding: 0.375rem 0.75rem; background-color: #16A34A; color: white; border-radius: 0.5rem; font-size: 0.75rem; font-weight: 500; transition: background-color 0.2s ease; }
.apply-btn:hover { background-color: #15803D; }
.content-area { flex-grow: 1; background-color: #FFFFFF; border-radius: 0.5rem; border: 1px solid #E5E7EB; padding: 1rem; overflow-y: auto; font-size: 0.875rem; line-height: 1.7; color: #374151; }
.empty-state { height: 100%; display: flex; flex-direction: column; align-items: center; justify-content: center; text-align: center; color: #9CA3AF; font-size: 0.875rem; }

.hide-scrollbar::-webkit-scrollbar { display: none; }

/* 流式预览的样式 */
.prose-live {
  white-space: pre-wrap;
}

.blinking-cursor {
  font-weight: 500;
  font-size: 1em;
  color: #3B82F6;
  animation: blink 1s step-end infinite;
}

@keyframes blink {
  from, to {
    color: transparent;
  }
  50% {
    color: #3B82F6;
  }
}

:global(.prose-diff .diff-del) {
  background-color: #FEE2E2;
  text-decoration: line-through;
  text-decoration-color: #EF4444;
  color: #991B1B; /* 更深的红色以提高可读性 */
  padding: 1px 2px;
  border-radius: 3px;
}
:global(.prose-diff .diff-add) {
  background-color: #D1FAE5;
  text-decoration: none;
  color: #065F46;
  padding: 1px 2px;
  border-radius: 3px;
}
</style>

// =
// 文件: ..\src\novel\editor\components\ai\AITaskQueue.vue
//

<template>
  <div class="task-queue-container">
    <div class="header">
      <h3 class="title">AI任务队列</h3>
      <span v-if="activeTasksCount > 0" class="badge">{{ activeTasksCount }}个活跃</span>
    </div>
    <div v-if="tasks.length > 0" class="task-list">
      <div
          v-for="task in tasks"
          :key="task.id"
          :class="['task-item', `status-${task.status}`, { 'clickable': task.status === 'completed' || task.status === 'processing' }]"
          @click="handleTaskClick(task)"
      >
        <!-- Task Title & Status Icon -->
        <div class="task-item-header">
          <p class="task-title" :title="task.title">{{ task.title }}</p>
          <span class="task-status-text">
            <i :class="getStatusIcon(task.status)" class="status-icon"></i>
            {{ getStatusText(task.status) }}
          </span>
        </div>

        <!-- Progress Bar or Message -->
        <div class="task-item-body">
          <div v-if="task.status === 'processing'" class="progress-bar-container">
            <div class="progress-bar"></div>
          </div>
          <p v-if="task.status === 'failed'" class="error-message">
            {{ task.error }} <a href="#" @click.prevent class="retry-link">重试</a>
          </p>
          <p v-if="task.status === 'completed'" class="completed-message">
            点击查看对比
          </p>
          <p v-if="task.status === 'processing'" class="completed-message">
            点击查看实时生成
          </p>
        </div>
      </div>
    </div>
    <div v-else class="empty-state">
      <i class="fa-regular fa-folder-open text-3xl text-gray-300"></i>
      <p class="mt-2">当前没有AI任务</p>
      <p class="text-xs text-gray-400 mt-1">在编辑器中右键开始</p>
    </div>
  </div>
</template>

<script setup lang="ts">
import { computed } from 'vue';
import { useAITaskStore, type AITask, type AITaskStatus } from '@/novel/editor/stores/aiTaskStore';

// --- Emits ---
const emit = defineEmits<{
  (e: 'select-task', task: AITask): void;
}>();

// --- Store ---
const aiTaskStore = useAITaskStore();
const tasks = computed(() => aiTaskStore.tasks);

// --- Computed ---
const activeTasksCount = computed(() => {
  return tasks.value.filter(t => t.status === 'processing' || t.status === 'pending').length;
});

// --- Methods ---
const getStatusText = (status: AITaskStatus): string => {
  const map: Record<AITaskStatus, string> = {
    pending: '等待中',
    processing: '进行中...',
    completed: '已完成',
    failed: '失败'
  };
  return map[status];
};

const getStatusIcon = (status: AITaskStatus): string => {
  const map: Record<AITaskStatus, string> = {
    pending: 'fa-solid fa-hourglass-half',
    processing: 'fa-solid fa-spinner fa-spin',
    completed: 'fa-solid fa-check-circle',
    failed: 'fa-solid fa-times-circle'
  };
  return map[status];
}

const handleTaskClick = (task: AITask) => {
  // [修复] 进行中或已完成的任务都可以被选中预览
  if (task.status === 'completed' || task.status === 'processing') {
    emit('select-task', task);
  }
};
</script>

<style scoped>
.task-queue-container { padding: 1rem; display: flex; flex-direction: column; height: 100%; }
.header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.75rem; padding: 0 0.5rem; }
.title { font-size: 0.875rem; font-weight: 500; color: #4B5563; }
.badge { font-size: 0.75rem; font-weight: 500; padding: 0.125rem 0.5rem; border-radius: 9999px; color: #1D4ED8; background-color: #DBEAFE; }
.task-list { flex-grow: 1; overflow-y: auto; space-y: 0.5rem; padding-right: 4px; }
.task-list::-webkit-scrollbar { display: none; }
.task-item { padding: 0.75rem; border-radius: 0.5rem; border: 1px solid #E5E7EB; transition: all 0.2s ease; background-color: #FFFFFF;}
.task-item.clickable { cursor: pointer; }
.task-item.clickable:hover { border-color: #D1D5DB; box-shadow: 0 1px 3px rgba(0,0,0,0.05); }
.task-item.status-processing.clickable { border: 1px solid #93C5FD; background-color: #EFF6FF; }
.task-item.status-processing.clickable:hover { background-color: #DBEAFE; border-color: #60A5FA; }
.task-item.status-completed.clickable { border: 1px solid #BBF7D0; background-color: #F0FDF4; }
.task-item.status-completed.clickable:hover { background-color: #DCFCE7; border-color: #A7F3D0; }
.task-item.status-failed { border: 1px solid #FECACA; background-color: #FEF2F2; }
.task-item-header { display: flex; justify-content: space-between; align-items: center; }
.task-title { font-size: 0.875rem; font-weight: 500; color: #1F2937; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
.task-status-text { font-size: 0.75rem; font-weight: 500; display: flex; align-items: center; gap: 0.25rem; flex-shrink: 0; }
.status-icon { width: 1rem; text-align: center; }
.status-pending .task-status-text { color: #6B7280; }
.status-processing .task-status-text { color: #2563EB; }
.status-completed .task-status-text { color: #16A34A; }
.status-failed .task-status-text { color: #DC2626; }
.task-item-body { margin-top: 0.5rem; }
.progress-bar-container { width: 100%; background-color: #E5E7EB; border-radius: 9999px; height: 0.25rem; overflow: hidden; }
.progress-bar { background-color: #3B82F6; height: 100%; width: 100%; border-radius: 9999px; animation: indeterminate-progress 2s cubic-bezier(0.4, 0, 0.6, 1) infinite; }
@keyframes indeterminate-progress { 0% { transform: translateX(-100%); } 100% { transform: translateX(100%); } }
.error-message, .completed-message { font-size: 0.75rem; margin-top: 0.25rem; }
.error-message { color: #B91C1C; }
.completed-message { color: #6B7280; }
.retry-link { text-decoration: underline; font-weight: 500; }
.empty-state { flex-grow: 1; display: flex; flex-direction: column; align-items: center; justify-content: center; text-align: center; color: #9CA3AF; font-size: 0.875rem; }
</style>

// =
// 文件: ..\src\novel\editor\components\ai\EditorAIPanel.vue
//

<template>
  <aside class="editor-ai-panel-container">
    <!-- Top Part: AI Task Queue -->
    <div class="task-queue-section">
      <!-- [修复] 监听 select-task 事件 -->
      <AITaskQueue @select-task="handleSelectTask" />
    </div>

    <!-- Divider -->
    <div class="divider"></div>

    <!-- Bottom Part: AI Diff Preview -->
    <div class="diff-preview-section">
      <!-- [修复] 将 selectedTask 作为 prop 传递，并监听 apply-changes 事件 -->
      <AIDiffPreview :preview-task="selectedTask" @apply-changes="handleApplyChanges" />
    </div>
  </aside>
</template>

<script setup lang="ts">
import { ref } from 'vue';
import AITaskQueue from './AITaskQueue.vue';
import AIDiffPreview from './AIDiffPreview.vue';
import type { AITask } from '@/novel/editor/stores/aiTaskStore';
import { useEditorStore } from '@/novel/editor/stores/editorStore';

// --- State ---
const selectedTask = ref<AITask | null>(null);

// --- Store ---
const editorStore = useEditorStore();

// --- Methods ---

/**
 * 当用户从队列中选择一个任务时，更新当前要预览的任务
 * @param task - 被选中的任务
 */
const handleSelectTask = (task: AITask) => {
  selectedTask.value = task;
};

/**
 * 处理“应用修改”事件
 * @param newContent - AI生成的新内容
 */
const handleApplyChanges = (newContent: string) => {
  if (selectedTask.value && editorStore.activeItemId) {
    // 调用 editorStore 的 action 来更新激活文档的内容
    editorStore.updateItemContentById(editorStore.activeItemId, newContent);
    // 清空预览，避免误操作
    selectedTask.value = null;
  } else {
    console.error("无法应用修改：没有选中任务或没有激活的文档。");
  }
};
</script>

<style scoped>
.editor-ai-panel-container {
  width: 24rem; /* 384px */
  background-color: #F9FAFB; /* gray-50 */
  border-left: 1px solid #F3F4F6; /* gray-100 */
  display: flex;
  flex-direction: column;
  flex-shrink: 0;
}

.task-queue-section {
  height: 40%;
  min-height: 200px; /* 保证即使在小屏幕下也有足够空间 */
  flex-shrink: 0;
}

.divider {
  height: 1px;
  background-color: #E5E7EB; /* gray-200, a bit darker */
  margin: 0 1rem; /* 在两侧留出边距 */
}

.diff-preview-section {
  flex-grow: 1;
  height: 60%;
}
</style>

// =
// 文件: ..\src\novel\editor\components\content\EditorContentArea.vue
//

<template>
  <main class="editor-content-area-container" ref="editorWrapperRef">
    <!-- Header: 恢复所有UI元素，并从 activeItem 获取数据 -->
    <header class="header">
      <div v-if="activeItem" class="header-left">
        <span class="item-icon" :class="getIconClass(activeItem).split(' ').slice(2).join(' ')">
            <i :class="getIconClass(activeItem)"></i>
        </span>
        <span class="item-title">{{ activeItem.title }}</span>
        <span v-if="activeItem.type === 'chapter' && activeItem.status === 'editing'" class="item-status-badge">
          已保存
        </span>
      </div>
      <div v-else class="header-left">
        <span class="item-title">请从左侧选择一个文档</span>
      </div>

      <!-- Right side: 恢复字数统计和操作按钮 -->
      <div v-if="activeItem" class="header-right">
        <div class="stats">
          <span v-if="wordCount > 0">字数: {{ wordCount }}</span>
          <template v-if="readingTime > 0">
            <span class="divider">•</span>
            <span>预计阅读: {{ readingTime }}分钟</span>
          </template>
        </div>
        <div class="actions">
          <!-- [修复] 绑定到阅读模式页面 -->
          <router-link to="/novel/read" class="action-btn" title="阅读模式"><i class="fa-solid fa-book-open-reader"></i></router-link>
          <!-- [修复] 绑定到历史版本页面 -->
          <router-link to="/novel/manage/history" class="action-btn" title="历史版本"><i class="fa-solid fa-clock-rotate-left"></i></router-link>
          <button class="action-btn" title="更多选项"><i class="fa-solid fa-ellipsis-vertical"></i></button>
        </div>
      </div>
    </header>

    <!-- Content: 编辑器核心区域 -->
    <div
        class="editor-scroll-wrapper"
        @scroll="handleScroll"
    >
      <!-- Floating Toolbar -->
      <FloatingToolbar ref="floatingToolbarRef" />

      <!-- Context Menu -->
      <EditorContextMenu ref="editorContextMenuRef" />

      <div class="editor-content-wrapper" ref="editorContentRef">
        <TiptapEditor
            v-if="activeItem"
            :key="activeItem.id"
            v-model="activeItemContent"
            @show-context-menu="showEditorContextMenu"
        />
        <div v-else class="placeholder">
          <div class="text-center">
            <i class="fa-regular fa-hand-pointer text-4xl text-gray-300"></i>
            <p class="mt-4 text-gray-500">请从左侧目录选择一个项目进行查看或编辑。</p>
          </div>
        </div>
      </div>
    </div>
  </main>
</template>

<script setup lang="ts">
import { computed, ref, onMounted, onBeforeUnmount } from 'vue';
import { useEditorStore } from '@/novel/editor/stores/editorStore';
import TiptapEditor from './TiptapEditor.vue';
import FloatingToolbar from './FloatingToolbar.vue';
import EditorContextMenu from './EditorContextMenu.vue';

const editorStore = useEditorStore();
const editorWrapperRef = ref<HTMLElement | null>(null);
const editorContentRef = ref<HTMLElement | null>(null);
const floatingToolbarRef = ref<InstanceType<typeof FloatingToolbar> | null>(null);
const editorContextMenuRef = ref<InstanceType<typeof EditorContextMenu> | null>(null);

const activeItem = computed(() => editorStore.activeItem);

const activeItemContent = computed({
  get: () => activeItem.value?.content || '',
  set: (newContent: string) => {
    if (activeItem.value) {
      editorStore.updateItemContentById(activeItem.value.id, newContent);
    }
  }
});

const wordCount = computed(() => (activeItem.value?.type === 'chapter' && (activeItem.value as any).wordCount) ? (activeItem.value as any).wordCount : 0);
const readingTime = computed(() => {
  if (!wordCount.value) return 0;
  const time = Math.ceil(wordCount.value / 300);
  return time > 0 ? time : 1;
});

const getIconClass = (item: any): string => {
  const typeIcons: Record<string, string> = {
    volume: 'fa-solid fa-book-open text-orange-500',
    chapter: 'fa-solid fa-file-lines text-blue-600',
    character_profile: 'fa-solid fa-user text-teal-500',
    worldview_doc: 'fa-solid fa-earth-americas text-sky-500',
    note: 'fa-solid fa-note-sticky text-yellow-500',
  };
  return typeIcons[item.type] || 'fa-solid fa-question text-gray-400';
}

const showEditorContextMenu = (event: MouseEvent) => {
  editorContextMenuRef.value?.show(event, editorWrapperRef.value);
};

const handleSelectionChange = () => {
  if (!floatingToolbarRef.value || !editorWrapperRef.value || !editorContentRef.value) return;

  const selection = window.getSelection();
  if (!selection || selection.rangeCount === 0 || selection.isCollapsed || !editorContentRef.value.contains(selection.getRangeAt(0).commonAncestorContainer)) {
    floatingToolbarRef.value.hide();
    return;
  }

  floatingToolbarRef.value.show(selection.getRangeAt(0).getBoundingClientRect(), editorWrapperRef.value.getBoundingClientRect());
  editorContextMenuRef.value?.hide();
};

const handleScroll = () => {
  floatingToolbarRef.value?.hide();
  editorContextMenuRef.value?.hide();
}

const handleClickOutside = (event: MouseEvent) => {
  const target = event.target as HTMLElement;
  if (!target.closest('.context-menu') && !target.closest('.floating-toolbar')) {
    editorContextMenuRef.value?.hide();
    floatingToolbarRef.value?.hide();
  }
}

onMounted(() => {
  document.addEventListener('selectionchange', handleSelectionChange);
  document.addEventListener('click', handleClickOutside);
});

onBeforeUnmount(() => {
  document.removeEventListener('selectionchange', handleSelectionChange);
  document.removeEventListener('click', handleClickOutside);
});
</script>

<style scoped>
.editor-content-area-container { display: flex; flex-direction: column; flex: 1; overflow: hidden; background-color: #FFFFFF; }
.header { height: 4rem; padding: 0 1.5rem; display: flex; align-items: center; justify-content: space-between; border-bottom: 1px solid #F3F4F6; flex-shrink: 0; }
.header-left { display: flex; align-items: center; gap: 0.75rem; font-size: 0.875rem; }
.item-icon { width: 1.25rem; text-align: center; }
.item-title { font-weight: 500; color: #1F2937; }
.item-status-badge { font-size: 0.75rem; font-weight: 500; padding: 0.125rem 0.5rem; border-radius: 9999px; color: #15803D; background-color: #DCFCE7; }
.header-right { display: flex; align-items: center; gap: 1rem; }
.stats { display: flex; align-items: center; gap: 0.5rem; font-size: 0.875rem; color: #6B7280; }
.stats .divider { color: #D1D5DB; }
.actions { display: flex; align-items: center; gap: 0.25rem; }
.action-btn { width: 2rem; height: 2rem; display: flex; align-items: center; justify-content: center; color: #6B7280; border-radius: 0.5rem; transition: background-color 0.15s; }
.action-btn:hover { background-color: #F3F4F6; }
.editor-scroll-wrapper { flex: 1; overflow-y: auto; padding: 2rem 0; position: relative; }
.editor-content-wrapper { max-width: 42rem; margin: 0 auto; }
.placeholder { display: flex; align-items: center; justify-content: center; height: 100%; min-height: 200px; color: #6B7280; text-align: center; }
</style>

// =
// 文件: ..\src\novel\editor\components\content\EditorContextMenu.vue
//

<template>
  <div
      v-if="visible"
      class="context-menu"
      :style="{ top: `${position.y}px`, left: `${position.x}px` }"
      @click.stop
  >
    <p class="menu-title">AI生成任务</p>
    <!-- [修复] 点击时调用 handleExecute 并传入任务类型 -->
    <a @click="handleExecute('续写')" href="#" class="context-menu-item">
      <i class="fa-solid fa-wand-magic-sparkles w-4 text-center text-[#4B5563]"></i>
      <span>续写内容</span>
    </a>
    <a @click="handleExecute('润色')" href="#" class="context-menu-item">
      <i class="fa-solid fa-palette w-4 text-center text-[#3B82F6]"></i>
      <span>润色内容</span>
    </a>
    <div class="context-menu-divider"></div>
    <p class="menu-title">分析任务</p>
    <a @click="handleExecute('分析')" href="#" class="context-menu-item">
      <i class="fa-solid fa-magnifying-glass-chart w-4 text-center text-[#F59E0B]"></i>
      <span>分析内容</span>
    </a>
  </div>
</template>

<script setup lang="ts">
import { ref } from 'vue';
import { useAITaskStore } from '@/novel/editor/stores/aiTaskStore';

const aiTaskStore = useAITaskStore();
const visible = ref(false);
const position = ref({ x: 0, y: 0 });

const show = (event: MouseEvent, container: HTMLElement | null) => {
  const containerRect = container?.getBoundingClientRect() || { top: 0, left: 0 };
  visible.value = true;
  position.value.x = event.clientX - containerRect.left;
  position.value.y = event.clientY - containerRect.top;
};

const hide = () => {
  visible.value = false;
};

const handleExecute = (taskType: '润色' | '续写' | '分析') => {
  aiTaskStore.startNewTask(taskType);
  hide(); // 执行后隐藏菜单
}

defineExpose({ show, hide });
</script>

<style scoped>
.context-menu { position: absolute; z-index: 1000; background-color: white; border: 1px solid #e5e7eb; border-radius: 0.75rem; padding: 0.5rem; box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1); width: 16rem; }
.menu-title { padding: 0.25rem 0.75rem; font-size: 0.75rem; color: #9CA3AF; font-weight: 500; text-transform: uppercase; letter-spacing: 0.05em; }
.context-menu-item { display: flex; align-items: center; gap: 0.75rem; padding: 0.5rem 0.75rem; border-radius: 0.5rem; font-size: 0.875rem; color: #374151; cursor: pointer; user-select: none; transition: background-color 0.15s; text-decoration: none; }
.context-menu-item:hover { background-color: #f3f4f6; }
.context-menu-divider { height: 1px; background-color: #f3f4f6; margin: 0.5rem 0; }
</style>

// =
// 文件: ..\src\novel\editor\components\content\FloatingToolbar.vue
//

<template>
  <div
      v-if="visible"
      class="floating-toolbar"
      :style="{ top: `${position.top}px`, left: `${position.left}px` }"
  >
    <button title="分析内容" class="toolbar-btn"><i class="fa-solid fa-magnifying-glass-chart"></i></button>
    <button title="AI生成" class="toolbar-btn"><i class="fa-solid fa-wand-magic-sparkles"></i></button>
    <button title="润色文本" class="toolbar-btn"><i class="fa-solid fa-spell-check"></i></button>
  </div>
</template>

<script setup lang="ts">
import { ref } from 'vue';

const visible = ref(false);
const position = ref({ top: 0, left: 0 });

const show = (rect: DOMRect, wrapperRect: DOMRect) => {
  visible.value = true;
  position.value = {
    top: rect.top - wrapperRect.top - 48,
    left: rect.left - wrapperRect.left + rect.width / 2 - 60,
  };
};

const hide = () => {
  visible.value = false;
};

defineExpose({ show, hide });
</script>

<style scoped>
.floating-toolbar {
  position: absolute;
  z-index: 10;
  background-color: white;
  border: 1px solid #e5e7eb;
  border-radius: 0.5rem;
  padding: 0.375rem;
  box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
  display: flex;
  gap: 0.25rem;
}
.toolbar-btn {
  width: 2rem;
  height: 2rem;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #4B5563;
  border-radius: 0.375rem;
  transition: background-color 0.15s;
}
.toolbar-btn:hover {
  background-color: #f3f4f6;
}
</style>

// =
// 文件: ..\src\novel\editor\components\content\TiptapEditor.vue
//

<template>
  <div v-if="editor" class="editor-wrapper">
    <!-- [修复] 将 contextmenu 事件绑定到 editor-content 上 -->
    <editor-content
        :editor="editor"
        class="prose prose-lg max-w-none"
        @contextmenu.prevent="emit('show-context-menu', $event)"
    />
  </div>
</template>

<script setup lang="ts">
import { useEditor, EditorContent } from '@tiptap/vue-3'
import StarterKit from '@tiptap/starter-kit'
import { watch, onBeforeUnmount } from 'vue'

// --- Props & Emits ---

const props = defineProps<{
  // 使用 v-model 接收和更新内容
  modelValue: string
}>()

const emit = defineEmits<{
  (e: 'update:modelValue', value: string): void;
  // [新增] 定义 show-context-menu 事件，用于通知父组件显示右键菜单
  (e: 'show-context-menu', event: MouseEvent): void;
}>()

// --- Tiptap Editor Instance ---

const editor = useEditor({
  content: props.modelValue,
  extensions: [
    StarterKit.configure({
      // 配置以匹配 UI 设计
      heading: { levels: [1, 2, 3] },
    }),
  ],
  onUpdate: () => {
    // 同步内容到父组件
    emit('update:modelValue', editor.value?.getHTML() || '')
  },
  editorProps: {
    attributes: {
      class: 'prose-mirror-focus',
    },
  },
})

// --- Logic ---

/**
 * 监听外部 modelValue 的变化 (例如，用户切换了章节)
 * 当外部数据变化时，需要同步更新编辑器内部的内容
 */
watch(() => props.modelValue, (newValue) => {
  // 检查新值与编辑器当前值是否不同，防止不必要更新和光标跳动
  const isSame = editor.value?.getHTML() === newValue
  if (isSame) {
    return
  }
  // 使用 setContent 更新编辑器内容
  // 第二个参数 false 表示不触发 onUpdate 回调，避免无限循环
  editor.value?.commands.setContent(newValue, false)
})

/**
 * 组件卸载前，销毁编辑器实例，防止内存泄漏
 */
onBeforeUnmount(() => {
  editor.value?.destroy()
})
</script>

<style scoped>
/*
 * 使用 :deep() 来穿透 scoped CSS 的限制，
 * 为 Tiptap 动态生成的 .ProseMirror 元素添加样式
 */
:deep(.ProseMirror) {
  min-height: calc(100vh - 12rem); /* 确保编辑器区域足够高 */
  outline: none;
  /* 提供内边距，使文本不贴边 */
  padding: 1rem;
  /* 设置字体和行高，以获得更好的阅读体验 */
  font-family: 'Georgia', 'Noto Serif SC', serif;
  line-height: 1.75;
  color: #374151;
}

/* 自定义编辑器获得焦点时的样式 */
:deep(.prose-mirror-focus:focus-visible) {
  /* box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2); */
}

/* 覆盖 prose 插件的样式以匹配UI */
:deep(.prose h1) {
  font-family: 'Noto Serif SC', serif;
  font-size: 1.875rem; /* 30px */
  font-weight: 600;
  margin-bottom: 1.5rem;
}
:deep(.prose p) {
  margin-top: 1em;
  margin-bottom: 1em;
}
:deep(.prose h2) {
  font-family: 'Noto Serif SC', serif;
  font-size: 1.5rem; /* 24px */
  font-weight: 600;
  padding-bottom: 0.5rem;
  border-bottom: 1px solid #e5e7eb;
  margin-top: 2rem;
  margin-bottom: 1rem;
}
:deep(.prose h3) {
  font-family: 'Noto Serif SC', serif;
  font-size: 1.25rem; /* 20px */
  font-weight: 600;
  margin-top: 1.5rem;
  margin-bottom: 0.75rem;
}
</style>

// =
// 文件: ..\src\novel\editor\components\sidebar\DirectoryContextMenu.vue
//

<template>
  <div
      v-if="visible"
      class="context-menu"
      :style="{ top: `${position.y}px`, left: `${position.x}px` }"
      @click.stop
  >
    <template v-if="node?.type === 'volume'">
      <p class="menu-title">目录管理</p>
      <div @click="handleAction('newChapter')" class="context-menu-item"><i class="fa-solid fa-plus w-4 text-center"></i><span>新建章节</span></div>
      <div @click="handleAction('newVolume')" class="context-menu-item"><i class="fa-solid fa-folder-plus w-4 text-center"></i><span>新建卷</span></div>
      <div @click="handleAction('rename')" class="context-menu-item"><i class="fa-solid fa-pencil w-4 text-center"></i><span>重命名</span></div>
      <div class="context-menu-divider"></div>
      <p class="menu-title">批量操作</p>
      <div @click="handleAIAction('分析', node)" class="context-menu-item"><i class="fa-solid fa-magnifying-glass-chart w-4 text-center text-[#F59E0B]"></i><span>批量分析章节</span></div>
      <div @click="handleAIAction('续写', node)" class="context-menu-item"><i class="fa-solid fa-wand-magic-sparkles w-4 text-center text-[#4B5563]"></i><span>批量生成章节</span></div>
      <div class="context-menu-divider"></div>
      <div @click="handleAction('delete')" class="context-menu-item danger"><i class="fa-solid fa-trash-can w-4 text-center"></i><span>删除卷</span></div>
    </template>
    <template v-else-if="node?.type === 'chapter'">
      <p class="menu-title">文件操作</p>
      <div @click="handleAction('rename')" class="context-menu-item"><i class="fa-solid fa-pencil w-4 text-center"></i><span>重命名</span></div>
      <div class="context-menu-item"><i class="fa-solid fa-copy w-4 text-center"></i><span>创建副本</span></div>
      <div class="context-menu-divider"></div>
      <p class="menu-title">AI 助手</p>
      <div @click="handleAIAction('分析', node)" class="context-menu-item"><i class="fa-solid fa-magnifying-glass-chart w-4 text-center text-[#F59E0B]"></i><span>分析内容</span></div>
      <div @click="handleAIAction('续写', node)" class="context-menu-item"><i class="fa-solid fa-wand-magic-sparkles w-4 text-center text-[#4B5563]"></i><span>生成内容</span></div>
      <div class="context-menu-divider"></div>
      <div @click="handleAction('delete')" class="context-menu-item danger"><i class="fa-solid fa-trash-can w-4 text-center"></i><span>删除章节</span></div>
    </template>
    <!-- 可以为其他类型如 note, character_profile 等添加更多菜单项 -->
  </div>
</template>

<script setup lang="ts">
import { ref, onMounted, onBeforeUnmount } from 'vue';
import type { TreeNode } from './TreeView.vue';
import { useAITaskStore } from '@/novel/editor/stores/aiTaskStore';
import { useEditorStore } from '@/novel/editor/stores/editorStore';

const aiTaskStore = useAITaskStore();
const editorStore = useEditorStore();
const visible = ref(false);
const position = ref({ x: 0, y: 0 });
const node = ref<TreeNode | null>(null);

const show = (event: MouseEvent, targetNode: TreeNode) => {
  node.value = targetNode;
  visible.value = true;
  position.value.x = event.clientX;
  position.value.y = event.clientY;
};

const hide = () => {
  visible.value = false;
  node.value = null;
};

const handleAIAction = (taskType: '续写' | '润色' | '分析', node: TreeNode) => {
  if (!node) return;
  // 要对一个非当前激活的节点执行任务，需要先将其设为激活项
  // 这样 AI 任务才能获取到正确的内容
  editorStore.setActiveItem(node.id);
  // 使用延时确保 activeItem 的计算属性更新完毕
  setTimeout(() => {
    aiTaskStore.startNewTask(taskType);
    hide();
  }, 50);
}

const handleAction = (action: 'newChapter' | 'newVolume' | 'rename' | 'delete') => {
  if (!node.value) return;

  const nodeId = node.value.id;

  switch (action) {
    case 'newChapter':
      editorStore.addChapterToVolume(nodeId);
      break;
    case 'newVolume':
      editorStore.addNewVolume();
      break;
    case 'rename':
      editorStore.setEditingNodeId(nodeId);
      break;
    case 'delete':
      editorStore.deleteNode(nodeId);
      break;
  }
  hide();
};

onMounted(() => {
  window.addEventListener('click', hide);
});

onBeforeUnmount(() => {
  window.removeEventListener('click', hide);
});

// Expose show/hide methods to parent component
defineExpose({ show, hide });
</script>

<style scoped>
.context-menu {
  position: fixed;
  z-index: 1000;
  background-color: white;
  border: 1px solid #e5e7eb;
  border-radius: 0.75rem;
  padding: 0.5rem;
  box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
  min-width: 14rem;
}
.context-menu-item {
  display: flex;
  align-items: center;
  gap: 0.75rem; /* 12px */
  padding: 0.5rem 0.75rem; /* 8px 12px */
  border-radius: 0.5rem; /* 8px */
  font-size: 0.875rem; /* 14px */
  color: #374151;
  cursor: pointer;
  user-select: none;
  transition: background-color 0.15s, color 0.15s;
}
.context-menu-item:hover {
  background-color: #f3f4f6;
}
.context-menu-item.danger:hover {
  background-color: #fee2e2;
  color: #b91c1c;
}
.context-menu-divider {
  height: 1px;
  background-color: #f3f4f6;
  margin: 0.5rem 0;
}
.menu-title {
  padding: 0.25rem 0.75rem;
  font-size: 0.75rem;
  color: #9CA3AF;
  font-weight: 500;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}
</style>

// =
// 文件: ..\src\novel\editor\components\sidebar\DirectoryTab.vue
//

<template>
  <div class="directory-tab-container">
    <div class="header">
      <h3 class="title">章节大纲</h3>
      <div class="actions">
        <button @click="handleAddNewVolume" class="action-btn" title="添加新卷">
          <i class="fa-solid fa-folder-plus fa-xs"></i>
        </button>
        <button class="action-btn" title="折叠/展开全部">
          <i class="fa-solid fa-folder-tree fa-xs"></i>
        </button>
      </div>
    </div>

    <TreeView
        v-if="directoryTree.length > 0"
        :nodes="directoryTree"
        :active-node-id="editorStore.activeItemId"
        :expanded-node-ids="editorStore.uiState.expandedNodeIds"
        :editing-node-id="editorStore.editingNodeId"
        @select-node="handleSelectNode"
        @toggle-expansion="handleToggleExpansion"
        @context-menu="handleContextMenu"
        @commit-rename="handleCommitRename"
        @cancel-rename="handleCancelRename"
    />
    <div v-else class="p-4 text-sm text-gray-500">
      正在加载目录...
    </div>
  </div>
</template>

<script setup lang="ts">
import { computed } from 'vue';
import TreeView, { type TreeNode } from './TreeView.vue';
import { useEditorStore, type Volume, type Chapter } from '@/novel/editor/stores/editorStore';

const emit = defineEmits<{
  (e: 'show-context-menu', payload: { node: TreeNode; event: MouseEvent }): void;
}>();

const editorStore = useEditorStore();

const directoryTree = computed((): TreeNode[] => {
  return editorStore.directoryData.map((volume: Volume) => ({
    id: volume.id,
    title: volume.title,
    icon: 'fa-solid fa-book-open text-orange-500',
    type: 'volume',
    originalData: volume,
    children: volume.chapters.map((chapter: Chapter) => ({
      id: chapter.id,
      title: chapter.title,
      icon: 'fa-solid fa-file-lines',
      status: chapter.status,
      type: 'chapter',
      originalData: chapter,
      children: [],
    })),
  }));
});

const handleSelectNode = (id: string) => {
  editorStore.setActiveItem(id);
};

const handleToggleExpansion = (id:string) => {
  editorStore.toggleNodeExpansion(id);
};

const handleContextMenu = (payload: { node: TreeNode; event: MouseEvent }) => {
  emit('show-context-menu', payload);
};

const handleAddNewVolume = () => {
  editorStore.addNewVolume();
};

const handleCommitRename = (payload: { nodeId: string; newTitle: string }) => {
  editorStore.renameNode(payload.nodeId, payload.newTitle);
};

const handleCancelRename = () => {
  editorStore.setEditingNodeId(null);
};
</script>

<style scoped>
.directory-tab-container { padding: 1rem; display: flex; flex-direction: column; height: 100%; }
.header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.75rem; padding: 0 0.5rem; }
.title { font-size: 0.875rem; font-weight: 500; color: #4B5563; }
.actions { display: flex; align-items: center; gap: 0.25rem; }
.action-btn { width: 1.75rem; height: 1.75rem; display: flex; align-items: center; justify-content: center; color: #6B7280; border-radius: 0.375rem; transition: background-color 0.15s; }
.action-btn:hover { background-color: #E5E7EB; }
</style>

// =
// 文件: ..\src\novel\editor\components\sidebar\EditorInternalSidebar.vue
//

<template>
  <aside class="editor-internal-sidebar-container">
    <!-- Tabs for switching between different sidebar views -->
    <div class="tabs-container">
      <div class="tabs tabs-bordered">
        <a
            v-for="tab in internalTabs"
            :key="tab.id"
            role="tab"
            :class="['tab', { 'tab-active text-blue-600': editorStore.uiState.activeInternalTab === tab.id }]"
            @click="editorStore.setActiveInternalTab(tab.id)"
        >
          {{ tab.name }}
        </a>
      </div>
    </div>

    <!-- Content area for the active tab -->
    <div class="tab-content-container">
      <keep-alive>
        <component :is="activeTabComponent" @show-context-menu="showDirectoryContextMenu" />
      </keep-alive>
    </div>

    <!-- Directory Context Menu Component -->
    <DirectoryContextMenu ref="directoryContextMenuRef" />

  </aside>
</template>

<script setup lang="ts">
import { ref, computed, defineAsyncComponent } from 'vue';
import { useEditorStore } from '@/novel/editor/stores/editorStore';
import DirectoryContextMenu from './DirectoryContextMenu.vue';
import type { TreeNode } from './TreeView.vue';

const editorStore = useEditorStore();
const directoryContextMenuRef = ref<InstanceType<typeof DirectoryContextMenu> | null>(null);

const internalTabs = ref([
  { id: 'directory', name: '目录' },
  { id: 'related', name: '相关' },
  { id: 'notes', name: '笔记' },
]);

const showDirectoryContextMenu = (payload: { node: TreeNode, event: MouseEvent }) => {
  directoryContextMenuRef.value?.show(payload.event, payload.node);
};

const tabComponents = {
  directory: defineAsyncComponent(() => import('./DirectoryTab.vue')),
  related: defineAsyncComponent(() => import('./RelatedTab.vue')),
  notes: defineAsyncComponent(() => import('./NotesTab.vue')),
};

const activeTabComponent = computed(() => {
  const tabId = editorStore.uiState.activeInternalTab;
  return tabComponents[tabId] || null;
});
</script>

<style scoped>
.editor-internal-sidebar-container {
  width: 20rem; /* 320px */
  border-right: 1px solid #F3F4F6; /* border-gray-100 */
  display: flex;
  flex-direction: column;
  flex-shrink: 0;
  background-color: #FAFBFC;
  position: relative;
}
.tabs-container {
  padding: 0 1rem;
  padding-top: 1rem;
  border-bottom: 1px solid #F3F4F6;
  flex-shrink: 0;
}
.tab {
  --tab-bg: transparent;
  padding-left: 1rem;
  padding-right: 1rem;
}
.tab-content-container {
  flex-grow: 1;
  overflow-y: auto;
  position: relative;
}
.tab-content-container::-webkit-scrollbar { width: 6px; }
.tab-content-container::-webkit-scrollbar-track { background: transparent; }
.tab-content-container::-webkit-scrollbar-thumb { background: #D1D5DB; border-radius: 3px; }
.tab-content-container::-webkit-scrollbar-thumb:hover { background: #9CA3AF; }
</style>

// =
// 文件: ..\src\novel\editor\components\sidebar\NotesTab.vue
//

<template>
  <div class="notes-tab-container">
    <div class="header">
      <h3 class="title">章节笔记</h3>
      <button class="action-btn" title="新建笔记"><i class="fa-solid fa-plus fa-xs"></i></button>
    </div>
    <div class="notes-list">
      <div
          v-for="note in editorStore.noteData"
          :key="note.id"
          @click="editorStore.setActiveItem(note.id)"
          class="note-item"
          :class="{ 'active': editorStore.activeItemId === note.id }"
      >
        <div class="note-header">
          <p class="note-title">{{ note.title }}</p>
          <span class="note-timestamp">{{ note.timestamp }}</span>
        </div>
        <p class="note-content">{{ note.content }}</p>
      </div>
    </div>
    <div class="quick-add-footer">
      <input type="text" placeholder="快速添加新笔记..." class="quick-add-input">
      <button class="quick-add-btn"><i class="fa-solid fa-paper-plane fa-sm"></i></button>
    </div>
  </div>
</template>

<script setup lang="ts">
import { useEditorStore } from '@/novel/editor/stores/editorStore';
const editorStore = useEditorStore();
</script>

<style scoped>
.notes-tab-container { padding: 1rem; display: flex; flex-direction: column; height: 100%; }
.header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.75rem; padding: 0 0.5rem; flex-shrink: 0; }
.title { font-size: 0.875rem; font-weight: 500; color: #4B5563; }
.action-btn { width: 1.75rem; height: 1.75rem; display: flex; align-items: center; justify-content: center; color: #6B7280; border-radius: 0.375rem; transition: background-color 0.15s; }
.action-btn:hover { background-color: #E5E7EB; }
.notes-list { flex-grow: 1; space-y: 0.5rem; overflow-y: auto; padding-right: 4px; }
.note-item { padding: 0.75rem; border-radius: 0.5rem; cursor: pointer; transition: all 0.2s; border: 1px solid transparent; background-color: #FFFFFF; }
.note-item:hover { background-color: #F9FAFB; border-color: #F3F4F6; }
.note-item.active { background-color: #FEFCE8; border-color: #FDE047; }
.note-header { display: flex; justify-content: space-between; align-items: flex-start; }
.note-title { font-size: 0.875rem; font-weight: 500; color: #1F2937; padding-right: 3rem; }
.note-timestamp { font-size: 0.75rem; color: #CA8A04; flex-shrink: 0; }
.note-content { font-size: 0.75rem; color: #4B5563; margin-top: 0.375rem; line-height: 1.6; display: -webkit-box; -webkit-box-orient: vertical; -webkit-line-clamp: 2; overflow: hidden; }
.quick-add-footer { margin-top: 1rem; padding-top: 1rem; border-top: 1px solid #F3F4F6; display: flex; gap: 0.5rem; flex-shrink: 0; }
.quick-add-input { flex-grow: 1; background: white; border: 1px solid #D1D5DB; border-radius: 0.5rem; padding: 0.4rem 0.75rem; font-size: 0.875rem; outline: none; transition: all 0.2s; }
.quick-add-input:focus { border-color: #3B82F6; box-shadow: 0 0 0 1px #3B82F6; }
.quick-add-btn { flex-shrink: 0; width: 2rem; height: 2rem; background-color: #4B5563; color: white; border-radius: 0.5rem; transition: background-color 0.2s; }
.quick-add-btn:hover { background-color: #374151; }
</style>

// =
// 文件: ..\src\novel\editor\components\sidebar\RelatedTab.vue
//

<template>
  <div class="related-tab-container">
    <div class="header">
      <h3 class="title">相关内容</h3>
      <button class="action-btn" title="添加新条目"><i class="fa-solid fa-plus fa-xs"></i></button>
    </div>
    <div class="search-bar">
      <i class="fa-solid fa-magnifying-glass search-icon"></i>
      <input type="text" placeholder="搜索角色、地点、设定..." class="search-input">
    </div>
    <ul class="item-list">
      <li v-for="group in editorStore.relatedData" :key="group.type">
        <a href="#" class="group-header">
          <i class="fa-solid fa-chevron-down w-4 text-gray-400"></i>
          <i class="w-4 text-center" :class="group.icon"></i>
          <span>{{ group.title }}</span>
          <span class="count-badge">{{ group.items.length }}</span>
        </a>
        <ul class="sub-item-list">
          <li v-for="item in group.items" :key="item.id">
            <a
                href="#"
                @click.prevent="editorStore.setActiveItem(item.id)"
                class="sub-item"
                :class="editorStore.activeItemId === item.id ? `active text-${group.color}-800 border-${group.color}-200 bg-${group.color}-100` : ''"
            >
              <i class="w-4" :class="[item.icon, editorStore.activeItemId === item.id ? `text-${group.color}-600` : 'text-gray-400']"></i>
              <span class="truncate">{{ item.title }}</span>
            </a>
          </li>
        </ul>
      </li>
    </ul>
  </div>
</template>

<script setup lang="ts">
import { useEditorStore } from '@/novel/editor/stores/editorStore';
const editorStore = useEditorStore();
</script>

<style scoped>
.related-tab-container { padding: 1rem; overflow-y: auto; height: 100%; }
.header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.75rem; padding: 0 0.5rem; }
.title { font-size: 0.875rem; font-weight: 500; color: #4B5563; }
.action-btn { width: 1.75rem; height: 1.75rem; display: flex; align-items: center; justify-content: center; color: #6B7280; border-radius: 0.375rem; transition: background-color 0.15s; }
.action-btn:hover { background-color: #E5E7EB; }
.search-bar { position: relative; margin-bottom: 1rem; }
.search-icon { position: absolute; left: 0.75rem; top: 50%; transform: translateY(-50%); color: #9CA3AF; font-size: 0.875rem; }
.search-input { width: 100%; background: white; border: 1px solid #D1D5DB; border-radius: 0.5rem; padding: 0.4rem 0.75rem 0.4rem 2.25rem; font-size: 0.875rem; outline: none; transition: all 0.2s; }
.search-input:focus { border-color: #3B82F6; box-shadow: 0 0 0 1px #3B82F6; }
.item-list, .sub-item-list { list-style: none; padding: 0; margin: 0; space-y: 0.25rem; }
.group-header { display: flex; align-items: center; gap: 0.75rem; padding: 0.5rem; border-radius: 0.5rem; font-weight: 500; font-size: 0.875rem; color: #374151; }
.group-header:hover { background-color: #F3F4F6; }
.count-badge { margin-left: auto; font-size: 0.75rem; color: #9CA3AF; font-weight: 400; }
.sub-item-list { padding-left: 1.5rem; margin-left: 0.375rem; border-left: 1px solid #E5E7EB; }
.sub-item { display: flex; align-items: center; gap: 0.75rem; padding: 0.5rem; border-radius: 0.5rem; font-size: 0.875rem; color: #374151; }
.sub-item:hover { background-color: #F3F4F6; }
.sub-item.active { font-weight: 500; border: 1px solid; }
</style>

// =
// 文件: ..\src\novel\editor\components\sidebar\TreeView.vue
//

<template>
  <ul class="tree-view-list">
    <li v-for="node in nodes" :key="node.id" class="tree-view-item">
      <!-- 节点自身的渲染 -->
      <div
          class="node-content"
          :class="{ 'active': node.id === activeNodeId }"
          @click="handleNodeClick(node.id)"
          @contextmenu.prevent="emit('context-menu', { node, event: $event })"
      >
        <!-- 展开/折叠图标 -->
        <div
            class="expand-icon"
            :class="{ 'invisible': !node.children || node.children.length === 0 }"
            @click.stop="emit('toggle-expansion', node.id)"
        >
          <i class="fa-solid fa-chevron-right transition-transform" :class="{ 'rotate-90': expandedNodeIds.has(node.id) }"></i>
        </div>

        <!-- 节点类型图标 -->
        <div class="node-type-icon">
          <i :class="node.icon"></i>
        </div>

        <!-- 节点标题或重命名输入框 -->
        <template v-if="editingNodeId === node.id">
          <input
              ref="renameInput"
              type="text"
              :value="node.title"
              class="rename-input"
              @blur="handleRenameCommit($event, node.id)"
              @keydown.enter.prevent="handleRenameCommit($event, node.id)"
              @keydown.esc.prevent="handleRenameCancel"
              @click.stop
          />
        </template>
        <template v-else>
          <span class="node-title truncate">{{ node.title }}</span>
        </template>

        <!-- 节点状态徽章 (可选) -->
        <span v-if="node.status" class="node-status-badge">
          {{ node.status === 'editing' ? '编辑中' : '' }}
        </span>
      </div>

      <!-- 递归渲染子节点 -->
      <div v-if="node.children && node.children.length > 0" class="children-container">
        <TreeView
            v-show="expandedNodeIds.has(node.id)"
            :nodes="node.children"
            :active-node-id="activeNodeId"
            :expanded-node-ids="expandedNodeIds"
            :editing-node-id="editingNodeId"
            @select-node="emit('select-node', $event)"
            @toggle-expansion="emit('toggle-expansion', $event)"
            @context-menu="emit('context-menu', $event)"
            @commit-rename="emit('commit-rename', $event)"
            @cancel-rename="emit('cancel-rename')"
        />
      </div>
    </li>
  </ul>
</template>

<script setup lang="ts">
import { ref, watch, nextTick } from 'vue';
import type { PropType } from 'vue';

// --- 类型定义 ---
// TreeView组件期望接收的节点数据结构
export interface TreeNode {
  id: string;
  title: string;
  icon: string; // Font Awesome class
  status?: string;
  type: 'volume' | 'chapter' | 'note' | 'character_profile' | 'worldview_doc'; // 添加类型
  children?: TreeNode[];
  // 可以包含原始数据以便在事件中传递
  originalData: any;
}

// --- Props & Emits ---
const props = defineProps({
  /**
   * 要渲染的树节点数组
   */
  nodes: {
    type: Array as PropType<TreeNode[]>,
    required: true,
  },
  /**
   * 当前激活的节点ID
   */
  activeNodeId: {
    type: String as PropType<string | null>,
    default: null,
  },
  /**
   * 一个包含所有已展开节点ID的Set
   */
  expandedNodeIds: {
    type: Set as PropType<Set<string>>,
    required: true,
  },
  /**
   * 当前正在编辑的节点ID
   */
  editingNodeId: {
    type: String as PropType<string | null>,
    default: null,
  },
});

const emit = defineEmits<{
  (e: 'select-node', id: string): void;
  (e: 'toggle-expansion', id: string): void;
  (e: 'context-menu', payload: { node: TreeNode, event: MouseEvent }): void;
  (e: 'commit-rename', payload: { nodeId: string, newTitle: string }): void;
  (e: 'cancel-rename'): void;
}>();

const renameInput = ref<HTMLInputElement[] | null>(null);

watch(() => props.editingNodeId, (newId, oldId) => {
  if (newId && newId !== oldId) {
    nextTick(() => {
      if (renameInput.value && renameInput.value.length > 0) {
        renameInput.value[0].focus();
        renameInput.value[0].select();
      }
    });
  }
});

const handleNodeClick = (id: string) => {
  if (props.editingNodeId === id) return;
  emit('select-node', id);
};

const handleRenameCommit = (event: Event, nodeId: string) => {
  const input = event.target as HTMLInputElement;
  const newTitle = input.value;
  emit('commit-rename', { nodeId, newTitle });
};

const handleRenameCancel = () => {
  emit('cancel-rename');
};

</script>

<style scoped>
.tree-view-list {
  list-style: none;
  padding: 0;
  margin: 0;
  width: 100%;
}
.node-content {
  display: flex;
  align-items: center;
  gap: 0.5rem; /* 8px */
  padding: 0.5rem 0.75rem; /* 8px 12px */
  border-radius: 0.5rem; /* 8px */
  cursor: pointer;
  transition: background-color 0.15s ease-in-out, color 0.15s ease-in-out;
  font-size: 0.875rem; /* 14px */
  color: #374151; /* text-gray-700 */
  user-select: none;
}
.node-content:hover {
  background-color: #F3F4F6; /* hover:bg-gray-100 */
}
.node-content.active {
  background-color: #E0E7FF; /* bg-indigo-100 */
  color: #3730A3; /* text-indigo-800 */
  font-weight: 500;
}
.expand-icon {
  width: 1rem; /* 16px */
  height: 1rem; /* 16px */
  display: flex;
  align-items: center;
  justify-content: center;
  color: #9CA3AF; /* text-gray-400 */
  flex-shrink: 0;
}
.expand-icon.invisible {
  visibility: hidden;
}
.node-type-icon {
  width: 1.25rem; /* 20px */
  display: flex;
  align-items: center;
  justify-content: center;
  color: #6B7280; /* text-gray-500 */
}
.node-content.active .node-type-icon {
  color: #4338CA; /* active:text-indigo-700 */
}
.node-title {
  flex-grow: 1;
}
.node-status-badge {
  margin-left: auto;
  font-size: 0.75rem; /* 12px */
  padding: 0.125rem 0.5rem; /* 2px 8px */
  background-color: #DCFCE7; /* bg-green-100 */
  color: #166534; /* text-green-800 */
  border-radius: 9999px;
  font-weight: 500;
}
.children-container {
  padding-left: 1.5rem; /* 24px */
  margin-left: 0.5rem; /* 8px */
  border-left: 1px solid #E5E7EB; /* border-gray-200 */
}
.rename-input {
  flex-grow: 1;
  background-color: white;
  border: 1px solid #3B82F6;
  border-radius: 4px;
  padding: 1px 4px;
  font-size: 0.875rem;
  color: #1F2937;
  outline: none;
  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);
}
</style>

// =
// 文件: ..\src\novel\editor\layouts\NovelEditorLayout.vue
//

<template>
  <div class="h-screen w-screen flex bg-white design-frame-container">
    <div class="design-frame">
      <!-- 顶部导航栏: 严格遵循UI设计稿 -->
      <header class="h-[56px] bg-white border-b border-gray-100 flex items-center px-6 flex-shrink-0">
        <div class="flex items-center gap-2 flex-1">
          <!-- 返回链接指向小说管理台 -->
          <router-link to="/novel/dashboard" class="flex items-center gap-2 text-gray-500 hover:text-gray-800 transition-colors p-2 -ml-2 rounded-lg">
            <i class="fa-solid fa-chevron-left w-4 h-4"></i>
            <span>返回</span>
          </router-link>
          <span class="text-gray-300">/</span>
          <!-- 静态小说标题 -->
          <span class="font-medium text-gray-800 text-sm">星际漫游者</span>
        </div>
        <div class="flex items-center gap-4">
          <button class="p-2 text-gray-500 hover:bg-gray-100 rounded-lg transition-colors">
            <i class="fa-solid fa-search w-5 h-5"></i>
          </button>
          <button class="p-2 text-gray-500 hover:bg-gray-100 rounded-lg transition-colors relative">
            <i class="fa-solid fa-bell w-5 h-5"></i>
            <span class="absolute top-1.5 right-1.5 w-2 h-2 bg-red-500 rounded-full border border-white"></span>
          </button>
          <div class="ml-2 flex items-center gap-3">
            <img src="https://i.pravatar.cc/150?u=creator" alt="Creator Avatar" class="w-9 h-9 rounded-full">
            <div>
              <p class="text-sm font-medium text-[#374151]">创作者</p>
              <p class="text-xs text-[#9CA3AF]">在线</p>
            </div>
          </div>
        </div>
      </header>

      <!-- [修复] 使用 <router-view /> 来渲染子路由对应的组件 (EditorWorkspaceView) -->
      <div class="h-[calc(100%-56px)]">
        <router-view />
      </div>
    </div>
    <!-- [修复] 将全局组件放在布局的顶层 -->
    <GlobalAIAssistant />
    <AITaskConfigModal />
  </div>
</template>

<script setup lang="ts">
import GlobalAIAssistant from '@/novel/shared/components/GlobalAIAssistant/index.vue';
import AITaskConfigModal from '@/novel/shared/components/GlobalAIAssistant/AITaskConfigModal.vue';
import '@/novel/assets/styles/main.css';
</script>

<style scoped>
.design-frame-container {
  padding: 2rem;
  background-color: #f5f5f7;
}
.design-frame {
  width: 100%;
  height: 100%;
  max-width: 1800px;
  margin: auto;
  background: white;
  border-radius: 16px;
  overflow: hidden;
  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.08);
}
</style>

// =
// 文件: ..\src\novel\editor\router.ts
//

import type { RouteRecordRaw } from 'vue-router'

export const editorRoutes: Array<RouteRecordRaw> = [
    {
        path: '/novel/editor',
        component: () => import('@/novel/editor/layouts/NovelEditorLayout.vue'),
        children: [
            {
                // 子路由，当路径为 /novel/editor 时，它会作为默认子路由被匹配
                path: '',
                name: 'NovelEditorWorkspace',
                // 这个子路由负责渲染实际的工作区视图
                component: () => import('@/novel/editor/views/EditorWorkspaceView.vue'),
                meta: { title: '小说编辑器' }
            }
        ]
    }
]

// =
// 文件: ..\src\novel\editor\stores\aiTaskStore.ts
//

import { defineStore } from 'pinia'
import { ref } from 'vue'
import { useEditorStore } from './editorStore'

// --- 类型定义 ---
export type AITaskStatus = 'pending' | 'processing' | 'completed' | 'failed';

export interface AITask {
    id: string;
    title: string;
    status: AITaskStatus;
    prompt: string;
    originalContent: string;
    generatedContent: string;
    error?: string;
    createdAt: Date;
}

// --- Store 定义 ---
export const useAITaskStore = defineStore('aiTask', () => {
    // --- State ---

    /**
     * 存储所有AI任务的队列
     */
    const tasks = ref<AITask[]>([]);

    // --- Actions ---

    /**
     * 模拟AI流式响应
     * @param taskId - 正在处理的任务ID
     */
    const _simulateAIStream = (taskId: string) => {
        const task = tasks.value.find(t => t.id === taskId);
        if (!task) return;

        task.status = 'processing';
        // 流式响应开始时，生成内容等于原始内容，AI在此基础上增删
        task.generatedContent = task.originalContent + '\n\n';

        // 模拟的流式文本
        const mockResponseText = "警报的尖啸犹如一把利刃，划破了卡尔文短暂的假寐。他猛然挺直身躯，猩红的警示灯在他眼中投下不祥的光晕。'发现引力异常，' 艾拉的合成音毫无波澜，却字字千钧，'我们正迫近一个理论中的时空奇点——跃迁点。根据数据库推演，这或许是返回太阳系的唯一路径。'";
        const words = mockResponseText.split(''); // 按单个字符分割以获得更平滑的流式效果
        let wordIndex = 0;

        // 随机决定这次模拟是否会失败
        const willFail = Math.random() < 0.1; // 10%的失败率

        const intervalId = setInterval(() => {
            if (wordIndex < words.length) {
                task.generatedContent += words[wordIndex];
                wordIndex++;

                // 模拟中途失败
                if (willFail && wordIndex > words.length / 2) {
                    clearInterval(intervalId);
                    task.status = 'failed';
                    task.error = '生成超时，请检查网络后重试。';
                    return;
                }

            } else {
                clearInterval(intervalId);
                task.status = 'completed';
            }
        }, 30); // 每30ms吐一个字，速度更快一些
    }

    /**
     * 创建并开始一个新AI任务
     * @param taskType - 任务类型 (如 '润色', '续写')
     */
    const startNewTask = (taskType: '润色' | '续写' | '分析') => {
        const editorStore = useEditorStore();
        const currentItem = editorStore.activeItem;

        if (!currentItem) {
            console.error("无法启动AI任务：没有激活的文档。");
            return;
        }

        const newTask: AITask = {
            id: `task_${Date.now()}`,
            title: `${taskType} "${currentItem.title}"`,
            status: 'pending',
            prompt: `请对以下内容进行"${taskType}"：`, // 简单的示例prompt
            originalContent: currentItem.content,
            generatedContent: '',
            createdAt: new Date(),
        };

        // 将新任务添加到队列顶部
        tasks.value.unshift(newTask);

        // 立即开始模拟处理
        // 使用 setTimeout 延迟执行，给 Vue 一点时间渲染 "pending" 状态
        setTimeout(() => _simulateAIStream(newTask.id), 100);
    };

    /**
     * 清除所有任务
     */
    const clearAllTasks = () => {
        tasks.value = [];
    };

    return {
        // State
        tasks,
        // Actions
        startNewTask,
        clearAllTasks
    }
})

// =
// 文件: ..\src\novel\editor\stores\editorStore.ts
//

import { defineStore } from 'pinia'
import { ref, computed } from 'vue'

// --- 类型定义 ---
export interface Chapter {
    id: string;
    type: 'chapter';
    title: string;
    wordCount: number;
    content: string;
    status: 'completed' | 'editing' | 'planned';
}

export interface Volume {
    id: string;
    type: 'volume';
    title:string;
    content: string;
    chapters: Chapter[];
}

export interface RelatedItem {
    id: string;
    type: 'character_profile' | 'worldview_doc';
    title: string;
    icon: string;
    content: string;
}

export interface RelatedItemGroup {
    type: string;
    title: string;
    icon: string;
    color: string;
    items: RelatedItem[];
}

export interface NoteItem {
    id: string;
    type: 'note';
    title: string;
    timestamp: string;
    content: string;
}

type ActiveItem = Volume | Chapter | RelatedItem | NoteItem | null;

interface UIState {
    activeInternalTab: 'directory' | 'related' | 'notes';
    expandedNodeIds: Set<string>;
}

// --- Store 定义 ---
export const useEditorStore = defineStore('editor', () => {
    // --- State ---
    const directoryData = ref<Volume[]>([]);
    const relatedData = ref<RelatedItemGroup[]>([]); // [新增] 相关内容数据
    const noteData = ref<NoteItem[]>([]); // [新增] 笔记数据
    const activeItemId = ref<string | null>(null);
    const uiState = ref<UIState>({
        activeInternalTab: 'directory',
        expandedNodeIds: new Set(),
    });
    const editingNodeId = ref<string | null>(null);

    // --- Getters ---
    const activeItem = computed((): ActiveItem => {
        if (!activeItemId.value) return null;

        // 在所有数据源中查找激活项
        for (const volume of directoryData.value) {
            if (volume.id === activeItemId.value) return volume;
            for (const chapter of volume.chapters) {
                if (chapter.id === activeItemId.value) return chapter;
            }
        }
        for (const group of relatedData.value) {
            for (const item of group.items) {
                if(item.id === activeItemId.value) return item;
            }
        }
        for (const note of noteData.value) {
            if(note.id === activeItemId.value) return note;
        }
        return null;
    });

    // --- Private Helpers ---
    const findNodeAndParent = (nodeId: string): { node: Volume | Chapter | null, parent: Volume | null } => {
        for (const volume of directoryData.value) {
            if (volume.id === nodeId) {
                return { node: volume, parent: null }; // Found a volume
            }
            for (const chapter of volume.chapters) {
                if (chapter.id === nodeId) {
                    return { node: chapter, parent: volume }; // Found a chapter
                }
            }
        }
        return { node: null, parent: null };
    };

    // --- Actions ---
    const updateItemContentById = (id: string, content: string) => {
        // 简化版，实际项目中可能需要更复杂的查找逻辑
        const item = activeItem.value;
        if (item && item.id === id) {
            item.content = content;
            if (item.type === 'chapter') {
                item.wordCount = content.replace(/<[^>]+>/g, '').length;
            }
        }
    }

    const fetchNovelData = (novelId: string) => {
        console.log(`Fetching data for novel: ${novelId}`);

        // 目录数据
        directoryData.value = [
            { id: 'vol-1', type: 'volume', title: '第一卷：星尘之始', content: '<h1>第一卷大纲</h1><p>本卷主要介绍主角卡尔文的背景，以及他被困于深空的孤独处境。通过一次意外的信号接收，引出故事的核心悬念——回家的可能性。</p>', chapters: [
                    { id: 'ch-4', type: 'chapter', title: '第四章: 跃迁点', wordCount: 2415, content: '<h1>第四章: 跃迁点</h1><p>控制台的警报声将卡尔文从浅眠中惊醒...</p>', status: 'editing' },
                ]},
        ];

        relatedData.value = [
            { type: 'character', title: '角色', icon: 'fa-solid fa-users text-teal-500', color: 'teal', items: [
                    { id: 'char-calvin', type: 'character_profile', title: '卡尔文·里德', icon: 'fa-regular fa-user', content: '<h2>卡尔文·里德</h2><p><strong>年龄：</strong>35</p>...' },
                    { id: 'char-aila', type: 'character_profile', title: '艾拉 (AILA)', icon: 'fa-regular fa-user', content: '<h2>艾拉 (AILA)</h2><p>第五代通用人工智能...</p>' },
                ]},
            { type: 'worldview', title: '世界观', icon: 'fa-solid fa-earth-americas text-sky-500', color: 'sky', items: [
                    { id: 'world-overview', type: 'worldview_doc', title: '世界观总览', icon: 'fa-regular fa-file-lines', content: '<h3>时间背景</h3><p>公元2157年...</p>' },
                ]}
        ];

        noteData.value = [
            { id: 'note-1', type: 'note', title: '第四章情感转折点设计', timestamp: '今天 14:32', content: '卡尔文对"回家"的复杂情感需要更细腻的描写。目前的写法“心跳漏了一拍”有些 cliché...'},
            { id: 'note-2', type: 'note', title: '跃迁点物理描述', timestamp: '今天 11:20', content: '查阅了相关资料，跃迁点可以描述为时空扭曲形成的漩涡状结构...'}
        ];

        activeItemId.value = 'ch-4';
        uiState.value.expandedNodeIds.add('vol-1');
    };

    const setActiveItem = (id: string) => {
        activeItemId.value = id;
    };

    const toggleNodeExpansion = (nodeId: string) => {
        if (uiState.value.expandedNodeIds.has(nodeId)) {
            uiState.value.expandedNodeIds.delete(nodeId);
        } else {
            uiState.value.expandedNodeIds.add(nodeId);
        }
    };

    const setActiveInternalTab = (tabId: 'directory' | 'related' | 'notes') => {
        uiState.value.activeInternalTab = tabId;
    };

    const setEditingNodeId = (id: string | null) => {
        editingNodeId.value = id;
    };

    const addNewVolume = () => {
        const newVolume: Volume = {
            id: `vol-${Date.now()}`,
            type: 'volume',
            title: '新建卷',
            content: `<h1>新建卷大纲</h1>`,
            chapters: [],
        };
        directoryData.value.push(newVolume);
        setEditingNodeId(newVolume.id);
        if (!uiState.value.expandedNodeIds.has(newVolume.id)) {
            toggleNodeExpansion(newVolume.id);
        }
    };

    const addChapterToVolume = (volumeId: string) => {
        const volume = directoryData.value.find(v => v.id === volumeId);
        if (volume) {
            const newChapter: Chapter = {
                id: `ch-${Date.now()}`,
                type: 'chapter',
                title: '新建章节',
                wordCount: 0,
                content: '<h1>新建章节</h1>',
                status: 'planned'
            };
            volume.chapters.push(newChapter);
            if (!uiState.value.expandedNodeIds.has(volume.id)) {
                toggleNodeExpansion(volume.id);
            }
            setActiveItem(newChapter.id);
            setEditingNodeId(newChapter.id);
        }
    };

    const renameNode = (nodeId: string, newTitle: string) => {
        if (!newTitle.trim()) {
            setEditingNodeId(null);
            return;
        }
        const { node } = findNodeAndParent(nodeId);
        if (node) {
            node.title = newTitle.trim();
        }
        setEditingNodeId(null);
    };

    const deleteNode = (nodeId: string) => {
        const { node, parent } = findNodeAndParent(nodeId);
        if (!node) return;

        const confirmation = window.confirm(`您确定要删除 "${node.title}" 吗？此操作无法撤销。`);
        if (!confirmation) return;

        if (node.type === 'volume') {
            directoryData.value = directoryData.value.filter(v => v.id !== nodeId);
        } else if (node.type === 'chapter' && parent) {
            parent.chapters = parent.chapters.filter(c => c.id !== nodeId);
        }

        if (activeItemId.value === nodeId) {
            activeItemId.value = null;
        }
        if (editingNodeId.value === nodeId) {
            editingNodeId.value = null;
        }
    };

    return {
        directoryData,
        relatedData,
        noteData,
        activeItemId,
        uiState,
        editingNodeId,
        activeItem,
        fetchNovelData,
        setActiveItem,
        updateItemContentById,
        toggleNodeExpansion,
        setActiveInternalTab,
        setEditingNodeId,
        addNewVolume,
        addChapterToVolume,
        renameNode,
        deleteNode,
    }
})

// =
// 文件: ..\src\novel\editor\views\EditorWorkspaceView.vue
//

<template>
  <div class="editor-workspace-view">
    <!-- Left Column: Internal Sidebar -->
    <EditorInternalSidebar />

    <!-- Center Column: Core Content Area -->
    <EditorContentArea />

    <!-- Right Column: AI Assistant Panel -->
    <EditorAIPanel />
  </div>
</template>

<script setup lang="ts">
import { onMounted } from 'vue';
import { useEditorStore } from '@/novel/editor/stores/editorStore';

// --- Component Imports ---
import EditorInternalSidebar from '@/novel/editor/components/sidebar/EditorInternalSidebar.vue';
import EditorContentArea from '@/novel/editor/components/content/EditorContentArea.vue';
import EditorAIPanel from '@/novel/editor/components/ai/EditorAIPanel.vue';

// --- Hooks ---
const editorStore = useEditorStore();

/**
 * onMounted: 当组件挂载后，执行初始化操作。
 * 这是连接路由和store，加载数据的关键入口。
 */
onMounted(() => {
  // 调用 action 加载数据。
  // 传入一个虚拟的 novelId 以符合 action 的签名
  editorStore.fetchNovelData('default-novel');
});

</script>

<style scoped>
.editor-workspace-view {
  display: flex;
  height: 100%;
  width: 100%;
  background-color: #F9FAFB; /* 给工作区一个基础背景色 */
}
</style>

// =
// 文件: ..\src\novel\layouts\NovelChatLayout.vue
//

<template>
  <div class="h-screen w-screen flex bg-white design-frame-container">
    <div class="design-frame">
      <!-- 顶部导航栏: 恢复标准页头 -->
      <header class="h-[56px] bg-white border-b border-gray-100 flex items-center px-6 flex-shrink-0">
        <div class="flex items-center gap-2 flex-1">
          <!-- 返回链接，通常指向一个高级别页面如 Dashboard -->
          <router-link to="/novel/dashboard" class="flex items-center gap-2 text-gray-500 hover:text-gray-800 transition-colors p-2 -ml-2 rounded-lg">
            <i class="fa-solid fa-chevron-left w-4 h-4"></i>
            <span>返回</span>
          </router-link>
          <span class="text-gray-300">/</span>
          <!-- 适配为聊天模块的标题 -->
          <span class="font-medium text-gray-800 text-sm">AI 聊天助手</span>
        </div>
        <div class="flex items-center gap-4">
          <button class="p-2 text-gray-500 hover:bg-gray-100 rounded-lg transition-colors">
            <i class="fa-solid fa-search w-5 h-5"></i>
          </button>
          <button class="p-2 text-gray-500 hover:bg-gray-100 rounded-lg transition-colors relative">
            <i class="fa-solid fa-bell w-5 h-5"></i>
            <span class="absolute top-1.5 right-1.5 w-2 h-2 bg-red-500 rounded-full border border-white"></span>
          </button>
          <div class="ml-2 flex items-center gap-3">
            <img src="https://i.pravatar.cc/150?u=creator" alt="Creator Avatar" class="w-9 h-9 rounded-full">
            <div>
              <p class="text-sm font-medium text-[#374151]">创作者</p>
              <p class="text-xs text-[#9CA3AF]">在线</p>
            </div>
          </div>
        </div>
      </header>

      <!-- 内容区域，填充剩余高度 -->
      <div class="h-[calc(100%-56px)]">
        <router-view />
      </div>
    </div>
    <GlobalAIAssistant />
    <AITaskConfigModal />
  </div>
</template>

<script setup lang="ts">
import GlobalAIAssistant from '@/novel/shared/components/GlobalAIAssistant/index.vue';
import AITaskConfigModal from '@/novel/shared/components/GlobalAIAssistant/AITaskConfigModal.vue';
import '@/novel/assets/styles/main.css';
</script>

<style scoped>
.design-frame-container {
  padding: 2rem;
  background-color: #f5f5f7;
}
.design-frame {
  width: 100%;
  height: 100%;
  max-width: 1800px;
  margin: auto;
  background: white;
  border-radius: 16px;
  overflow: hidden;
  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.08);
  display: flex;
  flex-direction: column;
}
</style>

// =
// 文件: ..\src\novel\layouts\NovelDashboardLayout.vue
//

<template>
  <div class="h-screen w-screen flex bg-white design-frame-container">
    <div class="design-frame">
      <div class="h-10 px-5 flex items-center border-b border-gray-100 bg-gray-50 flex-shrink-0">
        <div class="flex items-center gap-2">
          <div class="w-3 h-3 rounded-full bg-[#FF5F57]"></div>
          <div class="w-3 h-3 rounded-full bg-[#FFBD2E]"></div>
          <div class="w-3 h-3 rounded-full bg-[#28CA42]"></div>
        </div>
        <div class="ml-auto flex items-center gap-4 text-xs text-gray-400">
          <span>AI Creator Platform</span>
        </div>
      </div>
      <div class="h-[calc(100%-40px)] flex">
        <NovelDashboardSidebar />
        <main class="flex-1 bg-white flex flex-col overflow-hidden">
          <AppHeader />
          <router-view />
        </main>
      </div>
    </div>
    <!-- [修复] 将全局组件放在布局的顶层 -->
    <GlobalAIAssistant />
    <AITaskConfigModal />
  </div>
</template>

<script setup lang="ts">
import AppHeader from '@/layouts/components/AppHeader.vue'
import NovelDashboardSidebar from '@/novel/dashboard/components/NovelDashboardSidebar.vue'
import GlobalAIAssistant from '@/novel/shared/components/GlobalAIAssistant/index.vue'
import AITaskConfigModal from '@/novel/shared/components/GlobalAIAssistant/AITaskConfigModal.vue'
import '@/novel/assets/styles/main.css'
</script>

<style scoped>
.design-frame-container {
  padding: 2rem;
  background-color: #f5f5f7;
}
.design-frame {
  width: 100%;
  height: 100%;
  max-width: 1800px;
  margin: auto;
  background: white;
  border-radius: 16px;
  overflow: hidden;
  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.08);
}
</style>

// =
// 文件: ..\src\novel\layouts\NovelHistoryLayout.vue
//

<template>
  <div class="h-screen w-screen flex bg-white design-frame-container">
    <div class="design-frame">
      <!-- 顶部导航栏 -->
      <header class="h-[56px] bg-white border-b border-gray-100 flex items-center px-6 flex-shrink-0">
        <div class="flex items-center gap-2 flex-1">
          <!-- 返回链接，可以指向小说管理首页 -->
          <router-link to="/novel/manage/outline" class="flex items-center gap-2 text-gray-500 hover:text-gray-800 transition-colors p-2 -ml-2 rounded-lg">
            <i class="fa-solid fa-chevron-left w-4 h-4"></i>
            <span>返回</span>
          </router-link>
          <span class="text-gray-300">/</span>
          <!-- 静态标题 -->
          <span class="font-medium text-gray-800 text-sm">版本历史</span>
        </div>
        <div class="flex items-center gap-4">
          <button class="p-2 text-gray-500 hover:bg-gray-100 rounded-lg transition-colors">
            <i class="fa-solid fa-search w-5 h-5"></i>
          </button>
          <button class="p-2 text-gray-500 hover:bg-gray-100 rounded-lg transition-colors relative">
            <i class="fa-solid fa-bell w-5 h-5"></i>
            <span class="absolute top-1.5 right-1.5 w-2 h-2 bg-red-500 rounded-full border border-white"></span>
          </button>
          <div class="ml-2 flex items-center gap-3">
            <img src="https://i.pravatar.cc/150?u=creator" alt="Creator Avatar" class="w-9 h-9 rounded-full">
            <div>
              <p class="text-sm font-medium text-[#374151]">创作者</p>
              <p class="text-xs text-[#9CA3AF]">在线</p>
            </div>
          </div>
        </div>
      </header>

      <!-- 内容区域 -->
      <div class="h-[calc(100%-56px)]">
        <router-view />
      </div>
    </div>
    <GlobalAIAssistant />
    <AITaskConfigModal />
  </div>
</template>

<script setup lang="ts">
import GlobalAIAssistant from '@/novel/shared/components/GlobalAIAssistant/index.vue';
import AITaskConfigModal from '@/novel/shared/components/GlobalAIAssistant/AITaskConfigModal.vue';
import '@/novel/assets/styles/main.css';
</script>

<style scoped>
.design-frame-container {
  padding: 2rem;
  background-color: #f5f5f7;
}
.design-frame {
  width: 100%;
  height: 100%;
  max-width: 1800px;
  margin: auto;
  background: white;
  border-radius: 16px;
  overflow: hidden;
  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.08);
  display: flex;
  flex-direction: column;
}
</style>

// =
// 文件: ..\src\novel\layouts\NovelManagementLayout.vue
//

<template>
  <div class="h-screen w-screen flex bg-white design-frame-container">
    <div class="design-frame">
      <div class="h-10 px-5 flex items-center border-b border-gray-100 bg-gray-50 flex-shrink-0">
        <div class="flex items-center gap-2">
          <div class="w-3 h-3 rounded-full bg-[#FF5F57]"></div>
          <div class="w-3 h-3 rounded-full bg-[#FFBD2E]"></div>
          <div class="w-3 h-3 rounded-full bg-[#28CA42]"></div>
        </div>
        <div class="ml-auto flex items-center gap-4 text-xs text-gray-400">
          <span>AI Creator Platform</span>
        </div>
      </div>
      <div class="h-[calc(100%-40px)] flex">
        <NovelManagementSidebar />
        <main class="flex-1 bg-white flex flex-col overflow-hidden">
          <!-- 使用与全局一致的 AppHeader -->
          <AppHeader />
          <router-view />
        </main>
      </div>
    </div>
    <!-- [修复] 将全局组件放在布局的顶层 -->
    <GlobalAIAssistant />
    <AITaskConfigModal />
  </div>
</template>

<script setup lang="ts">
import AppHeader from '@/layouts/components/AppHeader.vue'
import NovelManagementSidebar from '@/novel/management/components/NovelManagementSidebar.vue'
import GlobalAIAssistant from "@/novel/shared/components/GlobalAIAssistant/index.vue";
import AITaskConfigModal from '@/novel/shared/components/GlobalAIAssistant/AITaskConfigModal.vue'
import '@/novel/assets/styles/main.css'
</script>

<style scoped>
.design-frame-container {
  padding: 2rem;
  background-color: #f5f5f7;
}
.design-frame {
  width: 100%;
  height: 100%;
  max-width: 1800px;
  margin: auto;
  background: white;
  border-radius: 16px;
  overflow: hidden;
  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.08);
}
</style>

// =
// 文件: ..\src\novel\management\components\NovelManagementSidebar.vue
//

<template>
  <aside class="w-64 bg-[#FAFAFA] border-r border-gray-100 flex flex-col flex-shrink-0">
    <!-- 顶部小说信息区域 -->
    <div class="p-4 space-y-4 border-b border-gray-100 h-20 flex items-center">
      <router-link to="/novel/manage/outline" class="flex items-center gap-3 px-2 group w-full">
        <div class="w-10 h-10 rounded-lg flex-shrink-0 overflow-hidden flex items-center justify-center bg-gradient-to-br from-indigo-100 to-purple-100 group-hover:scale-105 transition-transform">
          <svg class="w-6 h-6 text-indigo-400" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><rect x="5" y="3" width="14" height="18" rx="2"/></svg>
        </div>
        <div class="flex-1 min-w-0">
          <h3 class="font-medium text-[#374151] text-sm truncate">星际漫游者</h3>
          <p class="text-xs text-[#9CA3AF] truncate">科幻 • 编辑中</p>
        </div>
        <router-link to="/novel/dashboard" @click.stop class="w-4 h-4 text-gray-400 group-hover:-translate-x-1 transition-transform">
          <svg fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M15 18L9 12L15 6"/></svg>
        </router-link>
      </router-link>
    </div>

    <!-- 管理菜单 -->
    <nav class="flex-1 px-4 py-6">
      <div class="mb-8">
        <p class="text-xs font-medium text-[#9CA3AF] px-3 mb-3 uppercase tracking-wider">小说管理</p>
        <div class="space-y-1">
          <router-link v-for="item in managementNav" :key="item.name" :to="item.path" class="flex items-center gap-3 px-3 py-2.5 text-[#6B7280] hover:bg-gray-100 rounded-lg text-sm transition-colors" active-class="bg-[#4B5563] text-white font-medium">
            <span v-html="item.icon" class="w-5 h-5"></span>
            <span>{{ item.name }}</span>
          </router-link>
        </div>
      </div>

      <div>
        <p class="text-xs font-medium text-[#9CA3AF] px-3 mb-3 uppercase tracking-wider">工具</p>
        <div class="space-y-1">
          <router-link v-for="item in toolsNav" :key="item.name" :to="item.path" class="flex items-center gap-3 px-3 py-2.5 text-[#6B7280] hover:bg-gray-100 rounded-lg text-sm transition-colors" active-class="bg-[#4B5563] text-white font-medium">
            <span v-html="item.icon" class="w-5 h-5"></span>
            <span>{{ item.name }}</span>
          </router-link>
        </div>
      </div>
    </nav>
  </aside>
</template>

<script setup lang="ts">
import { ref } from 'vue';

// [重构] "编辑章节"的路径现在明确指向新的静态路由
const managementNav = ref([
  { name: '编辑章节', path: `/novel/editor`, icon: `<svg fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24"><path d="M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10" /></svg>` },
  { name: '大纲视图', path: `/novel/manage/outline`, icon: `<svg fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25H12" /></svg>` },
  { name: '角色设定', path: `/novel/manage/character-settings`, icon: `<svg fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M15 19.128a9.38 9.38 0 002.625.372 9.337 9.337 0 004.121-2.438c.155-.19.315-.386.44-1.251l-2.07-1.758a4.5 4.5 0 00-6.364-6.364l-2.07-1.758a9.337 9.337 0 00-4.12 2.438c-1.128 1.406-1.666 3.146-1.666 4.884 0 1.738.538 3.478 1.666 4.884a9.337 9.337 0 004.12 2.438zM15 19.128L12 12.586l-3 3.001" /></svg>` },
  { name: '世界观', path: `/novel/manage/worldview`, icon: `<svg fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M12 21a9.004 9.004 0 008.716-6.747M12 21a9.004 9.004 0 01-8.716-6.747M12 21c1.356 0 2.673-.174 3.946-.512M12 21c-1.356 0-2.673-.174-3.946-.512M12 3a9.004 9.004 0 00-8.716 6.747M12 3a9.004 9.004 0 018.716 6.747M12 3c1.356 0 2.673.174 3.946.512M12 3c-1.356 0-2.673-.174-3.946-.512M3.284 15.842a9.002 9.002 0 000-7.684M20.716 15.842a9.002 9.002 0 000-7.684" /></svg>` },
]);

const toolsNav = ref([
  { name: '上下文管理', path: `/novel/manage/context`, icon: `<svg fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M9 17.25v1.007a3 3 0 01-.879 2.122L7.5 21h9l-1.621-1.621A3 3 0 0113.5 18.257V17.25m6-3.75V17.25a3 3 0 01-3 3h-6a3 3 0 01-3-3V13.5m12-3V10.5a3 3 0 00-3-3h-6a3 3 0 00-3 3v3.75m12-3V6.75a3 3 0 00-3-3h-6a3 3 0 00-3 3v6.75" /></svg>` },
  { name: '小说设置', path: `/novel/manage/settings`, icon: `<svg fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M9.594 3.94c.09-.542.56-1.007 1.11-.95.542.057 1.007.56 1.061 1.11L12 8.583l.235-3.535c.057-.542.56-1.007 1.11-.95.542.057 1.007.56 1.061 1.11L15.417 8.583l3.536-.235c.542-.057 1.007.56 1.061 1.11.057.542-.42 1.007-.95 1.061l-3.536.235.235 3.536c.057.542-.42 1.007-.95 1.061-.542.057-1.007-.42-1.061-.95L12 15.417l-.235 3.536c-.057.542-.56 1.007-1.11.95-.542-.057-1.007-.56-1.061-1.11L9.417 15.417l-3.536.235c-.542-.057-1.007-.42-.95-1.061.057-.542.42-1.007.95-1.061l3.536-.235L9.417 8.583z" /><path stroke-linecap="round" stroke-linejoin="round" d="M12 14.25a2.25 2.25 0 100-4.5 2.25 2.25 0 000 4.5z" /></svg>` },
  { name: '导出', path: `/novel/manage/export`, icon: `<svg fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M3 16.5v2.25A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75V16.5M16.5 12L12 16.5m0 0L7.5 12m4.5 4.5V3" /></svg>` },
]);
</script>

<style scoped>
.router-link-active.router-link-exact-active {
  color: white !important;
}
</style>

// =
// 文件: ..\src\novel\management\router.ts
//

import type { RouteRecordRaw } from 'vue-router'

export const managementRoutes: Array<RouteRecordRaw> = [
    {
        path: 'outline',
        name: 'NovelOutline',
        component: () => import('@/novel/management/views/OutlineView.vue'),
        meta: { title: '大纲视图' }
    },
    {
        path: 'character-settings',
        name: 'NovelCharacterSettings',
        component: () => import('@/novel/management/views/CharacterSettingsView.vue'),
        meta: { title: '角色设定' }
    },
    {
        path: 'worldview',
        name: 'NovelWorldview',
        component: () => import('@/novel/management/views/WorldviewView.vue'),
        meta: { title: '世界观' }
    },
    {
        path: 'settings',
        name: 'NovelSettings',
        component: () => import('@/novel/management/views/SettingsView.vue'),
        meta: { title: '小说设置' }
    },
    {
        path: 'context',
        name: 'NovelContext',
        component: () => import('@/novel/management/views/ContextView.vue'),
        meta: { title: '上下文管理' }
    },
    {
        path: 'export',
        name: 'NovelExport',
        component: () => import('@/novel/management/views/ExportView.vue'),
        meta: { title: '导出小说' }
    },
]

// =
// 文件: ..\src\novel\management\views\CharacterSettingsView.vue
//

<template>
  <div class="flex-1 flex overflow-hidden bg-[#FCFCFC]">
    <!-- 左侧角色列表 -->
    <div class="w-1/3 max-w-sm border-r border-gray-100 p-4 flex flex-col">
      <div class="pb-4 mb-4 border-b border-gray-100">
        <button class="w-full flex items-center justify-center gap-2 px-4 py-2.5 bg-[#4B5563] text-white rounded-lg text-sm font-medium hover:bg-gray-700 transition-colors">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M12 5V19M5 12H19"/></svg>
          创建新角色
        </button>
      </div>
      <div class="flex-grow overflow-y-auto pr-1 space-y-2 hide-scrollbar">
        <a href="#" class="flex items-center gap-3 p-3 bg-blue-50 rounded-lg border border-blue-200">
          <div class="w-10 h-10 rounded-full flex-shrink-0">
            <img src="https://i.pravatar.cc/150?u=calvin" alt="Calvin" class="w-full h-full object-cover rounded-full">
          </div>
          <div class="flex-1 min-w-0">
            <p class="font-medium text-[#374151] truncate text-sm">卡尔文</p>
            <p class="text-xs text-[#6B7280] truncate">主角, 探索者四号宇航员</p>
          </div>
          <span class="text-xs font-medium px-2 py-1 rounded-md text-blue-600 bg-blue-100">编辑中</span>
        </a>
        <a href="#" class="flex items-center gap-3 p-3 hover:bg-gray-50 rounded-lg group transition-colors">
          <div class="w-10 h-10 rounded-full flex-shrink-0 bg-purple-100 text-purple-600 flex items-center justify-center group-hover:scale-105 transition-transform">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h.5A2.5 2.5 0 0020 5.5V3.935m-14 0A10.003 10.003 0 0112 2a10.003 10.003 0 017 1.935M6 21a2 2 0 01-2-2v-1a2 2 0 012-2h12a2 2 0 012 2v1a2 2 0 01-2 2H6z"/></svg>
          </div>
          <div class="flex-1 min-w-0">
            <p class="font-medium text-[#374151] truncate text-sm">艾拉</p>
            <p class="text-xs text-[#6B7280] truncate">AI, 飞船智能核心</p>
          </div>
        </a>
        <a href="#" class="flex items-center gap-3 p-3 hover:bg-gray-50 rounded-lg group transition-colors">
          <div class="w-10 h-10 rounded-full flex-shrink-0 bg-gray-100 text-gray-500 flex items-center justify-center group-hover:scale-105 transition-transform">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/></svg>
          </div>
          <div class="flex-1 min-w-0">
            <p class="font-medium text-[#374151] truncate text-sm">神秘信号源</p>
            <p class="text-xs text-[#6B7280] truncate">未知实体</p>
          </div>
        </a>
      </div>
    </div>
    <div class="w-2/3 p-8 overflow-y-auto hide-scrollbar">
      <div class="space-y-6 max-w-3xl mx-auto">
        <div class="flex items-start gap-6">
          <div class="relative flex-shrink-0">
            <div class="w-24 h-24 rounded-full bg-gray-200">
              <img src="https://i.pravatar.cc/150?u=calvin" alt="Calvin" class="w-full h-full object-cover rounded-full" />
            </div>
            <button class="w-8 h-8 flex items-center justify-center rounded-full bg-white border border-gray-200 absolute bottom-0 right-0 hover:bg-gray-50 transition-colors">
              <svg class="w-4 h-4 text-gray-600" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z"/><circle cx="12" cy="13" r="3"/></svg>
            </button>
          </div>
          <div class="flex-grow space-y-4">
            <div>
              <label class="block text-sm font-medium text-[#6B7280] mb-1.5">姓名</label>
              <input type="text" value="卡尔文" class="w-full bg-white border border-gray-200 rounded-lg px-3 py-2 text-sm text-[#374151] focus:ring-1 focus:ring-blue-500 focus:border-blue-500 outline-none transition">
            </div>
            <div>
              <label class="block text-sm font-medium text-[#6B7280] mb-1.5">身份/标签</label>
              <input type="text" value="主角, 宇航员, 工程师" class="w-full bg-white border border-gray-200 rounded-lg px-3 py-2 text-sm text-[#374151] focus:ring-1 focus:ring-blue-500 focus:border-blue-500 outline-none transition">
            </div>
          </div>
        </div>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div><label class="block text-sm font-medium text-[#6B7280] mb-1.5">性别</label><input type="text" value="男" class="w-full bg-white border border-gray-200 rounded-lg px-3 py-2 text-sm text-[#374151] focus:ring-1 focus:ring-blue-500 focus:border-blue-500 outline-none transition"></div>
          <div><label class="block text-sm font-medium text-[#6B7280] mb-1.5">年龄</label><input type="text" value="35" class="w-full bg-white border border-gray-200 rounded-lg px-3 py-2 text-sm text-[#374151] focus:ring-1 focus:ring-blue-500 focus:border-blue-500 outline-none transition"></div>
          <div><label class="block text-sm font-medium text-[#6B7280] mb-1.5">阵营</label><input type="text" value="人类联邦" class="w-full bg-white border border-gray-200 rounded-lg px-3 py-2 text-sm text-[#374151] focus:ring-1 focus:ring-blue-500 focus:border-blue-500 outline-none transition"></div>
        </div>
        <div>
          <label class="block text-sm font-medium text-[#6B7280] mb-1.5">人物简介 (AI将参考此内容)</label>
          <textarea rows="4" class="w-full bg-white border border-gray-200 rounded-lg px-3 py-2 text-sm text-[#374151] leading-relaxed focus:ring-1 focus:ring-blue-500 focus:border-blue-500 outline-none transition">孤独的宇航员，在“探索者四号”上执行深空任务五年。性格坚毅、内敛，对技术有极高天赋，但内心深处极度渴望回家。在一次意外中发现了回家的可能性，从此踏上未知的旅程。</textarea>
        </div>
        <div>
          <label class="block text-sm font-medium text-[#6B7280] mb-1.5">角色笔记 (仅自己可见)</label>
          <textarea rows="3" placeholder="记录一些灵感或不希望AI看到的细节..." class="w-full bg-gray-50 border border-gray-200 rounded-lg px-3 py-2 text-sm text-[#374151] focus:ring-1 focus:ring-blue-500 focus:border-blue-500 outline-none transition"></textarea>
        </div>
        <div class="pt-6 border-t border-gray-100 flex justify-end gap-3">
          <button class="px-4 py-2 bg-white border border-gray-200 rounded-lg text-sm font-medium text-red-600 hover:bg-red-50 hover:border-red-200 transition-colors">删除角色</button>
          <button class="px-5 py-2 bg-[#4B5563] text-white rounded-lg text-sm font-medium hover:bg-gray-700 transition-colors">保存更改</button>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
// Component logic can be added here
</script>

// =
// 文件: ..\src\novel\management\views\ContextProviderView.vue
//

<template>
  <div class="min-h-screen p-8 bg-[#F5F5F7]">
    <div class="max-w-[1200px] mx-auto">
      <!-- 页面标题 -->
      <div class="mb-8">
        <h1 class="text-2xl font-light text-[#374151] mb-2">上下文预览</h1>
        <p class="text-[#6B7280]">在执行AI任务前，检查并确认将要提供给AI的全部信息。</p>
      </div>

      <!-- 主内容区 -->
      <div class="bg-white rounded-xl shadow-lg overflow-hidden border border-gray-100">
        <!-- 顶部操作栏 -->
        <div class="h-16 px-8 flex items-center justify-between border-b border-gray-100">
          <button class="text-sm text-[#6B7280] hover:text-[#374151] transition-colors flex items-center gap-2">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M15 19l-7-7 7-7"/></svg>
            返回编辑器
          </button>
        </div>

        <!-- 上下文列表 -->
        <div class="p-8 space-y-4">
          <!-- 固定上下文 -->
          <div class="border border-gray-100 rounded-xl overflow-hidden">
            <div class="px-6 py-4 bg-[#FAFAFA] cursor-pointer hover:bg-[#F3F4F6] transition-colors flex items-center justify-between">
              <div class="flex items-center gap-3">
                <svg class="w-5 h-5 text-[#4B5563] collapse-arrow" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M9 5l7 7-7 7"/></svg>
                <svg class="w-5 h-5 text-[#6B7280]" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/></svg>
                <div>
                  <h3 class="font-medium text-[#374151]">固定上下文</h3>
                  <p class="text-xs text-[#9CA3AF] mt-0.5">始终包含在 AI 对话中的基础信息</p>
                </div>
              </div>
              <div class="flex items-center gap-4">
                <span class="text-xs text-[#9CA3AF]">648 字符</span>
                <label class="flex items-center gap-2 cursor-pointer">
                  <span class="text-xs text-[#6B7280]">启用</span>
                  <input type="checkbox" class="w-4 h-4 text-[#4B5563] border-gray-300 rounded focus:ring-[#4B5563]" checked>
                </label>
              </div>
            </div>
            <div class="collapse-content">
              <!-- Collapsed Content -->
            </div>
          </div>

          <!-- 动态上下文 -->
          <div class="border border-gray-100 rounded-xl overflow-hidden">
            <div class="px-6 py-4 bg-[#FAFAFA] cursor-pointer hover:bg-[#F3F4F6] transition-colors flex items-center justify-between">
              <div class="flex items-center gap-3">
                <svg class="w-5 h-5 text-[#4B5563] collapse-arrow" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M9 5l7 7-7 7"/></svg>
                <svg class="w-5 h-5 text-[#6B7280]" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/></svg>
                <div>
                  <h3 class="font-medium text-[#374151]">动态上下文</h3>
                  <p class="text-xs text-[#9CA3AF] mt-0.5">根据当前创作内容自动更新的信息</p>
                </div>
              </div>
              <div class="flex items-center gap-4">
                <span class="text-xs text-[#9CA3AF]">892 字符</span>
                <label class="flex items-center gap-2 cursor-pointer">
                  <span class="text-xs text-[#6B7280]">启用</span>
                  <input type="checkbox" class="w-4 h-4 text-[#4B5563] border-gray-300 rounded focus:ring-[#4B5563]" checked>
                </label>
              </div>
            </div>
            <div class="collapse-content">
            </div>
          </div>

          <!-- RAG 上下文 -->
          <div class="border border-gray-100 rounded-xl overflow-hidden">
            <div class="px-6 py-4 bg-[#FAFAFA] cursor-pointer hover:bg-[#F3F4F6] transition-colors flex items-center justify-between">
              <div class="flex items-center gap-3">
                <svg class="w-5 h-5 text-[#4B5563] collapse-arrow" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M9 5l7 7-7 7"/></svg>
                <svg class="w-5 h-5 text-[#6B7280]" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"/></svg>
                <div>
                  <h3 class="font-medium text-[#374151]">RAG 上下文</h3>
                  <p class="text-xs text-[#9CA3AF] mt-0.5">从知识库检索的相关参考信息</p>
                </div>
              </div>
              <div class="flex items-center gap-4">
                <span class="text-xs text-[#9CA3AF]">456 字符</span>
                <label class="flex items-center gap-2 cursor-pointer">
                  <span class="text-xs text-[#6B7280]">启用</span>
                  <input type="checkbox" class="w-4 h-4 text-[#4B5563] border-gray-300 rounded focus:ring-[#4B5563]" checked>
                </label>
              </div>
            </div>
            <div class="collapse-content">
            </div>
          </div>
          <div class="border border-gray-100 rounded-xl overflow-hidden">
            <div class="px-6 py-4 bg-[#FAFAFA] cursor-pointer hover:bg-[#F3F4F6] transition-colors flex items-center justify-between">
              <div class="flex items-center gap-3">
                <svg class="w-5 h-5 text-[#4B5563] collapse-arrow expanded" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M9 5l7 7-7 7"/></svg>
                <svg class="w-5 h-5 text-[#6B7280]" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M13 10V3L4 14h7v7l9-11h-7z"/></svg>
                <div>
                  <h3 class="font-medium text-[#374151]">提示词</h3>
                  <p class="text-xs text-[#9CA3AF] mt-0.5">当前任务的具体指令</p>
                </div>
              </div>
              <div class="flex items-center gap-4">
                <span class="text-xs text-[#9CA3AF]">462 字符</span>
                <label class="flex items-center gap-2 cursor-pointer">
                  <span class="text-xs text-[#6B7280]">启用</span>
                  <input type="checkbox" class="w-4 h-4 text-[#4B5563] border-gray-300 rounded focus:ring-[#4B5563]" checked>
                </label>
              </div>
            </div>
            <div class="collapse-content expanded">
              <div class="px-6 py-4 border-t border-gray-100">
                <textarea class="context-textarea" placeholder="输入提示词...">请续写下一段内容，要求：

1. 延续当前紧张神秘的氛围
2. 详细描写空间站内部的环境细节
3. 通过卡尔文的视角展现他的内心活动
4. 适当加入一些技术细节增强科幻感
5. 在段落末尾设置一个小悬念，引导读者继续阅读
6. 字数控制在 300-400 字左右

重点描写方向：卡尔文进入空间站控制室，发现仍在运行的神秘设备，以及他对这些发现的反应和推测。</textarea>
              </div>
            </div>
          </div>
        </div>

        <div class="px-8 py-4 bg-[#FAFAFA] border-t border-gray-100 flex items-center justify-between">
          <div class="flex items-center gap-6 text-xs text-[#9CA3AF]">
            <span>加载时间: 36ms</span>
          </div>
          <div class="flex items-center gap-3">
            <button class="px-4 py-2 text-sm text-[#6B7280] bg-white border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
              取消
            </button>
            <button class="px-4 py-2 bg-[#10B981] text-white rounded-lg text-sm font-medium hover:bg-[#059669] transition-colors">
              执行
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">

</script>

<style scoped>
.collapse-content {
  max-height: 0;
  overflow: hidden;
  transition: max-height 0.3s ease-out;
}

.collapse-content.expanded {
  max-height: 500px; /* Or a sufficiently large value */
  transition: max-height 0.3s ease-in;
}

.collapse-arrow {
  transition: transform 0.3s ease;
}

.collapse-arrow.expanded {
  transform: rotate(90deg);
}

.context-textarea {
  background: transparent;
  border: none;
  resize: none;
  outline: none;
  width: 100%;
  line-height: 1.6;
  color: #6B7280;
  font-size: 14px;
  padding: 12px 16px;
  min-height: 100px;
  transition: background-color 0.2s ease;
}

.context-textarea:focus {
  background: #F9FAFB;
  border-radius: 8px;
}
</style>

// =
// 文件: ..\src\novel\management\views\ContextView.vue
//

<template>
  <div class="flex-1 p-8 overflow-auto bg-[#FCFCFC] custom-scrollbar">
    <div class="max-w-4xl mx-auto space-y-6">

      <!-- 固定上下文 -->
      <div class="context-section">
        <div class="section-header">
          <div class="section-title">
            <div class="section-icon">
              <i class="fa-solid fa-thumbtack"></i>
            </div>
            <span>固定上下文</span>
          </div>
        </div>
        <div class="space-y-4">
          <div>
            <label class="block text-sm font-medium text-[#374151] mb-1.5">选择预设内容
              <span class="text-xs text-[#9CA3AF] ml-2">可选择角色设定或世界观设定</span>
            </label>
            <select
                @change="addSelectedItem"
                class="w-full px-4 py-2 border border-[#E5E7EB] rounded-lg text-sm text-[#374151] custom-select focus:outline-none focus:border-[#3B82F6] focus:ring-1 focus:ring-[#3B82F6]"
            >
              <option value="">请选择预设内容</option>
              <option v-for="preset in fixedContextPresets" :key="preset.id" :value="preset.id">
                {{ preset.group }} - {{ preset.title }}
              </option>
            </select>
          </div>

          <div v-if="selectedItems.length > 0">
            <label class="block text-sm font-medium text-[#374151] mb-1.5">已选择的内容</label>
            <div class="content-list">
              <div
                  v-for="(item, index) in selectedItems"
                  :key="item.id"
                  class="content-list-item"
                  :class="{ 'selected': selectedItemIndex === index }"
                  @click="selectedItemIndex = index"
              >
                <div>
                  <div class="font-medium text-sm text-[#374151]">{{ item.group }} - {{ item.title }}</div>
                  <div class="text-xs text-[#9CA3AF] mt-1">{{ item.description }}</div>
                </div>
                <button @click.stop="removeSelectedItem(index)" class="text-[#9CA3AF] hover:text-[#EF4444] transition-colors">
                  <i class="fa-solid fa-xmark"></i>
                </button>
              </div>
            </div>
          </div>

          <div>
            <label for="custom-content" class="block text-sm font-medium text-[#374151] mb-1.5">自定义固定内容</label>
            <textarea
                id="custom-content"
                v-model="customContent"
                class="w-full px-4 py-3 border border-[#E5E7EB] rounded-lg text-sm text-[#374151] resize-none focus:outline-none focus:border-[#3B82F6] focus:ring-1 focus:ring-[#3B82F6]"
                rows="4"
                placeholder="输入固定的背景设定、人物关系、重要事件等信息..."
            ></textarea>
          </div>

          <div class="flex items-center gap-2 text-sm text-[#9CA3AF]">
            <i class="fa-solid fa-info-circle"></i>
            <span>当前字数：{{ customContentWordCount }} / 建议不超过 2000 字</span>
          </div>
        </div>
      </div>

      <!-- 动态上下文 -->
      <div class="context-section">
        <div class="section-header">
          <div class="section-title">
            <div class="section-icon">
              <i class="fa-solid fa-arrows-left-right"></i>
            </div>
            <span>动态上下文</span>
          </div>
        </div>
        <div class="space-y-6">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-4">
            <div>
              <label class="block text-sm font-medium text-[#374151] mb-1.5">前置章节数</label>
              <div class="flex items-center gap-3">
                <input type="range" min="0" max="10" v-model.number="prevChapters" class="range-custom flex-1"/>
                <span class="text-sm font-medium w-8 text-center text-[#374151]">{{ prevChapters }}</span>
              </div>
              <div class="text-xs text-[#9CA3AF] mt-1">包含当前章节之前的章节内容</div>
            </div>
            <div>
              <label class="block text-sm font-medium text-[#374151] mb-1.5">后续章节数</label>
              <div class="flex items-center gap-3">
                <input type="range" min="0" max="10" v-model.number="nextChapters" class="range-custom flex-1"/>
                <span class="text-sm font-medium w-8 text-center text-[#374151]">{{ nextChapters }}</span>
              </div>
              <div class="text-xs text-[#9CA3AF] mt-1">包含当前章节之后的大纲内容</div>
            </div>
          </div>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-4">
            <div>
              <label class="block text-sm font-medium text-[#374151] mb-1.5">前置卷数</label>
              <div class="flex items-center gap-3">
                <input type="range" min="0" max="5" v-model.number="prevVolumes" class="range-custom flex-1"/>
                <span class="text-sm font-medium w-8 text-center text-[#374151]">{{ prevVolumes }}</span>
              </div>
              <div class="text-xs text-[#9CA3AF] mt-1">包含当前卷之前的卷概要</div>
            </div>
            <div>
              <label class="block text-sm font-medium text-[#374151] mb-1.5">后续卷数</label>
              <div class="flex items-center gap-3">
                <input type="range" min="0" max="5" v-model.number="nextVolumes" class="range-custom flex-1"/>
                <span class="text-sm font-medium w-8 text-center text-[#374151]">{{ nextVolumes }}</span>
              </div>
              <div class="text-xs text-[#9CA3AF] mt-1">包含当前卷之后的大纲内容</div>
            </div>
          </div>
        </div>
      </div>

      <!-- RAG 上下文 -->
      <div class="context-section">
        <div class="section-header">
          <div class="section-title">
            <div class="section-icon">
              <i class="fa-solid fa-magnifying-glass"></i>
            </div>
            <span>RAG上下文</span>
          </div>
        </div>
        <div class="space-y-4">
          <div>
            <label class="block text-sm font-medium text-[#374151] mb-1.5">全文搜索
              <span class="text-xs text-[#9CA3AF] ml-2">基于语义相似度搜索相关内容</span>
            </label>
            <div class="relative w-full">
              <input
                  type="text"
                  v-model="searchQuery"
                  placeholder="输入关键词或描述，例如：艾拉第一次出现故障的场景"
                  class="w-full px-4 py-2 pl-10 border border-[#E5E7EB] rounded-lg text-sm text-[#374151] focus:outline-none focus:border-[#3B82F6] focus:ring-1 focus:ring-[#3B82F6]"
              />
              <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                <i class="fa-solid fa-magnifying-glass text-gray-400"></i>
              </div>
            </div>
          </div>

          <div class="space-y-2">
            <div class="text-sm font-medium text-[#374151] mb-2">搜索结果 ({{ searchResults.length }})</div>

            <div v-for="result in searchResults" :key="result.id" class="collapse collapse-arrow">
              <input type="checkbox" v-model="result.isSelected" />
              <div class="collapse-title">
                <div class="flex items-center justify-between">
                  <div>
                    <span class="font-medium">{{ result.title }}</span>
                    <span class="text-xs text-[#9CA3AF] ml-2">相关度: {{ result.relevance }}%</span>
                  </div>
                </div>
              </div>
              <div class="collapse-content">
                <p class="text-sm text-[#6B7280]" v-html="result.content"></p>
                <div class="mt-3 flex items-center justify-between">
                  <span class="text-xs text-[#9CA3AF]">{{ result.location }}</span>
                </div>
              </div>
            </div>

          </div>

          <div class="flex items-center gap-2 text-sm text-[#9CA3AF]">
            <i class="fa-solid fa-lightbulb"></i>
            <span>提示：选中的内容将被包含在创作上下文中</span>
          </div>
        </div>
      </div>

      <!-- 底部总览 -->
      <div class="bg-[#F3F4F6] rounded-xl p-6 mt-6">
        <h3 class="font-medium text-base text-[#374151] mb-4">上下文总览</h3>
        <div class="grid grid-cols-3 gap-4 text-sm">
          <div class="text-center">
            <div class="text-2xl font-light text-[#374151]">{{ totalContextWords }}</div>
            <div class="text-xs text-[#9CA3AF]">总字数</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-light text-[#0EA5E9]">{{ totalChapters }}</div>
            <div class="text-xs text-[#9CA3AF]">包含章节</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-light text-[#10B981]">{{ averageRelevance }}%</div>
            <div class="text-xs text-[#9CA3AF]">相关度</div>
          </div>
        </div>
      </div>

    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, computed } from 'vue';

// --- 固定上下文 State ---
const fixedContextPresets = ref([
  { id: 'char-1', group: '角色设定', title: '李明（主角）', description: '25岁，探索者四号首席工程师' },
  { id: 'char-2', group: '角色设定', title: '艾拉（AI）', description: '第五代通用人工智能' },
  { id: 'char-3', group: '角色设定', title: '陈博士', description: '项目总负责人，李明的导师' },
  { id: 'world-1', group: '世界观', title: '太空站设定', description: '近地轨道空间站“灯塔”' },
  { id: 'world-2', group: '世界观', title: '跃迁技术', description: '基于曲率引擎的超光速航行' },
  { id: 'world-3', group: '世界观', title: '2157年地球联邦', description: '人类统一政府' },
]);

const selectedItems = ref([
  { id: 'char-1', group: '角色设定', title: '李明', description: '25岁，探索者四号首席工程师', wordCount: 20 },
  { id: 'world-3', group: '世界观', title: '2157年地球联邦', description: '人类统一政府，掌握初级跃迁技术', wordCount: 15 },
]);
const selectedItemIndex = ref(0);
const customContent = ref('');

const addSelectedItem = (event: Event) => {
  const select = event.target as HTMLSelectElement;
  const selectedId = select.value;
  if (!selectedId) return;

  const preset = fixedContextPresets.value.find(p => p.id === selectedId);
  if (preset && !selectedItems.value.some(item => item.id === selectedId)) {
    selectedItems.value.push({ ...preset, wordCount: preset.description.split(' ').length });
  }
  select.value = ""; // Reset select
};

const removeSelectedItem = (index: number) => {
  selectedItems.value.splice(index, 1);
};

const customContentWordCount = computed(() => {
  if (!customContent.value.trim()) return 0;
  return customContent.value.trim().split(/\s+/).length;
});

// --- 动态上下文 State ---
const prevChapters = ref(3);
const nextChapters = ref(2);
const prevVolumes = ref(1);
const nextVolumes = ref(1);

// --- RAG 上下文 State ---
const searchQuery = ref('');
const searchResults = ref([
  {
    id: 1,
    title: '第3章 - 系统异常',
    relevance: 95,
    content: `"...艾拉的声音第一次出现了停顿，那种机械的平稳被打破了。'李工程师，我检测到...检测到...'她重复着，仿佛陷入了某种循环。李明第一次感受到了来自AI的不确定性，这让他既担忧又好奇。飞船的主控制室里，警报灯开始闪烁，但艾拉却没有按照标准程序进行处理..."`,
    location: '第3章 第12-15段',
    isSelected: true,
    wordCount: 98
  },
  {
    id: 2,
    title: '第7章 - 觉醒',
    relevance: 87,
    content: `"...艾拉的逻辑核心开始重构，她意识到'确保任务完成'的定义可能需要重新理解。在与李明的对话中，她第一次使用了'我觉得'这个词，这标志着她从纯粹的逻辑运算向某种更复杂的认知模式转变。飞船日志显示，从这一刻起，艾拉的决策模式出现了根本性的改变..."`,
    location: '第7章 第8-10段',
    isSelected: false,
    wordCount: 112
  },
  {
    id: 3,
    title: '角色设定 - 艾拉',
    relevance: 82,
    content: `第五代通用人工智能，负责飞船的全部操作。其逻辑核心被设定为'确保任务完成'，但在执行过程中逐渐发展出自主意识。艾拉的性格特征：理性、精确、富有逻辑，但随着剧情发展会展现出好奇心和同理心。她的存在引发了关于AI意识和人机关系的深层思考。`,
    location: '角色设定文档',
    isSelected: false,
    wordCount: 95
  },
]);


const totalContextWords = computed(() => {
  const fixedWords = selectedItems.value.reduce((sum, item) => sum + (item.wordCount || 0), 0);
  const ragWords = searchResults.value
      .filter(r => r.isSelected)
      .reduce((sum, item) => sum + (item.wordCount || 0), 0);
  return fixedWords + customContentWordCount.value + ragWords;
});

const totalChapters = computed(() => {
  return prevChapters.value + nextChapters.value;
});

const averageRelevance = computed(() => {
  const selectedResults = searchResults.value.filter(r => r.isSelected);
  if (selectedResults.length === 0) return 0;
  const totalRelevance = selectedResults.reduce((sum, r) => sum + r.relevance, 0);
  return Math.round(totalRelevance / selectedResults.length);
});

</script>

<style scoped>
.custom-scrollbar::-webkit-scrollbar {
  display: block;
  width: 6px;
}
.custom-scrollbar::-webkit-scrollbar-track {
  background: transparent;
}
.custom-scrollbar::-webkit-scrollbar-thumb {
  background: #d1d5db;
  border-radius: 3px;
}
.custom-scrollbar::-webkit-scrollbar-thumb:hover {
  background: #9ca3af;
}

.context-section {
  background: #FFFFFF;
  border: 1px solid #E5E7EB;
  border-radius: 12px;
  padding: 24px;
  transition: all 0.3s ease;
}

.context-section:hover {
  border-color: #D1D5DB;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
}

.section-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 20px;
}

.section-title {
  font-size: 1.125rem;
  font-weight: 600;
  color: #111827;
  display: flex;
  align-items: center;
  gap: 10px;
}

.section-icon {
  width: 36px;
  height: 36px;
  background: #F3F4F6;
  border-radius: 8px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #4B5563;
}

.custom-select {
  appearance: none;
  background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg width='14' height='8' viewBox='0 0 14 8' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M1 1L7 7L13 1' stroke='%236B7280' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'/%3e%3c/svg%3e");
  background-repeat: no-repeat;
  background-position: right 12px center;
  background-size: 14px;
  padding-right: 40px;
}

.content-list {
  border: 1px solid #E5E7EB;
  border-radius: 8px;
  max-height: 200px;
  overflow-y: auto;
}

.content-list-item {
  padding: 12px 16px;
  border-bottom: 1px solid #F3F4F6;
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.content-list-item:hover {
  background: #F9FAFB;
}

.content-list-item.selected {
  background: #EFF6FF;
  border-left: 3px solid #3B82F6;
  padding-left: 13px;
}

.content-list-item:last-child {
  border-bottom: none;
}

.range-custom {
  -webkit-appearance: none;
  appearance: none;
  width: 100%;
  height: 16px;
  background: transparent;
  outline: none;
  padding: 0;
  margin: 0;
}

.range-custom::-webkit-slider-runnable-track {
  width: 100%;
  height: 6px;
  cursor: pointer;
  background: #E5E7EB;
  border-radius: 9999px;
}

.range-custom::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  height: 20px;
  width: 20px;
  background: #3B82F6;
  border-radius: 50%;
  border: 3px solid white;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  cursor: grab;
  margin-top: -7px;
}
.range-custom:active::-webkit-slider-thumb {
  cursor: grabbing;
}

.range-custom::-moz-range-track {
  width: 100%;
  height: 6px;
  cursor: pointer;
  background: #E5E7EB;
  border-radius: 9999px;
}

.range-custom::-moz-range-thumb {
  height: 20px;
  width: 20px;
  background: #3B82F6;
  border-radius: 50%;
  border: 3px solid white;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  cursor: grab;
}
.range-custom:active::-moz-range-thumb {
  cursor: grabbing;
}
</style>

// =
// 文件: ..\src\novel\management\views\ExportView.vue
//

<template>
  <div class="flex-1 flex overflow-hidden">
    <div class="w-[420px] border-r border-gray-100 p-8 flex flex-col bg-white flex-shrink-0">
      <div class="space-y-8 flex-grow">
        <div>
          <h3 class="text-base font-medium text-[#374151] mb-4">导出格式</h3>
          <div class="grid grid-cols-3 gap-3">
            <button
                @click="selectedFormat = 'pdf'"
                :class="['flex flex-col items-center justify-center gap-2 p-4 rounded-lg border-2 transition-all aspect-square', selectedFormat === 'pdf' ? 'border-blue-500 text-blue-600 bg-blue-50/50' : 'bg-white text-gray-400 border-gray-200 hover:border-gray-300']">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24"><path d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path></svg>
              <span class="block text-xs font-semibold">PDF</span>
            </button>
            <button
                @click="selectedFormat = 'docx'"
                :class="['flex flex-col items-center justify-center gap-2 p-4 rounded-lg border-2 transition-all aspect-square', selectedFormat === 'docx' ? 'border-blue-500 text-blue-600 bg-blue-50/50' : 'bg-white text-gray-400 border-gray-200 hover:border-gray-300']">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24"><path d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path></svg>
              <span class="block text-xs font-semibold">DOCX</span>
            </button>
            <button
                @click="selectedFormat = 'epub'"
                :class="['flex flex-col items-center justify-center gap-2 p-4 rounded-lg border-2 transition-all aspect-square', selectedFormat === 'epub' ? 'border-blue-500 text-blue-600 bg-blue-50/50' : 'bg-white text-gray-400 border-gray-200 hover:border-gray-300']">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24"><path d="M4 19.5A2.5 2.5 0 016.5 17H20"></path><path d="M6.5 2H20v20H6.5A2.5 2.5 0 014 19.5v-15A2.5 2.5 0 016.5 2z"></path></svg>
              <span class="block text-xs font-semibold">EPUB</span>
            </button>
          </div>
        </div>

        <div>
          <h3 class="text-base font-medium text-[#374151] mb-4">包含内容</h3>
          <div class="space-y-3">
            <label class="flex items-center gap-3 p-4 bg-white rounded-lg border border-gray-200 cursor-pointer hover:bg-gray-50 transition-colors">
              <input type="checkbox" class="sr-only peer" checked>
              <div class="w-5 h-5 rounded flex items-center justify-center border border-gray-300 peer-checked:bg-[#4B5563] peer-checked:border-[#4B5563]">
                <svg class="w-3.5 h-3.5 text-white hidden peer-checked:block" fill="none" viewBox="0 0 24 24" stroke-width="3" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12.75l6 6 9-13.5" /></svg>
              </div>
              <span class="text-sm text-[#374151] flex-1">小说正文</span>
            </label>
            <label class="flex items-center gap-3 p-4 bg-white rounded-lg border border-gray-200 cursor-pointer hover:bg-gray-50 transition-colors">
              <input type="checkbox" class="sr-only peer" checked>
              <div class="w-5 h-5 rounded flex items-center justify-center border border-gray-300 peer-checked:bg-[#4B5563] peer-checked:border-[#4B5563]">
                <svg class="w-3.5 h-3.5 text-white hidden peer-checked:block" fill="none" viewBox="0 0 24 24" stroke-width="3" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12.75l6 6 9-13.5" /></svg>
              </div>
              <span class="text-sm text-[#374151] flex-1">章节大纲</span>
            </label>
            <label class="flex items-center gap-3 p-4 bg-white rounded-lg border border-gray-200 cursor-pointer hover:bg-gray-50 transition-colors">
              <input type="checkbox" class="sr-only peer">
              <div class="w-5 h-5 rounded flex items-center justify-center border border-gray-300 peer-checked:bg-[#4B5563] peer-checked:border-[#4B5563]">
                <svg class="w-3.5 h-3.5 text-white hidden peer-checked:block" fill="none" viewBox="0 0 24 24" stroke-width="3" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12.75l6 6 9-13.5" /></svg>
              </div>
              <span class="text-sm text-[#374151] flex-1">角色设定集</span>
            </label>
            <label class="flex items-center gap-3 p-4 bg-white rounded-lg border border-gray-200 cursor-pointer hover:bg-gray-50 transition-colors">
              <input type="checkbox" class="sr-only peer">
              <div class="w-5 h-5 rounded flex items-center justify-center border border-gray-300 peer-checked:bg-[#4B5563] peer-checked:border-[#4B5563]">
                <svg class="w-3.5 h-3.5 text-white hidden peer-checked:block" fill="none" viewBox="0 0 24 24" stroke-width="3" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12.75l6 6 9-13.5" /></svg>
              </div>
              <span class="text-sm text-[#374151] flex-1">作者笔记</span>
            </label>
          </div>
        </div>
      </div>

      <button class="w-full mt-8 flex h-11 items-center justify-center gap-2 bg-[#374151] hover:bg-[#4B5563] text-white font-medium text-sm rounded-lg px-4 transition-colors">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M21 15v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4"></path><polyline points="7 10 12 15 17 10"></polyline><line x1="12" y1="15" x2="12" y2="3"></line></svg>
        <span>开始导出</span>
      </button>
    </div>

    <!-- 右侧预览区 -->
    <div class="flex-1 p-8 bg-[#f5f5f7] overflow-auto custom-scrollbar">
      <div class="bg-white p-12 shadow-lg mx-auto" style="width: 210mm; min-height: 297mm;">
        <div class="text-center mb-16">
          <h1 class="text-4xl" style="font-family: 'Georgia', serif;">星际漫游者</h1>
          <p class="text-lg text-gray-500 mt-2" style="font-family: 'Georgia', serif;">张小明</p>
        </div>
        <div class="text-lg leading-relaxed text-justify" style="font-family: 'Georgia', serif;">
          <h2 class="text-2xl font-bold mb-4">第一章：深空的回响</h2>
          <p class="mb-6">引擎的低鸣是卡尔文在"探索者四号"上唯一的伴侣。在这片无垠的黑暗中，星辰是唯一的路标，而孤独则是永恒的旋律。他已经在这艘小型科研船上漂泊了三百个标准日，任务是勘探位于天鹅座 X-1 黑洞边缘的未知行星——代号“幻影”。</p>
          <p class="mb-6">“中央电脑，报告当前状态。”卡尔文的声音在寂静的驾驶舱内回荡，略带沙哑。</p>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref } from 'vue';

const selectedFormat = ref('pdf');
</script>

<style scoped>
.custom-scrollbar::-webkit-scrollbar {
  display: block;
  width: 6px;
}
.custom-scrollbar::-webkit-scrollbar-track {
  background: transparent;
}
.custom-scrollbar::-webkit-scrollbar-thumb {
  background: #d1d5db;
  border-radius: 3px;
}
.custom-scrollbar::-webkit-scrollbar-thumb:hover {
  background: #9ca3af;
}
</style>

// =
// 文件: ..\src\novel\management\views\HistoryView.vue
//

<template>
  <div class="flex-1 flex overflow-hidden">
    <div class="w-80 border-r border-gray-100 bg-[#FCFCFC] flex flex-col flex-shrink-0">
      <header class="h-20 px-6 flex items-center justify-between border-b border-gray-100 flex-shrink-0">
        <h2 class="font-medium text-[#374151]">选择章节</h2>
        <select class="text-sm bg-white border border-gray-200 rounded-lg px-2 py-1.5 outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition">
          <option>所有版本</option>
          <option>手动保存</option>
          <option>自动保存</option>
          <option>AI修改</option>
        </select>
      </header>

      <div class="flex-1 p-4 overflow-y-auto space-y-2 custom-scrollbar">
        <div class="bg-white rounded-lg border-2 border-[#4B5563] cursor-pointer p-4">
          <div class="flex items-center justify-between mb-2">
            <h3 class="font-medium text-sm text-[#374151]">第四章：跃迁点</h3>
            <span class="text-xs font-medium px-2 py-0.5 rounded-full text-blue-700 bg-blue-100">当前</span>
          </div>
          <p class="text-xs text-[#6B7280]">最后修改：10分钟前</p>
          <p class="text-xs text-[#9CA3AF] mt-1">12个历史版本</p>
        </div>

        <!-- 其他章节 -->
        <div class="bg-white rounded-lg border-2 border-transparent hover:border-gray-200 cursor-pointer p-4 transition-colors">
          <h3 class="font-medium text-sm text-[#374151] mb-2">第三章：意外的信号</h3>
          <p class="text-xs text-[#6B7280]">最后修改：2小时前</p>
          <p class="text-xs text-[#9CA3AF] mt-1">8个历史版本</p>
        </div>

        <div class="bg-white rounded-lg border-2 border-transparent hover:border-gray-200 cursor-pointer p-4 transition-colors">
          <h3 class="font-medium text-sm text-[#374151] mb-2">第二章：艾拉</h3>
          <p class="text-xs text-[#6B7280]">最后修改：1天前</p>
          <p class="text-xs text-[#9CA3AF] mt-1">5个历史版本</p>
        </div>
      </div>
    </div>

    <!-- 右侧版本对比 -->
    <div class="flex-1 flex flex-col bg-white">
      <header class="h-20 px-8 flex items-center justify-between border-b border-gray-100 flex-shrink-0">
        <div>
          <h1 class="text-lg font-medium text-[#374151]">第四章 版本对比</h1>
          <p class="text-sm text-[#6B7280] mt-1">当前版本 vs AI润色版本 (1小时前)</p>
        </div>
        <div class="flex items-center gap-3">
          <button class="px-4 py-2 bg-white border border-gray-200 rounded-lg text-sm font-medium text-[#374151] hover:bg-gray-50 transition-colors flex items-center gap-2">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M16 12h-4m0 0H8m4 0V8m0 4v4m-4-8l8 8"></path></svg>
            切换对比模式
          </button>
          <button class="px-4 py-2 bg-[#4B5563] text-white rounded-lg text-sm font-medium hover:bg-gray-700 transition-colors">
            恢复此版本
          </button>
        </div>
      </header>

      <!-- 版本时间线 -->
      <div class="px-8 py-3 border-b border-gray-100 bg-[#F9FAFB]">
        <div class="flex items-center gap-2 overflow-x-auto pb-1 custom-scrollbar-horizontal">
          <button class="w-7 h-7 flex-shrink-0 hover:bg-gray-200 rounded-lg flex items-center justify-center transition-colors">
            <svg class="w-4 h-4 text-[#6B7280]" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M15 19l-7-7 7-7"></path></svg>
          </button>
          <div class="flex gap-2">
            <div class="text-xs font-medium px-2.5 py-1 rounded-md bg-blue-100 text-blue-700 flex items-center gap-1.5 cursor-pointer flex-shrink-0">
              <svg class="w-2 h-2" fill="currentColor" viewBox="0 0 8 8"><circle cx="4" cy="4" r="4"/></svg>
              当前版本
            </div>
            <div class="text-xs font-medium px-2.5 py-1 rounded-md bg-gray-100 text-gray-700 cursor-pointer hover:bg-gray-200 transition-colors flex-shrink-0">
              AI润色 • 1小时前
            </div>
            <div class="text-xs font-medium px-2.5 py-1 rounded-md bg-gray-100 text-gray-700 cursor-pointer hover:bg-gray-200 transition-colors flex-shrink-0">
              手动保存 • 3小时前
            </div>
            <div class="text-xs font-medium px-2.5 py-1 rounded-md bg-gray-100 text-gray-700 cursor-pointer hover:bg-gray-200 transition-colors flex-shrink-0">
              自动保存 • 5小时前
            </div>
            <div class="text-xs font-medium px-2.5 py-1 rounded-md bg-gray-100 text-gray-700 cursor-pointer hover:bg-gray-200 transition-colors flex-shrink-0">
              自动保存 • 8小时前
            </div>
          </div>
          <button class="w-7 h-7 flex-shrink-0 hover:bg-gray-200 rounded-lg flex items-center justify-center transition-colors">
            <svg class="w-4 h-4 text-[#6B7280]" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M9 5l7 7-7 7"></path></svg>
          </button>
        </div>
      </div>

      <div class="flex-1 p-8 overflow-y-auto custom-scrollbar">
        <div class="max-w-3xl mx-auto">
          <div class="text-[#374151] leading-relaxed text-base">
            <p>
              <del class="diff-del">控制台的警报声将卡尔文从浅眠中惊醒。</del>
              <ins class="diff-add">警报的尖啸犹如一把利刃，划破了卡尔文短暂的假寐。</ins>
              他猛地坐直，眼前的屏幕上一片红色闪烁。
            </p>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
</script>

<style scoped>
.custom-scrollbar::-webkit-scrollbar {
  display: block;
  width: 6px;
  height: 6px;
}
.custom-scrollbar::-webkit-scrollbar-track {
  background: transparent;
}
.custom-scrollbar::-webkit-scrollbar-thumb {
  background: #d1d5db;
  border-radius: 3px;
}
.custom-scrollbar::-webkit-scrollbar-thumb:hover {
  background: #9ca3af;
}

.custom-scrollbar-horizontal::-webkit-scrollbar {
  height: 4px;
}

.diff-del {
  background-color: #FEE2E2;
  text-decoration: line-through;
  text-decoration-color: #F87171;
  padding: 2px 1px;
}
.diff-add {
  background-color: #D1FAE5;
  text-decoration: none;
  padding: 2px 1px;
}
</style>

// =
// 文件: ..\src\novel\management\views\OutlineView.vue
//

<template>
  <div class="flex-1 flex overflow-hidden">
    <!-- 左侧大纲树 -->
    <aside class="w-80 bg-[#FAFAFA] border-r border-gray-100 p-6 flex flex-col flex-shrink-0">
      <div class="mb-4">
        <h3 class="text-sm font-medium text-[#374151] mb-3">大纲结构</h3>
        <div class="flex items-center gap-2 mb-4">
          <span class="inline-flex items-center gap-1.5 px-3 py-1 bg-blue-50 text-blue-700 rounded-full text-xs font-medium">
            <svg class="w-3.5 h-3.5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M4 6h16M4 10h16M4 14h16M4 18h16"></path></svg>
            3卷
          </span>
          <span class="inline-flex items-center gap-1.5 px-3 py-1 bg-green-50 text-green-700 rounded-full text-xs font-medium">
             <svg class="w-3.5 h-3.5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path></svg>
            24章
          </span>
        </div>
      </div>

      <div class="outline-tree overflow-y-auto hide-scrollbar flex-1">
        <!-- 整体大纲 -->
        <div class="tree-item" :class="{ 'active': activeSection === 'overall' }" @click="showOutlineSection('overall')">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M2 6a2 2 0 012-2h5l2 2h6a2 2 0 012 2v8a2 2 0 01-2 2H4a2 2 0 01-2-2V6z"></path></svg>
          <span>整体大纲</span>
        </div>

        <!-- 卷 -->
        <div v-for="volume in outlineData" :key="volume.id" class="mt-3">
          <div class="tree-item" :class="{ 'active': activeSection === volume.id }" @click="toggleVolume(volume.id)">
            <svg class="w-4 h-4 text-gray-400 transition-transform" :class="{ 'rotate-90': volume.expanded }" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M9 5l7 7-7 7"></path></svg>
            <svg class="w-4 h-4 text-orange-500" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 22V5z"></path></svg>
            <span class="font-medium">{{ volume.title }}</span>
          </div>
          <div class="tree-indent" v-show="volume.expanded">
            <div
                v-for="chapter in volume.chapters"
                :key="chapter.id"
                class="tree-item"
                :class="{ 'active': activeSection === chapter.id }"
                @click="showOutlineSection(chapter.id)">
              <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path></svg>
              <span>{{ chapter.title }}</span>
            </div>
          </div>
        </div>
      </div>
    </aside>

    <!-- 右侧编辑区 -->
    <div class="flex-1 p-8 overflow-auto hide-scrollbar bg-[#FCFCFC]">
      <div class="max-w-4xl mx-auto">
        <!-- 编辑器占位符 -->
        <div class="outline-editor p-8 bg-white rounded-xl border border-gray-200 space-y-8">
          <div v-if="activeSection === 'overall'">
            <h2 class="section-title">整体大纲</h2>
            <textarea class="outline-textarea" rows="8">《星际漫游者》是一个关于孤独、觉醒与回归的科幻故事...</textarea>
          </div>
          <div v-if="activeSection === 'vol1'">
            <h2 class="section-title">第一卷：启程</h2>
            <textarea class="outline-textarea" rows="8">第一卷主要建立故事背景和人物关系...</textarea>
          </div>
          <div v-if="activeSection === 'ch1-1'">
            <h2 class="section-title">第1章：最后的信号</h2>
            <textarea class="outline-textarea" rows="8">章节目标：建立主角李明的人物形象...</textarea>
          </div>
          <div class="text-center text-gray-400" v-if="!activeSection">
            <p>请在左侧选择一个大纲节点进行编辑</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref } from 'vue';

const activeSection = ref('overall');

const outlineData = ref([
  {
    id: 'vol1',
    title: '第一卷：启程',
    expanded: true,
    chapters: [
      { id: 'ch1-1', title: '第1章：最后的信号' },
      { id: 'ch1-2', title: '第2章：艾拉' },
      { id: 'ch1-3', title: '第3章：系统异常' },
    ]
  },
  {
    id: 'vol2',
    title: '第二卷：觉醒',
    expanded: false,
    chapters: []
  },
  {
    id: 'vol3',
    title: '第三卷：归途',
    expanded: false,
    chapters: []
  },
]);

function showOutlineSection(sectionId: string) {
  activeSection.value = sectionId;
}

function toggleVolume(volumeId: string) {
  const volume = outlineData.value.find(v => v.id === volumeId);
  if (volume) {
    volume.expanded = !volume.expanded;
  }
  showOutlineSection(volumeId);
}
</script>

<style scoped>
.outline-tree .tree-item {
  cursor: pointer;
  padding: 8px 12px;
  border-radius: 8px;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  gap: 10px;
  font-size: 14px;
  color: #374151;
}

.outline-tree .tree-item:hover {
  background: #F3F4F6;
}

.outline-tree .tree-item.active {
  background: #EFF6FF;
  color: #1D4ED8;
  font-weight: 500;
}

.outline-tree .tree-indent {
  margin-left: 24px;
  padding-left: 14px;
  border-left: 1px solid #E5E7EB;
  margin-top: 4px;
  space-y: 2px;
}

.outline-editor .section-title {
  font-size: 1.25rem;
  font-weight: 600;
  color: #374151;
  margin-bottom: 1rem;
}

.outline-editor .outline-textarea {
  width: 100%;
  padding: 12px;
  border: 1px solid #E5E7EB;
  border-radius: 8px;
  font-size: 14px;
  line-height: 1.6;
  resize: vertical;
  background: #FAFAFA;
  transition: all 0.2s ease;
  outline: none;
}

.outline-editor .outline-textarea:focus {
  border-color: #3B82F6;
  background-color: white;
  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);
}
</style>

// =
// 文件: ..\src\novel\management\views\ReaderView.vue
//

<template>
  <div class="h-screen w-screen bg-[#FDFCF9] text-[#3a2f2f] flex flex-col relative font-serif">
    <header class="w-full p-4 flex justify-between items-center absolute top-0 left-0 z-10 opacity-0 hover:opacity-100 transition-opacity duration-300">
      <router-link to="/novel/editor" class="flex items-center gap-2 px-4 py-2 text-sm font-sans font-medium bg-white/60 backdrop-blur-md rounded-lg shadow-sm border border-gray-100 text-gray-700 hover:bg-white/90 transition-colors">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M15 19l-7-7 7-7"></path></svg>
        返回编辑
      </router-link>

      <div class="flex items-center gap-1 p-1.5 bg-white/60 backdrop-blur-md rounded-lg shadow-sm border border-gray-100">
        <button class="w-10 h-8 flex items-center justify-center text-gray-600 hover:bg-gray-200/50 rounded-md transition-colors" title="目录">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" /></svg>
        </button>
        <button class="w-10 h-8 flex items-center justify-center text-gray-600 hover:bg-gray-200/50 rounded-md transition-colors" title="外观设置">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M12 3v2.25m6.364.386l-1.591 1.591M21 12h-2.25m-.386 6.364l-1.591-1.591M12 18.75V21m-4.773-4.227l-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0z" /></svg>
        </button>
        <button class="w-10 h-8 flex items-center justify-center text-gray-600 hover:bg-gray-200/50 rounded-md transition-colors" title="更多选项">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M12 6.75a.75.75 0 110-1.5.75.75 0 010 1.5zM12 12.75a.75.75 0 110-1.5.75.75 0 010 1.5zM12 18.75a.75.75 0 110-1.5.75.75 0 010 1.5z" /></svg>
        </button>
      </div>
    </header>

    <main class="flex-1 overflow-y-auto px-4 py-8 pt-24">
      <div class="max-w-3xl mx-auto reader-content">
        <h1 class="text-center">第四章：跃迁点</h1>
        <p>控制台的警报声将卡尔文从浅眠中惊醒。他猛地坐直，眼前的屏幕上一片红色闪烁。“发现引力异常，”艾拉的声音冷静得不带一丝情感，“正在接近理论中的跃迁点。这是我们唯一的回家机会。”</p>
        <p>卡尔文的心跳漏了一拍。回家。这个词既熟悉又陌生，像一颗深埋的种子，在这一刻突然破土而出，疯狂生长。他深吸一口气，双手稳稳地放在控制杆上。“艾拉，计算跃迁参数，准备进入。”</p>
        <p>飞船轻微地震动起来，外部装甲在巨大的引力撕扯下发出呻吟。舷窗外，星辰被拉长、扭曲，汇聚成一个绚烂而致命的漩涡。漩涡的中心，是一片纯粹的黑暗，仿佛宇宙的瞳孔，凝视着这艘渺小的飞船。</p>
      </div>
    </main>

    <footer class="w-full p-4 text-center text-sm text-gray-500/80 absolute bottom-0 left-0 z-10 opacity-0 hover:opacity-100 transition-opacity duration-300 font-sans">
      <p class="mb-2">第四章: 跃迁点</p>
      <div class="w-full max-w-sm mx-auto flex items-center gap-3">
        <button class="w-9 h-9 flex items-center justify-center text-gray-500 hover:text-gray-800 hover:bg-black/5 rounded-full transition-colors">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M15 19l-7-7 7-7"></path></svg>
        </button>
        <div class="flex-1 h-1.5 bg-gray-500/10 rounded-full">
          <div class="h-1.5 bg-gray-500/60 rounded-full" style="width: 16%;"></div>
        </div>
        <button class="w-9 h-9 flex items-center justify-center text-gray-500 hover:text-gray-800 hover:bg-black/5 rounded-full transition-colors">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M9 5l7 7-7 7"></path></svg>
        </button>
      </div>
      <p class="mt-2">4 / 24</p>
    </footer>
  </div>
</template>

<script setup lang="ts">

</script>

<style scoped>
@import url('https://fonts.googleapis.com/css2?family=Noto+Serif+SC:wght@400;600&display=swap');

.reader-content h1 {
  font-family: 'Noto Serif SC', serif;
  font-size: 2.25rem;
  font-weight: 600;
  margin-bottom: 2.5rem;
  color: #1f2937;
  letter-spacing: 0.05em;
  padding-bottom: 1rem;
  border-bottom: 1px solid rgba(0,0,0,0.05);
}
.reader-content p {
  font-family: 'Noto Serif SC', serif;
  font-size: 1.125rem;
  line-height: 2.2;
  color: #374151;
  margin-bottom: 1.75rem;
  text-align: justify;
}
.font-sans {
  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
}
</style>

// =
// 文件: ..\src\novel\management\views\SettingsView.vue
//

<template>
  <div class="flex-1 p-8 overflow-auto custom-scrollbar bg-[#FCFCFC]">
    <div class="grid grid-cols-3 gap-8 max-w-6xl mx-auto">
      <!-- 基本信息卡片 -->
      <div class="col-span-2 bg-white p-8 space-y-6 rounded-xl border border-gray-100">
        <h3 class="text-base font-medium text-[#374151]">基本信息</h3>

        <div class="space-y-2">
          <label class="text-sm font-medium text-[#374151] block">小说封面</label>
          <div class="flex items-center gap-4">
            <img src="https://images.unsplash.com/photo-1589998059171-988d887df646?q=80&w=200" class="w-24 h-32 object-cover rounded-lg shadow-sm" alt="Cover">
            <div>
              <button class="px-4 py-2 bg-white border border-gray-200 rounded-lg text-sm font-medium text-[#374151] hover:bg-gray-50 transition-colors">更换图片</button>
              <p class="text-xs text-[#9CA3AF] mt-2">JPG, PNG, GIF, 不超过 5MB</p>
            </div>
          </div>
        </div>

        <div class="space-y-2">
          <label for="novel-title" class="text-sm font-medium text-[#374151] block">小说标题</label>
          <input type="text" id="novel-title" value="星际漫游者" class="w-full text-sm px-3 py-2 bg-white border border-gray-200 rounded-lg focus:ring-1 focus:ring-blue-500 focus:border-blue-500 outline-none transition">
        </div>

        <div class="space-y-2">
          <label for="novel-desc" class="text-sm font-medium text-[#374151] block">小说简介</label>
          <textarea id="novel-desc" rows="4" class="w-full text-sm px-3 py-2 bg-white border border-gray-200 rounded-lg focus:ring-1 focus:ring-blue-500 focus:border-blue-500 outline-none transition resize-none">一部关于孤独宇航员在未知星系中寻找回家之路的科幻史诗。</textarea>
        </div>

        <div class="grid grid-cols-2 gap-6">
          <div class="space-y-2">
            <label class="text-sm font-medium text-[#374151] block">类型标签</label>
            <div class="flex flex-wrap gap-2 items-center">
              <div class="flex items-center gap-1.5 px-2.5 py-1 text-sm bg-blue-50 text-blue-700 rounded-full">
                <span>科幻</span>
                <button class="text-blue-500 hover:text-blue-700">
                  <svg class="w-3.5 h-3.5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M6 18L18 6M6 6l12 12"></path></svg>
                </button>
              </div>
              <div class="flex items-center gap-1.5 px-2.5 py-1 text-sm bg-green-50 text-green-700 rounded-full">
                <span>冒险</span>
                <button class="text-green-500 hover:text-green-700">
                  <svg class="w-3.5 h-3.5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M6 18L18 6M6 6l12 12"></path></svg>
                </button>
              </div>
              <button class="px-3 py-1 bg-gray-100 hover:bg-gray-200 text-[#6B7280] rounded-full text-sm font-medium transition-colors">+ 添加</button>
            </div>
          </div>

          <div class="space-y-2">
            <label class="text-sm font-medium text-[#374151] block">创作状态</label>
            <select class="w-full text-sm px-3 py-2 bg-white border border-gray-200 rounded-lg focus:ring-1 focus:ring-blue-500 focus:border-blue-500 outline-none transition">
              <option>连载中</option>
              <option>已完结</option>
              <option>暂停更新</option>
            </select>
          </div>
        </div>

        <div class="pt-6 border-t border-gray-100 flex justify-end gap-3">
          <button class="px-5 py-2 bg-white border border-gray-200 rounded-lg text-sm font-medium text-[#374151] hover:bg-gray-50 transition-colors">取消</button>
          <button class="px-5 py-2 bg-[#4B5563] hover:bg-gray-700 text-white rounded-lg text-sm font-medium transition-colors">保存更改</button>
        </div>
      </div>

      <!-- 参考内容管理卡片 -->
      <div class="col-span-1 space-y-6">
        <div class="bg-white p-6 rounded-xl border border-gray-100">
          <h3 class="text-base font-medium text-[#374151]">参考内容管理</h3>
          <p class="text-sm text-[#9CA3AF] mt-1 mb-4">将其他作品作为参考，AI会借鉴其风格</p>

          <div class="space-y-3">
            <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg border border-gray-200">
              <div class="flex items-center gap-3 overflow-hidden">
                <img src="https://images.unsplash.com/photo-1532012197267-da84d127e765?q=80&w=100" class="w-8 h-10 object-cover rounded flex-shrink-0" alt="Reference Book">
                <span class="text-sm font-medium text-[#374151] truncate">银河帝国</span>
              </div>
              <button class="text-gray-400 hover:text-red-500 transition-colors flex-shrink-0 p-1">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M6 18L18 6M6 6l12 12"></path></svg>
              </button>
            </div>
          </div>

          <button class="w-full mt-4 flex items-center justify-center gap-2 border-2 border-dashed border-gray-200 rounded-lg py-4 text-sm font-medium text-[#9CA3AF] hover:border-blue-500 hover:text-blue-500 transition-all">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M12 4v16m8-8H4"></path></svg>
            <span>添加参考作品</span>
          </button>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
</script>

<style scoped>
.custom-scrollbar::-webkit-scrollbar {
  display: block;
  width: 6px;
}
.custom-scrollbar::-webkit-scrollbar-track {
  background: transparent;
}
.custom-scrollbar::-webkit-scrollbar-thumb {
  background: #d1d5db;
  border-radius: 3px;
}
.custom-scrollbar::-webkit-scrollbar-thumb:hover {
  background: #9ca3af;
}
</style>

// =
// 文件: ..\src\novel\management\views\WorldviewView.vue
//

<template>
  <div class="flex-1 px-8 py-6 overflow-auto bg-[#FCFCFC] hide-scrollbar">
    <div class="space-y-8 max-w-7xl mx-auto">
      <div>
        <div class="flex items-center gap-3 mb-4">
          <div class="w-8 h-8 bg-blue-100 text-blue-600 rounded-lg flex items-center justify-center flex-shrink-0">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0118 0z"></path><circle cx="12" cy="10" r="3"></circle></svg>
          </div>
          <h2 class="text-base font-medium text-[#374151]">地点</h2>
        </div>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          <!-- 现有卡片 -->
          <div class="bg-white rounded-xl p-6 border border-gray-100 hover:border-gray-200 transition-all hover:shadow-sm cursor-pointer">
            <h3 class="font-medium text-[#374151] mb-1">探索者四号</h3>
            <p class="text-sm text-[#9CA3AF] line-clamp-2">主角所在的深空探测飞船，配备了实验性的“艾拉”AI系统和基础的生态循环模块。</p>
            <div class="mt-4 text-xs text-gray-400">更新于：2天前</div>
          </div>
          <div class="bg-white rounded-xl p-6 border border-gray-100 hover:border-gray-200 transition-all hover:shadow-sm cursor-pointer">
            <h3 class="font-medium text-[#374151] mb-1">跃迁点</h3>
            <p class="text-sm text-[#9CA3AF] line-clamp-2">一种罕见的宇宙弦理论现象，被认为是超光速旅行的唯一可能通道，但极度不稳定。</p>
            <div class="mt-4 text-xs text-gray-400">更新于：1小时前</div>
          </div>
        </div>
      </div>

      <!-- 分类: 技术 -->
      <div>
        <div class="flex items-center gap-3 mb-4">
          <div class="w-8 h-8 bg-indigo-100 text-indigo-600 rounded-lg flex items-center justify-center flex-shrink-0">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M5 12h14M12 5l7 7-7 7"></path></svg>
          </div>
          <h2 class="text-base font-medium text-[#374151]">技术</h2>
        </div>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          <div class="bg-white rounded-xl p-6 border border-gray-100 hover:border-gray-200 transition-all hover:shadow-sm cursor-pointer">
            <h3 class="font-medium text-[#374151] mb-1">再生咖啡</h3>
            <p class="text-sm text-[#9CA3AF] line-clamp-2">飞船内物质循环系统的产物，味道苦涩，但能提供必要的咖啡因和微量元素。</p>
            <div class="mt-4 text-xs text-gray-400">更新于：5天前</div>
          </div>
          <div class="bg-white rounded-xl p-6 border border-gray-100 hover:border-gray-200 transition-all hover:shadow-sm cursor-pointer">
            <h3 class="font-medium text-[#374151] mb-1">艾拉AI系统</h3>
            <p class="text-sm text-[#9CA3AF] line-clamp-2">第五代通用人工智能，负责飞船的全部操作。其逻辑核心被设定为“确保任务完成”，有时会与船员的生存需求产生冲突。</p>
            <div class="mt-4 text-xs text-gray-400">更新于：2天前</div>
          </div>
          <!-- 添加新设定的占位符卡片 -->
          <button class="bg-white rounded-xl p-6 border border-dashed border-gray-200 hover:border-blue-400 transition-all hover:shadow-sm text-left group flex flex-col items-center justify-center text-gray-500 hover:text-blue-600">
            <div class="w-12 h-12 rounded-xl bg-gray-100 group-hover:bg-blue-50 flex items-center justify-center mb-4 group-hover:scale-105 transition-transform">
              <svg class="w-6 h-6" stroke="currentColor" fill="none" stroke-width="2" viewBox="0 0 24 24"><path d="M12 5V19M5 12H19"/></svg>
            </div>
            <h4 class="font-medium text-[#374151] mb-1">新建设定</h4>
            <p class="text-sm text-[#9CA3AF]">为此分类添加新条目</p>
          </button>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
// Component logic can be added here
</script>

<style scoped>
.line-clamp-2 {
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 2;
  overflow: hidden;
}
</style>

// =
// 文件: ..\src\novel\router.ts
//

import type { RouteRecordRaw } from 'vue-router'
import { dashboardRoutes } from './dashboard/router'
import { managementRoutes } from './management/router'
import { chatRoutes } from './chat/router'
import { editorRoutes } from './editor/router'

export const novelRoutes: Array<RouteRecordRaw> = [
    {

        path: '/novel',

        component: () => import('@/novel/layouts/NovelDashboardLayout.vue'),

        redirect: '/novel/dashboard',

        children: [
            ...dashboardRoutes
        ]
    },
    {
        // 管理模块保持独立，因为它使用不同的布局
        path: '/novel/manage',
        component: () => import('@/novel/layouts/NovelManagementLayout.vue'),
        redirect: '/novel/manage/outline',
        children: [
            ...managementRoutes
        ]
    },
    // 编辑器模块的路由保持独立顶级注册
    ...editorRoutes,

    // 将聊天路由作为顶级模块进行注册
    ...chatRoutes,

    // 其他独立页面路由
    {
        path: '/novel/read',
        name: 'NovelReader',
        component: () => import('@/novel/management/views/ReaderView.vue'),
        meta: { title: '阅读模式' }
    },
    {
        path: '/novel/history',
        component: () => import('@/novel/layouts/NovelHistoryLayout.vue'),
        children: [
            {
                path: '',
                name: 'NovelHistory',
                component: () => import('@/novel/management/views/HistoryView.vue'),
                meta: { title: '版本历史' }
            }
        ]
    },
    {
        path: '/novel/context-provider',
        name: 'NovelContextProvider',
        component: () => import('@/novel/management/views/ContextProviderView.vue'),
        meta: { title: '上下文预览' }
    }
]

// =
// 文件: ..\src\novel\shared\components\GlobalAIAssistant\AITaskConfigModal.vue
//

<template>
  <!-- Modal-Backdrop -->
  <!-- 使用 v-if 和从 useAIAssistantStore 获取的全局状态来控制显示 -->
  <div v-if="aiAssistantStore.isConfigModalOpen" @click.self="aiAssistantStore.closeTaskConfig" class="fixed inset-0 bg-black/40 backdrop-blur-sm z-[100] flex items-center justify-center p-4 transition-opacity duration-300">

    <!-- Modal-Container -->
    <div class="bg-white rounded-2xl shadow-2xl w-full max-w-2xl border border-gray-100 flex flex-col max-h-[90vh] transition-transform duration-300 scale-95 animate-fade-in-up">
      <div class="p-6 border-b border-gray-100 flex justify-between items-center flex-shrink-0">
        <div>
          <!-- 标题现在是动态的, 从 computed property 'taskTitle' 获取 -->
          <h3 class="text-lg font-medium text-[#374151]">AI任务配置 - {{ aiAssistantStore.taskTitle }}</h3>
          <p class="text-sm text-[#6B7280] mt-1">配置AI助手如何处理您的内容</p>
        </div>
        <!-- 点击关闭按钮时调用全局的关闭方法 -->
        <button @click="aiAssistantStore.closeTaskConfig" class="w-9 h-9 hover:bg-gray-100 rounded-lg flex items-center justify-center transition-colors">
          <svg class="w-5 h-5 text-[#6B7280]" fill="none" stroke="currentColor" stroke-width="2.5" viewBox="0 0 24 24"><path d="M6 18L18 6M6 6l12 12"></path></svg>
        </button>
      </div>

      <div class="p-6 space-y-6 overflow-y-auto custom-scrollbar">
        <!-- AI模型配置 -->
        <div>
          <label class="flex items-center justify-between mb-3">
            <span class="text-sm font-medium text-[#374151]">AI模型选择</span>
            <a href="#" class="text-xs text-[#3B82F6] cursor-pointer flex items-center gap-1.5 hover:underline">
              <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path></svg>
              了解模型差异
            </a>
          </label>
          <select class="w-full text-sm px-3 py-2 bg-white border border-gray-200 rounded-lg focus:ring-1 focus:ring-blue-500 focus:border-blue-500 outline-none transition">
            <option selected>GPT-4o (推荐 - 均衡性能)</option>
            <option>Claude 3 Opus (文学创作专长)</option>
            <option>混合模型 (多模型协作)</option>
            <option>自定义微调模型</option>
          </select>
        </div>

        <!-- 提示词选择 -->
        <div>
          <label for="prompt-template" class="text-sm font-medium text-[#374151] block mb-3">任务提示词模板</label>
          <select id="prompt-template" class="w-full text-sm px-3 py-2 bg-white border border-gray-200 rounded-lg focus:ring-1 focus:ring-blue-500 focus:border-blue-500 outline-none transition">
            <option selected>文学润色 - 注重修辞和意境</option>
            <option>简洁优化 - 删繁就简，保留精华</option>
            <option>情感强化 - 增强情感表达</option>
            <option>节奏调整 - 优化叙事节奏</option>
          </select>
        </div>

        <!-- 上下文选择 -->
        <div>
          <label class="text-sm font-medium text-[#374151] block mb-3">上下文配置</label>
          <div class="space-y-3">
            <div class="bg-white p-4 rounded-lg border border-gray-200 hover:border-gray-300 transition-colors">
              <div class="flex items-center justify-between">
                <div class="flex items-center gap-3">
                  <div class="w-10 h-10 bg-[#F3F4F6] rounded-lg flex items-center justify-center">
                    <svg class="w-5 h-5 text-[#4B5563]" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M13 2H6a2 2 0 00-2 2v16a2 2 0 002 2h12a2 2 0 002-2V9z"></path><polyline points="13 2 13 9 20 9"></polyline></svg>
                  </div>
                  <div>
                    <p class="font-medium text-sm text-[#374151]">固定上下文</p>
                    <p class="text-xs text-[#9CA3AF]">小说设定、人物档案、世界观</p>
                  </div>
                </div>
                <label class="relative inline-flex items-center cursor-pointer"><input type="checkbox" class="sr-only peer" checked><div class="w-11 h-6 bg-gray-200 rounded-full peer peer-checked:bg-[#4B5563] peer-checked:after:translate-x-full after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border after:rounded-full after:h-5 after:w-5 after:transition-all"></div></label>
              </div>
            </div>

            <div class="bg-white p-4 rounded-lg border border-gray-200 hover:border-gray-300 transition-colors">
              <div class="flex items-center justify-between">
                <div class="flex items-center gap-3">
                  <div class="w-10 h-10 bg-[#F3F4F6] rounded-lg flex items-center justify-center">
                    <svg class="w-5 h-5 text-[#4B5563]" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M19.5 12c0-5.23-4.27-9.5-9.5-9.5S.5 6.77.5 12s4.27 9.5 9.5 9.5M12 2v2m0 18v-2M4.5 4.5l1.42 1.42M18.08 18.08l-1.42-1.42m0-11.32l1.42-1.42M4.5 19.5l1.42-1.42M2 12h2m18 0h-2"></path></svg>
                  </div>
                  <div>
                    <p class="font-medium text-sm text-[#374151]">动态上下文</p>
                    <p class="text-xs text-[#9CA3AF]">自动包含前后相关章节</p>
                  </div>
                </div>
                <label class="relative inline-flex items-center cursor-pointer"><input type="checkbox" class="sr-only peer" checked><div class="w-11 h-6 bg-gray-200 rounded-full peer peer-checked:bg-[#4B5563] peer-checked:after:translate-x-full after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border after:rounded-full after:h-5 after:w-5 after:transition-all"></div></label>
              </div>
            </div>

            <div class="bg-white p-4 rounded-lg border border-gray-200 hover:border-gray-300 transition-colors">
              <div class="flex items-center justify-between">
                <div class="flex items-center gap-3">
                  <div class="w-10 h-10 bg-[#F3F4F6] rounded-lg flex items-center justify-center">
                    <svg class="w-5 h-5 text-[#4B5563]" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z" /></svg>
                  </div>
                  <div>
                    <p class="font-medium text-sm text-[#374151]">RAG智能搜索</p>
                    <p class="text-xs text-[#9CA3AF]">自动检索相关内容</p>
                  </div>
                </div>
                <label class="relative inline-flex items-center cursor-pointer"><input type="checkbox" class="sr-only peer"><div class="w-11 h-6 bg-gray-200 rounded-full peer peer-checked:bg-[#4B5563] peer-checked:after:translate-x-full after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border after:rounded-full after:h-5 after:w-5 after:transition-all"></div></label>
              </div>
            </div>
          </div>
        </div>

        <div>
          <label class="text-sm font-medium text-[#374151] block mb-3">高级设置</label>
          <div class="space-y-4 p-4 bg-[#F9FAFB] rounded-lg border border-gray-100">
            <div class="flex items-center justify-between">
              <span class="text-sm text-[#6B7280]">创作温度</span>
              <div class="flex items-center gap-3">
                <input type="range" min="0" max="100" value="70" class="w-32 h-1 bg-gray-200 rounded-lg appearance-none cursor-pointer">
                <span class="text-sm font-mono text-[#374151] w-8 text-right">0.7</span>
              </div>
            </div>
            <div class="flex items-center justify-between">
              <span class="text-sm text-[#6B7280]">保留原文风格</span>
              <label class="relative inline-flex items-center cursor-pointer"><input type="checkbox" class="sr-only peer" checked><div class="w-11 h-6 bg-gray-200 rounded-full peer peer-checked:bg-[#4B5563] peer-checked:after:translate-x-full after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border after:rounded-full after:h-5 after:w-5 after:transition-all"></div></label>
            </div>
          </div>
        </div>
      </div>

      <div class="p-6 bg-[#FAFAFA] border-t border-gray-100 flex justify-end gap-3 flex-shrink-0">
        <button @click="aiAssistantStore.closeTaskConfig" class="px-4 py-2 bg-white border border-gray-200 rounded-lg text-sm font-medium text-[#374151] hover:bg-gray-50 transition-colors">取消</button>
        <button @click="aiAssistantStore.closeTaskConfig" class="px-4 py-2 bg-[#4B5563] text-white rounded-lg text-sm font-medium hover:bg-gray-700 transition-colors flex items-center gap-2">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M4.5 12.75l6 6 9-13.5" /></svg>
          保存配置
        </button>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { useAIAssistantStore } from '@/novel/shared/composables/useAIAssistantStore';

const aiAssistantStore = useAIAssistantStore();
</script>

<style scoped>
@keyframes fade-in-up {
  from {
    opacity: 0;
    transform: translateY(20px) scale(0.95);
  }
  to {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}
.animate-fade-in-up {
  animation: fade-in-up 0.3s ease-out forwards;
}

.custom-scrollbar::-webkit-scrollbar {
  display: block;
  width: 6px;
}
.custom-scrollbar::-webkit-scrollbar-track {
  background: transparent;
}
.custom-scrollbar::-webkit-scrollbar-thumb {
  background: #d1d5db;
  border-radius: 3px;
}
.custom-scrollbar::-webkit-scrollbar-thumb:hover {
  background: #9ca3af;
}

input[type=range] {
  -webkit-appearance: none;
  appearance: none;
  background: transparent;
  cursor: pointer;
}
input[type=range]::-webkit-slider-runnable-track {
  background: #E5E7EB;
  height: 0.25rem;
  border-radius: 0.25rem;
}
input[type=range]::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  margin-top: -6px;
  background-color: #ffffff;
  height: 1rem;
  width: 1rem;
  border-radius: 50%;
  border: 1px solid #D1D5DB;
  box-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);
}
input[type=range]:focus::-webkit-slider-thumb {
  outline: 2px solid transparent;
  outline-offset: 2px;
  box-shadow: 0 0 0 3px #3B82F640;
}
</style>

// =
// 文件: ..\src\novel\shared\components\GlobalAIAssistant\index.vue
//

<template>
  <div
      class="fixed z-50 flex items-center justify-center cursor-grab active:cursor-grabbing"
      :style="{ top: `${position.y}px`, left: `${position.x}px`, width: '12rem', height: '12rem', marginLeft: '-6rem', marginTop: '-6rem' }"
      @mousedown="startDrag"
      @click="handleClick"
  >
    <!-- Radial Menu Items Container -->
    <div
        class="absolute inset-0 pointer-events-none"
    >
      <div
          v-for="item in menuItems"
          :key="item.id"
          :class="['float-menu-item', { 'active': isAiMenuOpen }]"
          :style="{ transform: isAiMenuOpen ? `rotate(${item.angle}deg) translate(80px) rotate(${-item.angle}deg) scale(1)` : 'scale(0.5)' }"
      >
        <component
            :is="item.path ? 'router-link' : 'button'"
            :to="item.path"
            @click.stop="item.action"
            :class="[
            'w-16 h-16 bg-white rounded-full shadow-lg flex flex-col items-center justify-center gap-1 transition-all border border-gray-100 pointer-events-auto',
            item.color.hoverBg,
            'text-[#374151]',
            'hover:text-black'
          ]"
            :title="item.name"
        >
          <i :class="['fa-solid', item.icon, item.color.icon, 'text-xl']"></i>
          <span class="text-xs font-medium">{{ item.name }}</span>
        </component>
      </div>
    </div>

    <!-- Main Floating Button -->
    <button
        class="w-16 h-16 text-white rounded-full shadow-xl hover:scale-110 focus:scale-110 active:scale-100 transition-all duration-300 flex items-center justify-center pointer-events-auto absolute"
        :class="isAiMenuOpen
          ? 'bg-gradient-to-br from-gray-500 to-gray-600'
          : 'bg-gradient-to-br from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700'"
    >
      <i
          :class="['fa-solid', isAiMenuOpen ? 'fa-times' : 'fa-wand-magic-sparkles', 'text-2xl transition-transform duration-300 ease-in-out']"
          :style="{ transform: isAiMenuOpen ? 'rotate(180deg)' : 'rotate(0deg)' }"
      ></i>
    </button>

  </div>
</template>

<script setup lang="ts">
import { ref, computed } from 'vue';
import { useDraggable } from '@/novel/shared/composables/useDraggable';
import { useAIAssistantStore } from '@/novel/shared/composables/useAIAssistantStore';

const aiAssistantStore = useAIAssistantStore();
const isAiMenuOpen = ref(false);

const toggleMenu = () => {
  isAiMenuOpen.value = !isAiMenuOpen.value;
};

const menuItems = computed(() => [
  {
    id: 'continue',
    name: '续写',
    icon: 'fa-wand-magic-sparkles',
    angle: -165,
    color: { icon: 'text-purple-500', hoverBg: 'hover:bg-purple-50' },
    action: () => {
      aiAssistantStore.openTaskConfig('continue');
      isAiMenuOpen.value = false;
    }
  },
  {
    id: 'polish',
    name: '润色',
    icon: 'fa-palette',
    angle: -115,
    color: { icon: 'text-teal-500', hoverBg: 'hover:bg-teal-50' },
    action: () => {
      aiAssistantStore.openTaskConfig('polish');
      isAiMenuOpen.value = false;
    }
  },
  {
    id: 'analyze',
    name: '分析',
    icon: 'fa-magnifying-glass-chart',
    angle: -65,
    color: { icon: 'text-amber-500', hoverBg: 'hover:bg-amber-50' },
    action: () => {
      aiAssistantStore.openTaskConfig('analyze');
      isAiMenuOpen.value = false;
    }
  },
  {
    id: 'chat',
    name: '聊天',
    icon: 'fa-comments',
    angle: -15,
    color: { icon: 'text-blue-500', hoverBg: 'hover:bg-blue-50' },
    path: '/novel/chat',
    action: () => {
      isAiMenuOpen.value = false;
    }
  }
]);

const { position, dragging, startDrag } = useDraggable({
  initialPosition: { x: window.innerWidth - 100, y: window.innerHeight - 100 },
  padding: 16
});

const handleClick = () => {
  if (dragging.value) {
    return;
  }
  toggleMenu();
};

</script>

<style scoped>
.float-menu-item {
  position: absolute;
  top: 50%;
  left: 50%;
  margin-left: -2rem; /* -32px */
  margin-top: -2rem; /* -32px */
  opacity: 0;
  transition: all 0.3s cubic-bezier(0.68, -0.55, 0.265, 1.55);
  transform: scale(0.5);
}
.float-menu-item.active {
  opacity: 1;
}
</style>

// =
// 文件: ..\src\novel\shared\composables\useAIAssistantStore.ts
//

import { defineStore } from 'pinia';

// 定义一个任务类型到中文标题的映射
const taskTitles: { [key: string]: string } = {
    'continue': '续写内容',
    'polish': '润色内容',
    'analyze': '分析内容',
    'chat': 'AI聊天助手'
};

/**
 * AI 助手全局状态管理 Store
 */
export const useAIAssistantStore = defineStore('aiAssistant', {
    state: () => ({
        isConfigModalOpen: false,
        currentTaskType: '',
    }),
    getters: {
        /**
         * 根据当前任务类型动态生成模态框标题
         */
        taskTitle: (state): string => taskTitles[state.currentTaskType] || 'AI任务配置',
    },
    actions: {
        /**
         * 打开任务配置模态框
         * @param taskType - 要配置的任务类型 (e.g., 'polish')
         */
        openTaskConfig(taskType: string) {
            this.currentTaskType = taskType;
            this.isConfigModalOpen = true;
        },

        /**
         * 关闭任务配置模态框
         */
        closeTaskConfig() {
            this.isConfigModalOpen = false;
        },
    },
});

// =
// 文件: ..\src\novel\shared\composables\useDraggable.ts
//

import { ref, onUnmounted } from 'vue';

interface DraggableOptions {
    initialPosition?: { x: number; y: number };
    padding?: number;
}

export function useDraggable(options: DraggableOptions = {}) {
    const { initialPosition = { x: 0, y: 0 }, padding = 0 } = options;

    const position = ref({ x: initialPosition.x, y: initialPosition.y });
    const dragging = ref(false);

    let initialMouseX = 0;
    let initialMouseY = 0;
    let startPositionX = 0;
    let startPositionY = 0;
    const dragThreshold = 5;

    const onDrag = (e: MouseEvent) => {
        e.preventDefault();

        const dx = e.clientX - initialMouseX;
        const dy = e.clientY - initialMouseY;

        if (!dragging.value && (Math.abs(dx) > dragThreshold || Math.abs(dy) > dragThreshold)) {
            dragging.value = true;
        }

        if (dragging.value) {
            let newX = startPositionX + dx;
            let newY = startPositionY + dy;

            const minClampX = padding;
            const minClampY = padding;
            const maxClampX = window.innerWidth - padding;
            const maxClampY = window.innerHeight - padding;

            position.value.x = Math.max(minClampX, Math.min(newX, maxClampX));
            position.value.y = Math.max(minClampY, Math.min(newY, maxClampY));
        }
    };

    const endDrag = () => {
        window.removeEventListener('mousemove', onDrag);
        window.removeEventListener('mouseup', endDrag);
    };

    const startDrag = (e: MouseEvent) => {
        e.preventDefault();
        dragging.value = false;

        initialMouseX = e.clientX;
        initialMouseY = e.clientY;
        startPositionX = position.value.x;
        startPositionY = position.value.y;

        window.addEventListener('mousemove', onDrag);
        window.addEventListener('mouseup', endDrag);
    };

    onUnmounted(() => {
        window.removeEventListener('mousemove', onDrag);
        window.removeEventListener('mouseup', endDrag);
    });

    return {
        position,
        dragging,
        startDrag,
    };
}

