// == 扫描摘要 ==
//
// == 文件内容 ==

// =
// 文件: ..\src\novel\editor\components\sidebar\DirectoryContextMenu.vue
//

<template>
  <div
      v-if="visible && menuComponent"
      class="context-menu"
      :style="{ top: `${position.y}px`, left: `${position.x}px` }"
      @click.stop
  >
    <component
        :is="menuComponent"
        :node="node!"
        @action="handleAction"
        @ai-action="handleAIAction"
        @settings-action="handleSettingsAction"
        @custom-related-action="handleCustomRelatedAction"
        @custom-others-action="handleOthersAction"
        @note-action="handleNoteAction"
        @prompt-action="handlePromptAction"
    />
  </div>
</template>

<script setup lang="ts">
// 文件: ..\src\novel\editor\components\sidebar\DirectoryContextMenu.vue
import { ref, computed, onMounted, onBeforeUnmount, defineAsyncComponent, shallowRef } from 'vue';
import type { TreeNode } from '@/novel/editor/types';
import { useAITaskExecutor } from '@/novel/editor/composables/useAITaskExecutor';
import { useEditorStore } from '@/novel/editor/stores/editorStore';
import { useDirectoryStore } from '@/novel/editor/stores/directoryStore';
import { useRelatedContentStore } from '@/novel/editor/stores/relatedContentStore';
import { useNotesStore } from '@/novel/editor/stores/notesStore';
import { usePromptTemplateStore } from '@/novel/editor/stores/promptTemplateStore';
import { useUIStore } from '@/novel/editor/stores/uiStore';
import type { AITask } from '@/novel/editor/types';

// --- 组件映射 ---
const menuComponentMap = shallowRef({
  'volume': defineAsyncComponent(() => import('./context-menus/VolumeMenu.vue')),
  'chapter': defineAsyncComponent(() => import('./context-menus/ChapterMenu.vue')),
  'group': defineAsyncComponent(() => import('./context-menus/GroupMenu.vue')),
  'item': defineAsyncComponent(() => import('./context-menus/ItemMenu.vue')),
  'root': defineAsyncComponent(() => import('./context-menus/RootMenu.vue')),
  'others': defineAsyncComponent(() => import('./context-menus/OthersMenu.vue')),
  'others_item': defineAsyncComponent(() => import('./context-menus/OthersItemMenu.vue')),
  'custom_related': defineAsyncComponent(() => import('./context-menus/CustomRelatedMenu.vue')),
  'note': defineAsyncComponent(() => import('./context-menus/NoteMenu.vue')),
  'setting_root': defineAsyncComponent(() => import('./context-menus/SettingsRootMenu.vue')),
  'prompt_group': defineAsyncComponent(() => import('./context-menus/PromptGroupMenu.vue')),
  'prompt_item': defineAsyncComponent(() => import('./context-menus/PromptItemMenu.vue')),
});

// --- State and Props ---
const visible = ref(false);
const position = ref({ x: 0, y: 0 });
const node = ref<TreeNode | null>(null);

// --- Stores and Composables ---
const { executeAITask } = useAITaskExecutor();
const editorStore = useEditorStore();
const directoryStore = useDirectoryStore();
const relatedContentStore = useRelatedContentStore();
const notesStore = useNotesStore();
const promptTemplateStore = usePromptTemplateStore();
const uiStore = useUIStore();

// --- Computed ---
const menuComponent = computed(() => {
  if (!node.value) return null;
  const { type, id } = node.value;

  if (type === 'prompt_group' || type === 'prompt_item') return menuComponentMap.value[type];
  if (id.startsWith('custom-others-')) return menuComponentMap.value['others_item'];
  if (id.startsWith('custom-')) return menuComponentMap.value['custom_related'];

  if (type === 'root') {
    if (id === 'setting') return menuComponentMap.value['setting_root'];
    if (id === 'plot' || id === 'analysis') return menuComponentMap.value['root'];
    if (id === 'others') return menuComponentMap.value['others'];
    return null;
  }

  if (type in menuComponentMap.value) return menuComponentMap.value[type as keyof typeof menuComponentMap.value];
  if (type.endsWith('_item')) return menuComponentMap.value['item'];

  return null;
});

// --- Core Logic ---
const show = (event: MouseEvent, targetNode: TreeNode) => {
  if (targetNode.isOverview || (targetNode.isReadOnly && targetNode.type !== 'prompt_group') || targetNode.type.startsWith('reference_')) {
    return;
  }
  node.value = targetNode;
  visible.value = true;
  position.value.x = event.clientX;
  position.value.y = event.clientY;
};

const hide = () => {
  visible.value = false;
  node.value = null;
};

// --- Event Handlers (New Simplified Structure) ---
const handleAiTask = (taskType: AITask['type'], isBatch = false) => {
  hide();
  if (!node.value) return;
  if (isBatch && node.value.type === 'volume' && 'originalData' in node.value && node.value.originalData.type === 'volume') {
    const aiTaskStore = (async () => (await import('@novel/editor/stores/ai/aiTaskStore.ts')).useAITaskStore())();
    aiTaskStore.then(store => store.startBatchTaskForVolume(taskType, node.value!.originalData));
  } else {
    executeAITask(taskType, { id: node.value.id, title: node.value.title });
  }
};

const handleRename = () => {
  hide();
  if (node.value) uiStore.setEditingNodeId(node.value.id);
};

// Directory Actions
const handleNewChapter = async () => {
  hide();
  if (node.value) {
    const newChapter = await directoryStore.addChapterToVolume(node.value.id);
    if (newChapter) {
      uiStore.ensureNodeIsExpanded(node.value.id);
      editorStore.openTab(newChapter.id);
      uiStore.setEditingNodeId(newChapter.id);
    }
  }
};
const handleNewVolume = async () => {
  hide();
  const newVolume = await directoryStore.addNewVolume();
  if (newVolume) {
    uiStore.setEditingNodeId(newVolume.id);
  }
};
const handleDeleteDirectoryNode = async () => {
  hide();
  if (node.value) {
    if (await directoryStore.deleteNode(node.value.id)) {
      editorStore.closeTab(node.value.id);
    }
  }
};

// Settings / Related Actions
const handleNewGroup = () => {
  hide();
  if (node.value) {
    const newNode = relatedContentStore.addRelatedNode(node.value.id, 'group');
    if (newNode) {
      uiStore.ensureRelatedNodeIsExpanded(node.value.id);
      uiStore.setEditingNodeId(newNode.id);
    }
  }
};
const handleNewItem = () => {
  hide();
  if (node.value) {
    const newNode = relatedContentStore.addRelatedNode(node.value.id, 'item');
    if (newNode) {
      uiStore.ensureRelatedNodeIsExpanded(node.value.id);
      editorStore.openTab(newNode.id);
      uiStore.setEditingNodeId(newNode.id);
    }
  }
};
const handleDeleteRelatedNode = () => {
  hide();
  if (node.value && relatedContentStore.deleteRelatedNode(node.value.id)) {
    editorStore.closeTab(node.value.id);
  }
};

// Custom Plot/Analysis Actions
const handleNewCustomItem = (target: 'plot' | 'analysis') => {
  hide();
  const newNode = relatedContentStore.addCustomRelatedNode(target);
  uiStore.ensureRelatedNodeIsExpanded(target);
  editorStore.openTab(newNode.id);
  uiStore.setEditingNodeId(newNode.id);
};
const handleDeleteCustomRelatedNode = () => {
  hide();
  if (node.value && relatedContentStore.deleteCustomRelatedNode(node.value.id)) {
    editorStore.closeTab(node.value.id);
  }
};

// Others Actions
const handleNewOthersItem = () => {
  hide();
  const newNode = relatedContentStore.addCustomOthersNode();
  uiStore.ensureRelatedNodeIsExpanded('others');
  editorStore.openTab(newNode.id);
  uiStore.setEditingNodeId(newNode.id);
};
const handleDeleteOthersNode = () => {
  hide();
  if (node.value && relatedContentStore.deleteCustomOthersNode(node.value.id)) {
    editorStore.closeTab(node.value.id);
  }
};

// Note Actions
const handleDeleteNote = async () => {
  hide();
  if (node.value) {
    if (await notesStore.deleteNote(node.value.id)) {
      editorStore.closeTab(node.value.id);
    }
  }
};

// Prompt Actions
const handleNewPrompt = () => {
  hide();
  if(!node.value) return;
  const newNode = promptTemplateStore.addPrompt(node.value.id, '新建提示词', '在这里输入你的提示词模板...');
  if (newNode) {
    uiStore.ensureRelatedNodeIsExpanded(node.value.id);
    editorStore.openTab(newNode.id);
    uiStore.setEditingNodeId(newNode.id);
  }
};

const handleDeletePrompt = () => {
  hide();
  if (!node.value) return;
  if (confirm('确定要删除这个提示词模板吗？')) {
    if (promptTemplateStore.deletePrompt(node.value.id)) {
      editorStore.closeTab(node.value.id);
    }
  }
};

// --- Lifecycle ---
onMounted(() => { window.addEventListener('click', hide); });
onBeforeUnmount(() => { window.removeEventListener('click', hide); });

defineExpose({ show, hide });
</script>

<style scoped>
.context-menu {
  position: fixed;
  z-index: 1000;
  background-color: white;
  border: 1px solid #e5e7eb;
  border-radius: 0.75rem;
  padding: 0.5rem;
  box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
  min-width: 14rem;
}
</style>

// =
// 文件: ..\src\novel\editor\components\sidebar\DirectoryTab.vue
//

// src/novel/editor/components/sidebar/DirectoryTab.vue

<template>
  <div class="directory-tab-container">
    <div class="header">
      <h3 class="title">章节大纲</h3>
      <div class="actions">
        <button @click="handleAddNewVolume" class="action-btn" title="添加新卷">
          <i class="fa-solid fa-folder-plus fa-xs"></i>
        </button>
        <button class="action-btn" title="折叠/展开全部">
          <i class="fa-solid fa-folder-tree fa-xs"></i>
        </button>
      </div>
    </div>
    <div class="scrollable-content">
      <TreeView
          v-if="directoryTree.length > 0"
          :nodes="directoryTree"
          :active-node-id="activeNodeId"
          :expanded-node-ids="uiStore.uiState.expandedNodeIds"
          :editing-node-id="editorStore.editingNodeId"
          @select-node="handleSelectNode"
          @toggle-expansion="handleToggleExpansion"
          @context-menu="handleContextMenu"
          @commit-rename="handleCommitRename"
          @cancel-rename="handleCancelRename"
      />
      <div v-else class="p-4 text-sm text-gray-500">
        正在加载目录...
      </div>
    </div>
  </div>
</template>
<script setup lang="ts">
// 文件: ..\src\novel\editor\components\sidebar\DirectoryTab.vue
import { computed } from 'vue';
import TreeView from './TreeView.vue';
import { useEditorStore } from '@/novel/editor/stores/editorStore';
import { useDirectoryStore } from '@/novel/editor/stores/directoryStore';
import { useUIStore } from '@/novel/editor/stores/uiStore';
import { getIconByNodeType } from '@/novel/editor/utils/iconUtils';
import type { TreeNode, VolumeNode } from '@/novel/editor/types';

const emit = defineEmits<{
  (e: 'show-context-menu', payload: { node: TreeNode; event: MouseEvent }): void;
}>();

const editorStore = useEditorStore();
const directoryStore = useDirectoryStore();
const uiStore = useUIStore();

const activeNodeId = computed(() => editorStore.activeTabId);

const directoryTree = computed((): VolumeNode[] => {
  return directoryStore.directoryData.map(volume => ({
    id: volume.id,
    title: volume.title,
    icon: getIconByNodeType(volume.type),
    type: 'volume',
    content: volume.content,
    originalData: volume,
    children: volume.chapters.map(chapter => ({
      id: chapter.id,
      title: chapter.title,
      icon: getIconByNodeType(chapter.type),
      type: 'chapter',
      status: chapter.status,
      content: chapter.content,
      originalData: chapter,
    })),
  }));
});

const handleSelectNode = (node: TreeNode) => {
  if (node.type === 'chapter' || node.type === 'volume') {
    editorStore.openTab(node.id);
  } else if(node.children && node.children.length > 0) {
    uiStore.toggleNodeExpansion(node.id);
  }
};

const handleToggleExpansion = (id:string) => {
  uiStore.toggleNodeExpansion(id);
};

const handleContextMenu = (payload: { node: TreeNode; event: MouseEvent }) => {
  emit('show-context-menu', payload);
};

const handleAddNewVolume = async () => {
  const newVolume = await directoryStore.addNewVolume();
  if (newVolume) {
    uiStore.setEditingNodeId(newVolume.id);
  }
};

const handleCommitRename = (payload: { nodeId: string; newTitle: string; nodeType: string }) => {
  directoryStore.renameNode(payload.nodeId, payload.newTitle);
  handleCancelRename();
};

const handleCancelRename = () => {
  uiStore.setEditingNodeId(null);
};
</script>
<style scoped>
.directory-tab-container {
  display: flex;
  flex-direction: column;
  height: 100%;
  width: 100%;
  overflow: hidden;
}
.header {
  padding: 1rem;
  padding-bottom: 0.25rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-shrink: 0;
}
.title { font-size: 0.875rem; font-weight: 500; color: #4B5563; }
.actions { display: flex; align-items: center; gap: 0.25rem; }
.action-btn { width: 1.75rem; height: 1.75rem; display: flex; align-items: center; justify-content: center; color: #6B7280; border-radius: 0.375rem; transition: background-color 0.15s; }
.action-btn:hover { background-color: #E5E7EB; }

.scrollable-content {
  flex-grow: 1;
  overflow-y: auto;
  padding: 0.75rem 1rem 1rem;
}
.scrollable-content::-webkit-scrollbar { width: 6px; }
.scrollable-content::-webkit-scrollbar-track { background: transparent; }
.scrollable-content::-webkit-scrollbar-thumb { background: #D1D5DB; border-radius: 3px; }
.scrollable-content::-webkit-scrollbar-thumb:hover { background: #9CA3AF; }
</style>

// =
// 文件: ..\src\novel\editor\components\sidebar\NotesTab.vue
//

// 文件: src\novel\editor\components\sidebar\NotesTab.vue

<template>
  <div class="notes-tab-container">
    <div class="header">
      <h3 class="title">章节笔记</h3>
      <button @click="handleAddNewNote" class="action-btn" title="新建笔记"><i class="fa-solid fa-plus fa-xs"></i></button>
    </div>
    <div class="notes-list">
      <div
          v-for="(note, index) in notesStore.notes"
          :key="note.id"
          @click="editorStore.openTab(note.id)"
          @contextmenu.prevent="handleContextMenu(note, $event)"
          class="note-item"
          :class="{ 'active': activeTabId === note.id }"
      >
        <div class="note-header">
          <template v-if="editingNodeId === note.id">
            <input
                :ref="el => { if (el) renameInputs[index] = el as HTMLInputElement }"
                type="text"
                :value="note.title"
                class="rename-input"
                @blur="handleCommitRename($event, note.id)"
                @keydown.enter.prevent="handleCommitRename($event, note.id)"
                @keydown.esc.prevent="handleCancelRename"
                @click.stop
            />
          </template>
          <template v-else>
            <p class="note-title">{{ note.title }}</p>
          </template>
          <span class="note-timestamp">{{ note.timestamp }}</span>
        </div>
        <p class="note-content">{{ note.content.replace(/<[^>]+>/g, '') }}</p>
      </div>
    </div>
    <div class="quick-add-footer">
      <input
          type="text"
          placeholder="快速添加新笔记..."
          class="quick-add-input"
          v-model="quickAddValue"
          @keydown.enter="handleQuickAdd"
      >
      <button @click="handleQuickAdd" class="quick-add-btn"><i class="fa-solid fa-paper-plane fa-sm"></i></button>
    </div>
  </div>
</template>
<script setup lang="ts">
// 文件: ..\src\novel\editor\components\sidebar\NotesTab.vue
import { ref, computed, watch, nextTick, onBeforeUpdate } from 'vue';
import { useEditorStore } from '@/novel/editor/stores/editorStore';
import { useNotesStore } from '@/novel/editor/stores/notesStore';
import { useUIStore } from '@/novel/editor/stores/uiStore';
import type { NoteItem } from '@/novel/editor/types';
import type { TreeNode } from './TreeView.vue';
import { getIconByNodeType } from '@/novel/editor/utils/iconUtils';

const emit = defineEmits<{
  (e: 'show-context-menu', payload: { node: TreeNode; event: MouseEvent }): void;
}>();

const editorStore = useEditorStore();
const notesStore = useNotesStore();
const uiStore = useUIStore();
const quickAddValue = ref('');
const renameInputs = ref<HTMLInputElement[]>([]);

const editingNodeId = computed(() => uiStore.editingNodeId);
const activeTabId = computed(() => editorStore.activeTabId);


watch(editingNodeId, (newId) => {
  if (newId && newId.startsWith('note-')) {
    nextTick(() => {
      const noteIndex = notesStore.notes.findIndex(n => n.id === newId);
      if (noteIndex !== -1 && renameInputs.value[noteIndex]) {
        renameInputs.value[noteIndex].focus();
        renameInputs.value[noteIndex].select();
      }
    });
  }
});

onBeforeUpdate(() => {
  renameInputs.value = [];
});

const addNewNoteAndEdit = async (title: string) => {
  const newNote = await notesStore.addNote(title);
  if (newNote) {
    editorStore.openTab(newNote.id);
    uiStore.setEditingNodeId(newNote.id);
  }
};

const handleAddNewNote = () => {
  addNewNoteAndEdit('新建笔记');
};

const handleQuickAdd = () => {
  const value = quickAddValue.value.trim();
  if (!value) return;
  addNewNoteAndEdit(value);
  quickAddValue.value = '';
};

const handleContextMenu = (note: NoteItem, event: MouseEvent) => {
  const nodePayload: TreeNode = {
    id: note.id,
    title: note.title,
    type: note.type,
    icon: getIconByNodeType(note.type),
    originalData: note
  };
  emit('show-context-menu', { node: nodePayload, event });
}

const handleCommitRename = (event: Event, nodeId: string) => {
  const input = event.target as HTMLInputElement;
  const newTitle = input.value.trim();
  if(newTitle) {
    notesStore.renameNote(nodeId, newTitle);
  }
  handleCancelRename();
};

const handleCancelRename = () => {
  uiStore.setEditingNodeId(null);
};
</script>
<style scoped>
.notes-tab-container {
  padding: 1rem;
  display: flex;
  flex-direction: column;
  height: 100%;
  width: 100%;
  overflow: hidden;
}
.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 0.75rem;
  padding: 0 0.5rem;
  flex-shrink: 0;
}
.title { font-size: 0.875rem; font-weight: 500; color: #4B5563; }
.action-btn { width: 1.75rem; height: 1.75rem; display: flex; align-items: center; justify-content: center; color: #6B7280; border-radius: 0.375rem; transition: background-color 0.15s; }
.action-btn:hover { background-color: #E5E7EB; }

.notes-list {
  flex-grow: 1;
  overflow-y: auto;
  space-y: 0.5rem;
  padding-right: 4px;
}
.notes-list::-webkit-scrollbar { width: 6px; }
.notes-list::-webkit-scrollbar-track { background: transparent; }
.notes-list::-webkit-scrollbar-thumb { background: #D1D5DB; border-radius: 3px; }

.note-item { padding: 0.75rem; border-radius: 0.5rem; cursor: pointer; transition: all 0.2s; border: 1px solid transparent; background-color: #FFFFFF; }
.note-item:hover { background-color: #F9FAFB; border-color: #F3F4F6; }
.note-item.active { background-color: #FEFCE8; border-color: #FDE047; }
.note-header { display: flex; justify-content: space-between; align-items: flex-start; gap: 0.5rem; }
.note-title { font-size: 0.875rem; font-weight: 500; color: #1F2937; flex-grow: 1; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
.note-timestamp { font-size: 0.75rem; color: #CA8A04; flex-shrink: 0; }
.note-content { font-size: 0.75rem; color: #4B5563; margin-top: 0.375rem; line-height: 1.6; display: -webkit-box; -webkit-box-orient: vertical; -webkit-line-clamp: 2; overflow: hidden; }
.rename-input {
  flex-grow: 1;
  background-color: white;
  border: 1px solid #3B82F6;
  border-radius: 4px;
  padding: 1px 4px;
  font-size: 0.875rem;
  color: #1F2937;
  outline: none;
  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);
}
.quick-add-footer {
  margin-top: auto;
  padding-top: 0.75rem;
  border-top: 1px solid #E5E7EB;
  flex-shrink: 0;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}
.quick-add-input {
  flex-grow: 1;
  background: white;
  border: 1px solid #D1D5DB;
  border-radius: 0.5rem;
  padding: 0.4rem 0.75rem;
  font-size: 0.875rem;
  outline: none;
  transition: all 0.2s;
}
.quick-add-input:focus {
  border-color: #3B82F6;
  box-shadow: 0 0 0 1px #3B82F6;
}
.quick-add-btn {
  width: 2.2rem;
  height: 2.2rem;
  flex-shrink: 0;
  background-color: #F3F4F6;
  border-radius: 0.5rem;
  color: #4B5563;
  transition: background-color 0.2s;
}
.quick-add-btn:hover {
  background-color: #E5E7EB;
}
</style>

// =
// 文件: ..\src\novel\editor\components\sidebar\ReferencesTab.vue
//

// src/novel/editor/components/sidebar/ReferencesTab.vue
<template>
  <div class="references-tab-container">
    <div class="header">
      <h3 class="title">参考书目</h3>
      <div class="actions">
        <!-- Add button removed to enforce read-only -->
      </div>
    </div>
    <div class="scrollable-content">
      <TreeView
          v-if="referenceTree.length > 0"
          :nodes="referenceTree"
          :active-node-id="activeNodeId"
          :expanded-node-ids="uiStore.uiState.expandedReferenceNodeIds"
          :editing-node-id="editorStore.editingNodeId"
          @select-node="handleSelectNode"
          @toggle-expansion="handleToggleExpansion"
          @context-menu="handleContextMenu"
      />
      <div v-else class="p-4 text-sm text-gray-500">
        没有参考书。
      </div>
    </div>
  </div>
</template>
<script setup lang="ts">
import { computed } from 'vue';
import TreeView from './TreeView.vue';
import { useEditorStore } from '@/novel/editor/stores/editorStore';
import { useReferenceStore } from '@/novel/editor/stores/referenceStore';
import { useUIStore } from '@/novel/editor/stores/uiStore';
import type { TreeNode } from '@/novel/editor/types';

const emit = defineEmits<{
  (e: 'show-context-menu', payload: { node: TreeNode; event: MouseEvent }): void;
}>();

const editorStore = useEditorStore();
const referenceStore = useReferenceStore();
const uiStore = useUIStore();

const activeNodeId = computed(() => editorStore.activeTabId);

const referenceTree = computed((): TreeNode[] => {
  return referenceStore.referenceData;
});

const handleSelectNode = (node: TreeNode) => {
  // If the node has children, it's a container node, so we toggle its expansion.
  if (node.children && node.children.length > 0) {
    uiStore.toggleReferenceNodeExpansion(node.id);
  }
  // If the node has content, it's a leaf node that can be opened.
  else if (node.hasOwnProperty('content')) {
    editorStore.openTab(node.id);
  }
};

const handleToggleExpansion = (id:string) => {
  uiStore.toggleReferenceNodeExpansion(id);
};

const handleContextMenu = (payload: { node: TreeNode; event: MouseEvent }) => {
  emit('show-context-menu', payload);
};
</script>
<style scoped>
.references-tab-container {
  display: flex;
  flex-direction: column;
  height: 100%;
  width: 100%;
  overflow: hidden;
}
.header {
  padding: 1rem;
  padding-bottom: 0.25rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-shrink: 0;
}
.title { font-size: 0.875rem; font-weight: 500; color: #4B5563; }
.actions { display: flex; align-items: center; gap: 0.25rem; }
.action-btn { width: 1.75rem; height: 1.75rem; display: flex; align-items: center; justify-content: center; color: #6B7280; border-radius: 0.375rem; transition: background-color 0.15s; }
.action-btn:hover { background-color: #E5E7EB; }

.scrollable-content {
  flex-grow: 1;
  overflow-y: auto;
  padding: 0.75rem 1rem 1rem;
}
.scrollable-content::-webkit-scrollbar { width: 6px; }
.scrollable-content::-webkit-scrollbar-track { background: transparent; }
.scrollable-content::-webkit-scrollbar-thumb { background: #D1D5DB; border-radius: 3px; }
.scrollable-content::-webkit-scrollbar-thumb:hover { background: #9CA3AF; }
</style>

// =
// 文件: ..\src\novel\editor\components\sidebar\RelatedTab.vue
//


<template>
  <div class="related-tab-container">
    <div class="header">
      <h3 class="title">相关内容</h3>
      <div class="actions">
        <button @click="handleAddNewCustomPlot" class="action-btn" title="新建自定义剧情">
          <i class="fa-solid fa-feather-pointed fa-xs"></i>
        </button>
        <button @click="handleAddNewCustomAnalysis" class="action-btn" title="新建自定义分析">
          <i class="fa-solid fa-magnifying-glass-chart fa-xs"></i>
        </button>
        <button @click="handleAddNewCustomOthers" class="action-btn" title="新建其他条目">
          <i class="fa-solid fa-puzzle-piece fa-xs"></i>
        </button>
      </div>
    </div>
    <div class="search-bar">
      <i class="fa-solid fa-magnifying-glass search-icon"></i>
      <input type="text" placeholder="搜索相关内容..." class="search-input">
    </div>
    <TreeView
        v-if="relatedTree.length > 0"
        :nodes="relatedTree"
        :active-node-id="activeNodeId"
        :expanded-node-ids="uiStore.uiState.expandedRelatedNodeIds"
        :editing-node-id="editorStore.editingNodeId"
        @select-node="handleSelectNode"
        @toggle-expansion="handleToggleExpansion"
        @context-menu="handleContextMenu"
        @commit-rename="handleCommitRename"
        @cancel-rename="handleCancelRename"
    />
    <div v-else class="p-4 text-sm text-gray-500">
      没有相关内容。
    </div>
  </div>
</template>
<script setup lang="ts">
// 文件: ..\src\novel\editor\components\sidebar\RelatedTab.vue
import { computed } from 'vue';
import TreeView from './TreeView.vue';
import { useEditorStore } from '@/novel/editor/stores/editorStore';
import { useRelatedContentStore } from '@/novel/editor/stores/relatedContentStore';
import { useUIStore } from '@/novel/editor/stores/uiStore';
import { usePromptTemplateStore } from '@/novel/editor/stores/promptTemplateStore';
import type { TreeNode } from '@/novel/editor/types';

const emit = defineEmits<{
  (e: 'show-context-menu', payload: { node: TreeNode; event: MouseEvent }): void;
}>();

const editorStore = useEditorStore();
const relatedContentStore = useRelatedContentStore();
const promptTemplateStore = usePromptTemplateStore();
const uiStore = useUIStore();

const activeNodeId = computed(() => editorStore.activeTabId);

const relatedTree = computed((): TreeNode[] => {
  return relatedContentStore.relatedData;
});

const handleSelectNode = (node: TreeNode) => {
  if ('content' in node && node.content !== undefined) {
    editorStore.openTab(node.id);
  } else if(node.children && node.children.length > 0) {
    uiStore.toggleRelatedNodeExpansion(node.id);
  }
};

const handleToggleExpansion = (id: string) => {
  uiStore.toggleRelatedNodeExpansion(id);
};

const handleContextMenu = (payload: { node: TreeNode; event: MouseEvent }) => {
  emit('show-context-menu', payload);
};

const handleCommitRename = (payload: { nodeId: string; newTitle: string; nodeType: string }) => {
  if (payload.newTitle.trim()) {
    switch (payload.nodeType) {
      case 'prompt_item':
        promptTemplateStore.renamePrompt(payload.nodeId, payload.newTitle);
        break;
      case 'others_item':
        relatedContentStore.renameCustomOthersNode(payload.nodeId, payload.newTitle);
        break;
      case 'plot_item':
      case 'analysis_item':
        // Check if it's a custom one or a settings one
        if (payload.nodeId.startsWith('custom-')) {
          relatedContentStore.renameCustomRelatedNode(payload.nodeId, payload.newTitle);
        } else {
          relatedContentStore.renameRelatedNode(payload.nodeId, payload.newTitle);
        }
        break;
      default:
        // Generic rename for groups, items in settings etc.
        relatedContentStore.renameRelatedNode(payload.nodeId, payload.newTitle);
        break;
    }
  }
  uiStore.setEditingNodeId(null);
};

const handleCancelRename = () => {
  uiStore.setEditingNodeId(null);
};

const handleAddNewCustomPlot = () => {
  const newNode = relatedContentStore.addCustomRelatedNode('plot');
  uiStore.ensureRelatedNodeIsExpanded('plot');
  editorStore.openTab(newNode.id);
  uiStore.setEditingNodeId(newNode.id);
};

const handleAddNewCustomAnalysis = () => {
  const newNode = relatedContentStore.addCustomRelatedNode('analysis');
  uiStore.ensureRelatedNodeIsExpanded('analysis');
  editorStore.openTab(newNode.id);
  uiStore.setEditingNodeId(newNode.id);
};

const handleAddNewCustomOthers = () => {
  const newNode = relatedContentStore.addCustomOthersNode();
  uiStore.ensureRelatedNodeIsExpanded('others');
  editorStore.openTab(newNode.id);
  uiStore.setEditingNodeId(newNode.id);
};
</script>
<style scoped>
.related-tab-container { padding: 1rem; overflow-y: auto; height: 100%; display: flex; flex-direction: column; }
.header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.75rem; padding: 0 0.5rem; flex-shrink: 0; }
.title { font-size: 0.875rem; font-weight: 500; color: #4B5563; }
.actions { display: flex; align-items: center; gap: 0.25rem; }
.action-btn { width: 1.75rem; height: 1.75rem; display: flex; align-items: center; justify-content: center; color: #6B7280; border-radius: 0.375rem; transition: background-color 0.15s; }
.action-btn:hover { background-color: #E5E7EB; }
.search-bar { position: relative; margin-bottom: 1rem; flex-shrink: 0; }
.search-icon { position: absolute; left: 0.75rem; top: 50%; transform: translateY(-50%); color: #9CA3AF; font-size: 0.875rem; }
.search-input { width: 100%; background: white; border: 1px solid #D1D5DB; border-radius: 0.5rem; padding: 0.4rem 0.75rem 0.4rem 2.25rem; font-size: 0.875rem; outline: none; transition: all 0.2s; }
.search-input:focus { border-color: #3B82F6; box-shadow: 0 0 0 1px #3B82F6; }
</style>

// =
// 文件: ..\src\novel\editor\components\sidebar\SidebarPanel.vue
//

<template>
  <div class="sidebar-panel-container">
    <div class="header">
      <h3 class="title">{{ activeTitle }}</h3>
    </div>

    <div class="content-container">
      <keep-alive>
        <component :is="activeTabComponent" @show-context-menu="showDirectoryContextMenu" />
      </keep-alive>
    </div>

    <DirectoryContextMenu ref="directoryContextMenuRef" />
  </div>
</template>

<script setup lang="ts">
import { ref, computed, defineAsyncComponent } from 'vue';
import DirectoryContextMenu from './DirectoryContextMenu.vue';
import type { TreeNode } from './TreeView.vue';

type TabId = 'directory' | 'related' | 'notes' | 'references';

const props = defineProps<{
  activeTabId: TabId | null;
}>();

const directoryContextMenuRef = ref<InstanceType<typeof DirectoryContextMenu> | null>(null);

const titles: Record<TabId, string> = {
  directory: '目录大纲',
  related: '相关内容',
  notes: '章节笔记',
  references: '参考书目',
};

const tabComponents: Record<TabId, any> = {
  directory: defineAsyncComponent(() => import('./DirectoryTab.vue')),
  related: defineAsyncComponent(() => import('./RelatedTab.vue')),
  notes: defineAsyncComponent(() => import('./NotesTab.vue')),
  references: defineAsyncComponent(() => import('./ReferencesTab.vue')),
};

const activeTabComponent = computed(() => {
  if (!props.activeTabId) return null;
  return tabComponents[props.activeTabId] || null;
});

const activeTitle = computed(() => {
  if (!props.activeTabId) return '';
  return titles[props.activeTabId] || '';
});

const showDirectoryContextMenu = (payload: { node: TreeNode, event: MouseEvent }) => {
  directoryContextMenuRef.value?.show(payload.event, payload.node);
};
</script>

<style scoped>
.sidebar-panel-container {
  width: 100%;
  background-color: #FAFBFC;
  border-right: 1px solid #F3F4F6;
  display: flex;
  flex-direction: column;
  height: 100%;
  overflow: hidden;
}

.header {
  padding: 0 1rem;
  height: 3.5rem;
  display: flex;
  align-items: center;
  border-bottom: 1px solid #F3F4F6;
  flex-shrink: 0;
}

.title {
  font-size: 1rem;
  font-weight: 500;
  color: #1F2937;
}

.content-container {
  flex-grow: 1;
  position: relative;
  overflow: hidden;
}
</style>

// =
// 文件: ..\src\novel\editor\components\sidebar\TreeView.vue
//

<template>
  <ul class="tree-view-list">
    <li v-for="node in nodes" :key="node.id" class="tree-view-item">
      <!-- 节点自身的渲染 -->
      <div
          class="node-content"
          :class="{ 'active': node.id === activeNodeId }"
          @click="handleNodeClick(node)"
          @contextmenu.prevent="emit('context-menu', { node, event: $event })"
      >
        <!-- 展开/折叠图标 -->
        <div
            class="expand-icon"
            :class="{ 'invisible': !node.children || node.children.length === 0 }"
            @click.stop="emit('toggle-expansion', node.id)"
        >
          <i class="fa-solid fa-chevron-right transition-transform" :class="{ 'rotate-90': expandedNodeIds.has(node.id) }"></i>
        </div>

        <!-- 节点类型图标 -->
        <div class="node-type-icon">
          <i :class="node.icon"></i>
        </div>

        <!-- 节点标题或重命名输入框 -->
        <template v-if="editingNodeId === node.id">
          <input
              ref="renameInput"
              type="text"
              :value="node.title"
              class="rename-input"
              @blur="handleRenameCommit($event, node)"
              @keydown.enter.prevent="handleRenameCommit($event, node)"
              @keydown.esc.prevent="handleRenameCancel"
              @click.stop
          />
        </template>
        <template v-else>
          <span class="node-title truncate">{{ node.title }}</span>
        </template>

        <!-- 节点状态徽章 (可选) -->
        <span v-if="'status' in node && node.status" class="node-status-badge">
          {{ node.status === 'editing' ? '编辑中' : '' }}
        </span>
      </div>

      <!-- 递归渲染子节点 -->
      <div v-if="node.children && node.children.length > 0" class="children-container">
        <TreeView
            v-show="expandedNodeIds.has(node.id)"
            :nodes="node.children"
            :active-node-id="activeNodeId"
            :expanded-node-ids="expandedNodeIds"
            :editing-node-id="editingNodeId"
            @select-node="emit('select-node', $event)"
            @toggle-expansion="emit('toggle-expansion', $event)"
            @context-menu="emit('context-menu', $event)"
            @commit-rename="emit('commit-rename', $event)"
            @cancel-rename="emit('cancel-rename')"
        />
      </div>
    </li>
  </ul>
</template>

<script setup lang="ts">
import { ref, watch, nextTick } from 'vue';
import type { PropType } from 'vue';
import type { TreeNode } from '@novel/editor/types';

// --- Props & Emits ---
const props = defineProps({
  nodes: {
    type: Array as PropType<TreeNode[]>,
    required: true,
  },
  activeNodeId: {
    type: String as PropType<string | null>,
    default: null,
  },
  expandedNodeIds: {
    type: Set as PropType<Set<string>>,
    required: true,
  },
  editingNodeId: {
    type: String as PropType<string | null>,
    default: null,
  },
});

const emit = defineEmits<{
  (e: 'select-node', node: TreeNode): void;
  (e: 'toggle-expansion', id: string): void;
  (e: 'context-menu', payload: { node: TreeNode, event: MouseEvent }): void;
  (e: 'commit-rename', payload: { nodeId: string, newTitle: string, nodeType: string }): void;
  (e: 'cancel-rename'): void;
}>();

const renameInput = ref<HTMLInputElement[] | null>(null);

watch(() => props.editingNodeId, (newId, oldId) => {
  if (newId && newId !== oldId) {
    nextTick(() => {
      if (renameInput.value && renameInput.value.length > 0) {
        renameInput.value[0].focus();
        renameInput.value[0].select();
      }
    });
  }
});

const handleNodeClick = (node: TreeNode) => {
  if (props.editingNodeId === node.id) return;
  // Always emit the select-node event and let the parent decide the action.
  emit('select-node', node);
};

const handleRenameCommit = (event: Event, node: TreeNode) => {
  const input = event.target as HTMLInputElement;
  const newTitle = input.value;
  emit('commit-rename', { nodeId: node.id, newTitle, nodeType: node.type });
};

const handleRenameCancel = () => {
  emit('cancel-rename');
};

</script>

<style scoped>
.tree-view-list {
  list-style: none;
  padding: 0;
  margin: 0;
  width: 100%;
}
.node-content {
  display: flex;
  align-items: center;
  gap: 0.5rem; /* 8px */
  padding: 0.5rem 0.75rem; /* 8px 12px */
  border-radius: 0.5rem; /* 8px */
  cursor: pointer;
  transition: background-color 0.15s ease-in-out, color 0.15s ease-in-out;
  font-size: 0.875rem; /* 14px */
  color: #374151; /* text-gray-700 */
  user-select: none;
}
.node-content:hover {
  background-color: #F3F4F6; /* hover:bg-gray-100 */
}
.node-content.active {
  background-color: #E0E7FF; /* bg-indigo-100 */
  color: #3730A3; /* text-indigo-800 */
  font-weight: 500;
}
.expand-icon {
  width: 1rem; /* 16px */
  height: 1rem; /* 16px */
  display: flex;
  align-items: center;
  justify-content: center;
  color: #9CA3AF; /* text-gray-400 */
  flex-shrink: 0;
}
.expand-icon.invisible {
  visibility: hidden;
}
.node-type-icon {
  width: 1.25rem; /* 20px */
  display: flex;
  align-items: center;
  justify-content: center;
  color: #6B7280; /* text-gray-500 */
}
.node-content.active .node-type-icon {
  color: #4338CA; /* active:text-indigo-700 */
}
.node-title {
  flex-grow: 1;
}
.node-status-badge {
  margin-left: auto;
  font-size: 0.75rem; /* 12px */
  padding: 0.125rem 0.5rem; /* 2px 8px */
  background-color: #DCFCE7; /* bg-green-100 */
  color: #166534; /* text-green-800 */
  border-radius: 9999px;
  font-weight: 500;
}
.children-container {
  padding-left: 1.5rem;
  margin-left: 0.5rem;
  border-left: 1px solid #E5E7EB;
}
.rename-input {
  flex-grow: 1;
  background-color: white;
  border: 1px solid #3B82F6;
  border-radius: 4px;
  padding: 1px 4px;
  font-size: 0.875rem;
  color: #1F2937;
  outline: none;
  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);
}
</style>

// =
// 文件: ..\src\novel\editor\components\sidebar\context-menus\ChapterMenu.vue
//

<template>
  <div>
    <p class="menu-title">文件操作</p>
    <div @click="emit('rename')" class="context-menu-item">
      <i class="fa-solid fa-pencil w-4 text-center"></i>
      <span>重命名</span>
    </div>
    <div class="context-menu-divider"></div>
    <p class="menu-title">AI 助手</p>
    <div @click="emit('ai-task', '分析')" class="context-menu-item">
      <i class="fa-solid fa-magnifying-glass-chart w-4 text-center text-[#F59E0B]"></i>
      <span>分析内容</span>
    </div>
    <div @click="emit('ai-task', '剧情生成')" class="context-menu-item">
      <i class="fa-solid fa-feather w-4 text-center text-[#EC4899]"></i>
      <span>生成剧情</span>
    </div>
    <div @click="emit('ai-task', '创作')" class="context-menu-item">
      <i class="fa-solid fa-pen-nib w-4 text-center text-violet-500"></i>
      <span>创作正文</span>
    </div>
    <div @click="emit('ai-task', '续写')" class="context-menu-item">
      <i class="fa-solid fa-wand-magic-sparkles w-4 text-center text-[#4B5563]"></i>
      <span>续写内容</span>
    </div>
    <div @click="emit('ai-task', '润色')" class="context-menu-item">
      <i class="fa-solid fa-palette w-4 text-center text-[#3B82F6]"></i>
      <span>润色内容</span>
    </div>
    <div class="context-menu-divider"></div>
    <div @click="emit('delete')" class="context-menu-item danger">
      <i class="fa-solid fa-trash-can w-4 text-center"></i>
      <span>删除章节</span>
    </div>
  </div>
</template>

<script setup lang="ts">
import type { PropType } from 'vue';
import type { AITask, TreeNode } from '@/novel/editor/types';

defineProps({
  node: {
    type: Object as PropType<TreeNode>,
    required: true,
  },
});

const emit = defineEmits<{
  (e: 'rename'): void;
  (e: 'delete'): void;
  (e: 'ai-task', taskType: AITask['type'], isBatch?: boolean): void;
}>();
</script>

<style scoped>
.context-menu-item { display: flex; align-items: center; gap: 0.75rem; padding: 0.5rem 0.75rem; border-radius: 0.5rem; font-size: 0.875rem; color: #374151; cursor: pointer; user-select: none; transition: background-color 0.15s, color 0.15s; }
.context-menu-item:hover { background-color: #f3f4f6; }
.context-menu-item.danger:hover { background-color: #fee2e2; color: #b91c1c; }
.context-menu-divider { height: 1px; background-color: #f3f4f6; margin: 0.5rem 0; }
.menu-title { padding: 0.25rem 0.75rem; font-size: 0.75rem; color: #9CA3AF; font-weight: 500; text-transform: uppercase; letter-spacing: 0.05em; }
</style>

// =
// 文件: ..\src\novel\editor\components\sidebar\context-menus\CustomRelatedMenu.vue
//

<template>
  <div>
    <p class="menu-title">条目管理</p>
    <div @click="emit('rename')" class="context-menu-item">
      <i class="fa-solid fa-pencil w-4 text-center"></i>
      <span>重命名</span>
    </div>
    <div @click="emit('delete')" class="context-menu-item danger">
      <i class="fa-solid fa-trash-can w-4 text-center"></i>
      <span>删除条目</span>
    </div>
  </div>
</template>

<script setup lang="ts">
import type { PropType } from 'vue';
import type { TreeNode } from '@/novel/editor/types';

defineProps({
  node: {
    type: Object as PropType<TreeNode>,
    required: true,
  },
});

const emit = defineEmits<{
  (e: 'rename'): void;
  (e: 'delete'): void;
}>();
</script>

<style scoped>
.context-menu-item { display: flex; align-items: center; gap: 0.75rem; padding: 0.5rem 0.75rem; border-radius: 0.5rem; font-size: 0.875rem; color: #374151; cursor: pointer; user-select: none; transition: background-color 0.15s, color 0.15s; }
.context-menu-item:hover { background-color: #f3f4f6; }
.context-menu-item.danger:hover { background-color: #fee2e2; color: #b91c1c; }
.menu-title { padding: 0.25rem 0.75rem; font-size: 0.75rem; color: #9CA3AF; font-weight: 500; text-transform: uppercase; letter-spacing: 0.05em; }
</style>

// =
// 文件: ..\src\novel\editor\components\sidebar\context-menus\GroupMenu.vue
//

<template>
  <div>
    <p class="menu-title">设定管理</p>
    <div @click="emit('new-item')" class="context-menu-item">
      <i class="fa-solid fa-plus w-4 text-center"></i>
      <span>新建条目</span>
    </div>
    <div @click="emit('new-group')" class="context-menu-item">
      <i class="fa-solid fa-folder-plus w-4 text-center"></i>
      <span>新建分组</span>
    </div>
    <div @click="emit('rename')" class="context-menu-item">
      <i class="fa-solid fa-pencil w-4 text-center"></i>
      <span>重命名</span>
    </div>
    <div @click="emit('delete')" class="context-menu-item danger">
      <i class="fa-solid fa-trash-can w-4 text-center"></i>
      <span>删除分组</span>
    </div>
  </div>
</template>

<script setup lang="ts">
import type { PropType } from 'vue';
import type { TreeNode } from '@/novel/editor/types';

defineProps({
  node: {
    type: Object as PropType<TreeNode>,
    required: true,
  },
});

const emit = defineEmits<{
  (e: 'new-group'): void;
  (e: 'new-item'): void;
  (e: 'rename'): void;
  (e: 'delete'): void;
}>();
</script>

<style scoped>
.context-menu-item { display: flex; align-items: center; gap: 0.75rem; padding: 0.5rem 0.75rem; border-radius: 0.5rem; font-size: 0.875rem; color: #374151; cursor: pointer; user-select: none; transition: background-color 0.15s, color 0.15s; }
.context-menu-item:hover { background-color: #f3f4f6; }
.context-menu-item.danger:hover { background-color: #fee2e2; color: #b91c1c; }
.menu-title { padding: 0.25rem 0.75rem; font-size: 0.75rem; color: #9CA3AF; font-weight: 500; text-transform: uppercase; letter-spacing: 0.05em; }
</style>

// =
// 文件: ..\src\novel\editor\components\sidebar\context-menus\ItemMenu.vue
//

<template>
  <div>
    <p class="menu-title">条目管理</p>
    <div @click="emit('rename')" class="context-menu-item">
      <i class="fa-solid fa-pencil w-4 text-center"></i>
      <span>重命名</span>
    </div>
    <div @click="emit('delete')" class="context-menu-item danger">
      <i class="fa-solid fa-trash-can w-4 text-center"></i>
      <span>删除条目</span>
    </div>
  </div>
</template>

<script setup lang="ts">
import type { PropType } from 'vue';
import type { TreeNode } from '@/novel/editor/types';

defineProps({
  node: {
    type: Object as PropType<TreeNode>,
    required: true,
  },
});

const emit = defineEmits<{
  (e: 'rename'): void;
  (e: 'delete'): void;
}>();
</script>

<style scoped>
.context-menu-item { display: flex; align-items: center; gap: 0.75rem; padding: 0.5rem 0.75rem; border-radius: 0.5rem; font-size: 0.875rem; color: #374151; cursor: pointer; user-select: none; transition: background-color 0.15s, color 0.15s; }
.context-menu-item:hover { background-color: #f3f4f6; }
.context-menu-item.danger:hover { background-color: #fee2e2; color: #b91c1c; }
.menu-title { padding: 0.25rem 0.75rem; font-size: 0.75rem; color: #9CA3AF; font-weight: 500; text-transform: uppercase; letter-spacing: 0.05em; }
</style>

// =
// 文件: ..\src\novel\editor\components\sidebar\context-menus\NoteMenu.vue
//

<template>
  <div>
    <p class="menu-title">笔记管理</p>
    <div @click="emit('rename')" class="context-menu-item">
      <i class="fa-solid fa-pencil w-4 text-center"></i>
      <span>重命名</span>
    </div>
    <div @click="emit('delete')" class="context-menu-item danger">
      <i class="fa-solid fa-trash-can w-4 text-center"></i>
      <span>删除笔记</span>
    </div>
  </div>
</template>

<script setup lang="ts">
import type { PropType } from 'vue';
import type { TreeNode } from '@/novel/editor/types';

defineProps({
  node: {
    type: Object as PropType<TreeNode>,
    required: true,
  },
});

const emit = defineEmits<{
  (e: 'rename'): void;
  (e: 'delete'): void;
}>();
</script>

<style scoped>
.context-menu-item { display: flex; align-items: center; gap: 0.75rem; padding: 0.5rem 0.75rem; border-radius: 0.5rem; font-size: 0.875rem; color: #374151; cursor: pointer; user-select: none; transition: background-color 0.15s, color 0.15s; }
.context-menu-item:hover { background-color: #f3f4f6; }
.context-menu-item.danger:hover { background-color: #fee2e2; color: #b91c1c; }
.menu-title { padding: 0.25rem 0.75rem; font-size: 0.75rem; color: #9CA3AF; font-weight: 500; text-transform: uppercase; letter-spacing: 0.05em; }
</style>

// =
// 文件: ..\src\novel\editor\components\sidebar\context-menus\OthersItemMenu.vue
//

<template>
  <div>
    <p class="menu-title">条目管理</p>
    <div @click="emit('rename')" class="context-menu-item">
      <i class="fa-solid fa-pencil w-4 text-center"></i>
      <span>重命名</span>
    </div>
    <div @click="emit('delete')" class="context-menu-item danger">
      <i class="fa-solid fa-trash-can w-4 text-center"></i>
      <span>删除条目</span>
    </div>
  </div>
</template>

<script setup lang="ts">
import type { PropType } from 'vue';
import type { TreeNode } from '@/novel/editor/types';

defineProps({
  node: {
    type: Object as PropType<TreeNode>,
    required: true,
  },
});

const emit = defineEmits<{
  (e: 'rename'): void;
  (e: 'delete'): void;
}>();
</script>

<style scoped>
.context-menu-item { display: flex; align-items: center; gap: 0.75rem; padding: 0.5rem 0.75rem; border-radius: 0.5rem; font-size: 0.875rem; color: #374151; cursor: pointer; user-select: none; transition: background-color 0.15s, color 0.15s; }
.context-menu-item:hover { background-color: #f3f4f6; }
.context-menu-item.danger:hover { background-color: #fee2e2; color: #b91c1c; }
.menu-title { padding: 0.25rem 0.75rem; font-size: 0.75rem; color: #9CA3AF; font-weight: 500; text-transform: uppercase; letter-spacing: 0.05em; }
</style>

// =
// 文件: ..\src\novel\editor\components\sidebar\context-menus\OthersMenu.vue
//

<template>
  <div>
    <p class="menu-title">管理</p>
    <div @click="emit('new-item')" class="context-menu-item">
      <i class="fa-solid fa-plus w-4 text-center"></i>
      <span>新建其他条目</span>
    </div>
  </div>
</template>

<script setup lang="ts">
import type { PropType } from 'vue';
import type { TreeNode } from '@/novel/editor/types';

defineProps({
  node: {
    type: Object as PropType<TreeNode>,
    required: true,
  },
});

const emit = defineEmits<{
  (e: 'new-item'): void;
}>();
</script>

<style scoped>
.context-menu-item { display: flex; align-items: center; gap: 0.75rem; padding: 0.5rem 0.75rem; border-radius: 0.5rem; font-size: 0.875rem; color: #374151; cursor: pointer; user-select: none; transition: background-color 0.15s, color 0.15s; }
.context-menu-item:hover { background-color: #f3f4f6; }
.menu-title { padding: 0.25rem 0.75rem; font-size: 0.75rem; color: #9CA3AF; font-weight: 500; text-transform: uppercase; letter-spacing: 0.05em; }
</style>

// =
// 文件: ..\src\novel\editor\components\sidebar\context-menus\PromptGroupMenu.vue
//

<template>
  <div>
    <p class="menu-title">模板管理</p>
    <div @click="emit('new-prompt')" class="context-menu-item">
      <i class="fa-solid fa-plus w-4 text-center"></i>
      <span>新建提示词</span>
    </div>
  </div>
</template>

<script setup lang="ts">
import type { PropType } from 'vue';
import type { TreeNode } from '@/novel/editor/types';

defineProps({
  node: {
    type: Object as PropType<TreeNode>,
    required: true,
  },
});

const emit = defineEmits<{
  (e: 'new-prompt'): void;
}>();
</script>

<style scoped>
.context-menu-item { display: flex; align-items: center; gap: 0.75rem; padding: 0.5rem 0.75rem; border-radius: 0.5rem; font-size: 0.875rem; color: #374151; cursor: pointer; user-select: none; transition: background-color 0.15s, color 0.15s; }
.context-menu-item:hover { background-color: #f3f4f6; }
.menu-title { padding: 0.25rem 0.75rem; font-size: 0.75rem; color: #9CA3AF; font-weight: 500; text-transform: uppercase; letter-spacing: 0.05em; }
</style>

// =
// 文件: ..\src\novel\editor\components\sidebar\context-menus\PromptItemMenu.vue
//

<template>
  <div>
    <p class="menu-title">模板管理</p>
    <div @click="emit('rename')" class="context-menu-item">
      <i class="fa-solid fa-pencil w-4 text-center"></i>
      <span>重命名</span>
    </div>
    <div @click="emit('delete')" class="context-menu-item danger">
      <i class="fa-solid fa-trash-can w-4 text-center"></i>
      <span>删除提示词</span>
    </div>
  </div>
</template>

<script setup lang="ts">
import type { PropType } from 'vue';
import type { TreeNode } from '@/novel/editor/types';

defineProps({
  node: {
    type: Object as PropType<TreeNode>,
    required: true,
  },
});

const emit = defineEmits<{
  (e: 'rename'): void;
  (e: 'delete'): void;
}>();
</script>

<style scoped>
.context-menu-item { display: flex; align-items: center; gap: 0.75rem; padding: 0.5rem 0.75rem; border-radius: 0.5rem; font-size: 0.875rem; color: #374151; cursor: pointer; user-select: none; transition: background-color 0.15s, color 0.15s; }
.context-menu-item:hover { background-color: #f3f4f6; }
.context-menu-item.danger:hover { background-color: #fee2e2; color: #b91c1c; }
.menu-title { padding: 0.25rem 0.75rem; font-size: 0.75rem; color: #9CA3AF; font-weight: 500; text-transform: uppercase; letter-spacing: 0.05em; }
</style>

// =
// 文件: ..\src\novel\editor\components\sidebar\context-menus\RootMenu.vue
//

<template>
  <div>
    <p class="menu-title">管理</p>
    <div @click="handleNewItem" class="context-menu-item">
      <i class="fa-solid fa-plus w-4 text-center"></i>
      <span>新建自定义{{ node.id === 'plot' ? '剧情' : '分析' }}</span>
    </div>
  </div>
</template>

<script setup lang="ts">
import type { PropType } from 'vue';
import type { TreeNode } from '@/novel/editor/types';

const props = defineProps({
  node: {
    type: Object as PropType<TreeNode>,
    required: true,
  },
});

const emit = defineEmits<{
  (e: 'new-item', target: 'plot' | 'analysis'): void;
}>();

const handleNewItem = () => {
  if (props.node.id === 'plot' || props.node.id === 'analysis') {
    emit('new-item', props.node.id);
  }
};
</script>

<style scoped>
.context-menu-item { display: flex; align-items: center; gap: 0.75rem; padding: 0.5rem 0.75rem; border-radius: 0.5rem; font-size: 0.875rem; color: #374151; cursor: pointer; user-select: none; transition: background-color 0.15s, color 0.15s; }
.context-menu-item:hover { background-color: #f3f4f6; }
.menu-title { padding: 0.25rem 0.75rem; font-size: 0.75rem; color: #9CA3AF; font-weight: 500; text-transform: uppercase; letter-spacing: 0.05em; }
</style>

// =
// 文件: ..\src\novel\editor\components\sidebar\context-menus\SettingsRootMenu.vue
//

<template>
  <div>
    <p class="menu-title">设定管理</p>
    <div @click="emit('new-group')" class="context-menu-item">
      <i class="fa-solid fa-folder-plus w-4 text-center"></i>
      <span>新建分组</span>
    </div>
  </div>
</template>

<script setup lang="ts">
import type { PropType } from 'vue';
import type { TreeNode } from '@/novel/editor/types';

defineProps({
  node: {
    type: Object as PropType<TreeNode>,
    required: true,
  },
});

const emit = defineEmits<{
  (e: 'new-group'): void;
}>();
</script>

<style scoped>
.context-menu-item { display: flex; align-items: center; gap: 0.75rem; padding: 0.5rem 0.75rem; border-radius: 0.5rem; font-size: 0.875rem; color: #374151; cursor: pointer; user-select: none; transition: background-color 0.15s, color 0.15s; }
.context-menu-item:hover { background-color: #f3f4f6; }
.menu-title { padding: 0.25rem 0.75rem; font-size: 0.75rem; color: #9CA3AF; font-weight: 500; text-transform: uppercase; letter-spacing: 0.05em; }
</style>

// =
// 文件: ..\src\novel\editor\components\sidebar\context-menus\VolumeMenu.vue
//

<template>
  <div>
    <p class="menu-title">目录管理</p>
    <div @click="emit('new-chapter')" class="context-menu-item">
      <i class="fa-solid fa-plus w-4 text-center"></i>
      <span>新建章节</span>
    </div>
    <div @click="emit('new-volume')" class="context-menu-item">
      <i class="fa-solid fa-folder-plus w-4 text-center"></i>
      <span>新建卷</span>
    </div>
    <div @click="emit('rename')" class="context-menu-item">
      <i class="fa-solid fa-pencil w-4 text-center"></i>
      <span>重命名</span>
    </div>
    <div class="context-menu-divider"></div>
    <p class="menu-title">AI 助手</p>
    <div @click="emit('ai-task', '分析', false)" class="context-menu-item">
      <i class="fa-solid fa-magnifying-glass-chart w-4 text-center text-[#F59E0B]"></i>
      <span>分析卷内容</span>
    </div>
    <div @click="emit('ai-task', '剧情生成', false)" class="context-menu-item">
      <i class="fa-solid fa-feather w-4 text-center text-[#EC4899]"></i>
      <span>生成卷剧情</span>
    </div>
    <div class="context-menu-divider"></div>
    <p class="menu-title">AI 批量任务</p>
    <div @click="emit('ai-task', '分析', true)" class="context-menu-item">
      <i class="fa-solid fa-magnifying-glass-chart w-4 text-center text-[#F59E0B]"></i>
      <span>批量分析章节</span>
    </div>
    <div @click="emit('ai-task', '剧情生成', true)" class="context-menu-item">
      <i class="fa-solid fa-feather w-4 text-center text-[#EC4899]"></i>
      <span>批量生成剧情</span>
    </div>
    <div @click="emit('ai-task', '创作', true)" class="context-menu-item">
      <i class="fa-solid fa-pen-to-square w-4 text-center text-[#8B5CF6]"></i>
      <span>批量创作正文</span>
    </div>
    <div @click="emit('ai-task', '续写', true)" class="context-menu-item">
      <i class="fa-solid fa-wand-magic-sparkles w-4 text-center text-[#4B5563]"></i>
      <span>批量续写章节</span>
    </div>
    <div class="context-menu-divider"></div>
    <div @click="emit('delete')" class="context-menu-item danger">
      <i class="fa-solid fa-trash-can w-4 text-center"></i>
      <span>删除卷</span>
    </div>
  </div>
</template>

<script setup lang="ts">
import type { PropType } from 'vue';
import type { AITask, TreeNode } from '@/novel/editor/types';

defineProps({
  node: {
    type: Object as PropType<TreeNode>,
    required: true,
  },
});

const emit = defineEmits<{
  (e: 'new-chapter'): void;
  (e: 'new-volume'): void;
  (e: 'rename'): void;
  (e: 'delete'): void;
  (e: 'ai-task', taskType: AITask['type'], isBatch: boolean): void;
}>();
</script>

<style scoped>
.context-menu-item { display: flex; align-items: center; gap: 0.75rem; padding: 0.5rem 0.75rem; border-radius: 0.5rem; font-size: 0.875rem; color: #374151; cursor: pointer; user-select: none; transition: background-color 0.15s, color 0.15s; }
.context-menu-item:hover { background-color: #f3f4f6; }
.context-menu-item.danger:hover { background-color: #fee2e2; color: #b91c1c; }
.context-menu-divider { height: 1px; background-color: #f3f4f6; margin: 0.5rem 0; }
.menu-title { padding: 0.25rem 0.75rem; font-size: 0.75rem; color: #9CA3AF; font-weight: 500; text-transform: uppercase; letter-spacing: 0.05em; }
</style>

